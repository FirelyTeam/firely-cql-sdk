//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Git/ncqa-cql/Cql/Cql.Grammar/cql.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Hl7.Cql.CqlToElm.Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class cqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, T__98=99, T__99=100, T__100=101, 
		T__101=102, T__102=103, T__103=104, T__104=105, T__105=106, T__106=107, 
		T__107=108, T__108=109, T__109=110, T__110=111, T__111=112, T__112=113, 
		T__113=114, T__114=115, T__115=116, T__116=117, T__117=118, T__118=119, 
		T__119=120, T__120=121, T__121=122, T__122=123, T__123=124, T__124=125, 
		T__125=126, T__126=127, T__127=128, T__128=129, T__129=130, T__130=131, 
		T__131=132, T__132=133, T__133=134, T__134=135, T__135=136, T__136=137, 
		T__137=138, T__138=139, T__139=140, T__140=141, T__141=142, T__142=143, 
		T__143=144, T__144=145, T__145=146, T__146=147, T__147=148, T__148=149, 
		T__149=150, T__150=151, T__151=152, T__152=153, T__153=154, T__154=155, 
		T__155=156, T__156=157, QUOTEDIDENTIFIER=158, DATETIME=159, LONGNUMBER=160, 
		DATE=161, TIME=162, IDENTIFIER=163, DELIMITEDIDENTIFIER=164, STRING=165, 
		NUMBER=166, WS=167, COMMENT=168, LINE_COMMENT=169;
	public const int
		RULE_definition = 0, RULE_library = 1, RULE_libraryDefinition = 2, RULE_usingDefinition = 3, 
		RULE_includeDefinition = 4, RULE_localIdentifier = 5, RULE_accessModifier = 6, 
		RULE_parameterDefinition = 7, RULE_codesystemDefinition = 8, RULE_valuesetDefinition = 9, 
		RULE_codesystems = 10, RULE_codesystemIdentifier = 11, RULE_libraryIdentifier = 12, 
		RULE_codeDefinition = 13, RULE_conceptDefinition = 14, RULE_codeIdentifier = 15, 
		RULE_codesystemId = 16, RULE_valuesetId = 17, RULE_versionSpecifier = 18, 
		RULE_codeId = 19, RULE_typeSpecifier = 20, RULE_namedTypeSpecifier = 21, 
		RULE_modelIdentifier = 22, RULE_listTypeSpecifier = 23, RULE_intervalTypeSpecifier = 24, 
		RULE_tupleTypeSpecifier = 25, RULE_tupleElementDefinition = 26, RULE_choiceTypeSpecifier = 27, 
		RULE_statement = 28, RULE_expressionDefinition = 29, RULE_contextDefinition = 30, 
		RULE_fluentModifier = 31, RULE_functionDefinition = 32, RULE_operandDefinition = 33, 
		RULE_functionBody = 34, RULE_querySource = 35, RULE_aliasedQuerySource = 36, 
		RULE_alias = 37, RULE_queryInclusionClause = 38, RULE_withClause = 39, 
		RULE_withoutClause = 40, RULE_retrieve = 41, RULE_contextIdentifier = 42, 
		RULE_codePath = 43, RULE_codeComparator = 44, RULE_terminology = 45, RULE_qualifier = 46, 
		RULE_query = 47, RULE_sourceClause = 48, RULE_letClause = 49, RULE_letClauseItem = 50, 
		RULE_whereClause = 51, RULE_returnClause = 52, RULE_aggregateClause = 53, 
		RULE_startingClause = 54, RULE_sortClause = 55, RULE_sortDirection = 56, 
		RULE_sortByItem = 57, RULE_qualifiedIdentifier = 58, RULE_qualifiedIdentifierExpression = 59, 
		RULE_qualifierExpression = 60, RULE_simplePath = 61, RULE_simpleLiteral = 62, 
		RULE_expression = 63, RULE_dateTimePrecision = 64, RULE_dateTimeComponent = 65, 
		RULE_pluralDateTimePrecision = 66, RULE_expressionTerm = 67, RULE_caseExpressionItem = 68, 
		RULE_dateTimePrecisionSpecifier = 69, RULE_relativeQualifier = 70, RULE_offsetRelativeQualifier = 71, 
		RULE_exclusiveRelativeQualifier = 72, RULE_quantityOffset = 73, RULE_temporalRelationship = 74, 
		RULE_intervalOperatorPhrase = 75, RULE_term = 76, RULE_qualifiedInvocation = 77, 
		RULE_qualifiedFunction = 78, RULE_invocation = 79, RULE_function = 80, 
		RULE_ratio = 81, RULE_literal = 82, RULE_intervalSelector = 83, RULE_tupleSelector = 84, 
		RULE_tupleElementSelector = 85, RULE_instanceSelector = 86, RULE_instanceElementSelector = 87, 
		RULE_listSelector = 88, RULE_displayClause = 89, RULE_codeSelector = 90, 
		RULE_conceptSelector = 91, RULE_keyword = 92, RULE_reservedWord = 93, 
		RULE_keywordIdentifier = 94, RULE_obsoleteIdentifier = 95, RULE_functionIdentifier = 96, 
		RULE_typeNameIdentifier = 97, RULE_referentialIdentifier = 98, RULE_referentialOrTypeNameIdentifier = 99, 
		RULE_identifierOrFunctionIdentifier = 100, RULE_identifier = 101, RULE_externalConstant = 102, 
		RULE_paramList = 103, RULE_quantity = 104, RULE_unit = 105;
	public static readonly string[] ruleNames = {
		"definition", "library", "libraryDefinition", "usingDefinition", "includeDefinition", 
		"localIdentifier", "accessModifier", "parameterDefinition", "codesystemDefinition", 
		"valuesetDefinition", "codesystems", "codesystemIdentifier", "libraryIdentifier", 
		"codeDefinition", "conceptDefinition", "codeIdentifier", "codesystemId", 
		"valuesetId", "versionSpecifier", "codeId", "typeSpecifier", "namedTypeSpecifier", 
		"modelIdentifier", "listTypeSpecifier", "intervalTypeSpecifier", "tupleTypeSpecifier", 
		"tupleElementDefinition", "choiceTypeSpecifier", "statement", "expressionDefinition", 
		"contextDefinition", "fluentModifier", "functionDefinition", "operandDefinition", 
		"functionBody", "querySource", "aliasedQuerySource", "alias", "queryInclusionClause", 
		"withClause", "withoutClause", "retrieve", "contextIdentifier", "codePath", 
		"codeComparator", "terminology", "qualifier", "query", "sourceClause", 
		"letClause", "letClauseItem", "whereClause", "returnClause", "aggregateClause", 
		"startingClause", "sortClause", "sortDirection", "sortByItem", "qualifiedIdentifier", 
		"qualifiedIdentifierExpression", "qualifierExpression", "simplePath", 
		"simpleLiteral", "expression", "dateTimePrecision", "dateTimeComponent", 
		"pluralDateTimePrecision", "expressionTerm", "caseExpressionItem", "dateTimePrecisionSpecifier", 
		"relativeQualifier", "offsetRelativeQualifier", "exclusiveRelativeQualifier", 
		"quantityOffset", "temporalRelationship", "intervalOperatorPhrase", "term", 
		"qualifiedInvocation", "qualifiedFunction", "invocation", "function", 
		"ratio", "literal", "intervalSelector", "tupleSelector", "tupleElementSelector", 
		"instanceSelector", "instanceElementSelector", "listSelector", "displayClause", 
		"codeSelector", "conceptSelector", "keyword", "reservedWord", "keywordIdentifier", 
		"obsoleteIdentifier", "functionIdentifier", "typeNameIdentifier", "referentialIdentifier", 
		"referentialOrTypeNameIdentifier", "identifierOrFunctionIdentifier", "identifier", 
		"externalConstant", "paramList", "quantity", "unit"
	};

	private static readonly string[] _LiteralNames = {
		null, "'library'", "'version'", "'using'", "'called'", "'include'", "'public'", 
		"'private'", "'parameter'", "'default'", "'codesystem'", "':'", "'valueset'", 
		"'codesystems'", "'{'", "','", "'}'", "'.'", "'code'", "'from'", "'concept'", 
		"'List'", "'<'", "'>'", "'Interval'", "'Tuple'", "'Choice'", "'define'", 
		"'context'", "'fluent'", "'function'", "'('", "')'", "'returns'", "'external'", 
		"'with'", "'such that'", "'without'", "'['", "'->'", "']'", "'in'", "'='", 
		"'~'", "'let'", "'where'", "'return'", "'all'", "'distinct'", "'aggregate'", 
		"'starting'", "'sort'", "'by'", "'asc'", "'ascending'", "'desc'", "'descending'", 
		"'is'", "'not'", "'null'", "'true'", "'false'", "'as'", "'cast'", "'exists'", 
		"'properly'", "'between'", "'and'", "'duration'", "'difference'", "'<='", 
		"'>='", "'!='", "'!~'", "'contains'", "'or'", "'xor'", "'implies'", "'|'", 
		"'union'", "'intersect'", "'except'", "'year'", "'month'", "'week'", "'day'", 
		"'hour'", "'minute'", "'second'", "'millisecond'", "'date'", "'time'", 
		"'timezone'", "'timezoneoffset'", "'years'", "'months'", "'weeks'", "'days'", 
		"'hours'", "'minutes'", "'seconds'", "'milliseconds'", "'convert'", "'to'", 
		"'+'", "'-'", "'start'", "'end'", "'of'", "'width'", "'successor'", "'predecessor'", 
		"'singleton'", "'point'", "'minimum'", "'maximum'", "'^'", "'*'", "'/'", 
		"'div'", "'mod'", "'&'", "'if'", "'then'", "'else'", "'case'", "'flatten'", 
		"'expand'", "'collapse'", "'per'", "'when'", "'or before'", "'or after'", 
		"'or more'", "'or less'", "'less than'", "'more than'", "'on or'", "'before'", 
		"'after'", "'or on'", "'starts'", "'ends'", "'occurs'", "'same'", "'includes'", 
		"'during'", "'included in'", "'within'", "'meets'", "'overlaps'", "'$this'", 
		"'$index'", "'$total'", "'display'", "'Code'", "'Concept'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "QUOTEDIDENTIFIER", "DATETIME", "LONGNUMBER", "DATE", "TIME", 
		"IDENTIFIER", "DELIMITEDIDENTIFIER", "STRING", "NUMBER", "WS", "COMMENT", 
		"LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "cql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static cqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public cqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public cqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UsingDefinitionContext usingDefinition() {
			return GetRuleContext<UsingDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeDefinitionContext includeDefinition() {
			return GetRuleContext<IncludeDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodesystemDefinitionContext codesystemDefinition() {
			return GetRuleContext<CodesystemDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValuesetDefinitionContext valuesetDefinition() {
			return GetRuleContext<ValuesetDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeDefinitionContext codeDefinition() {
			return GetRuleContext<CodeDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConceptDefinitionContext conceptDefinition() {
			return GetRuleContext<ConceptDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDefinitionContext parameterDefinition() {
			return GetRuleContext<ParameterDefinitionContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 0, RULE_definition);
		try {
			State = 219;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212;
				usingDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 213;
				includeDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 214;
				codesystemDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 215;
				valuesetDefinition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 216;
				codeDefinition();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 217;
				conceptDefinition();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 218;
				parameterDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LibraryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(cqlParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LibraryDefinitionContext libraryDefinition() {
			return GetRuleContext<LibraryDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public LibraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_library; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterLibrary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitLibrary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLibrary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LibraryContext library() {
		LibraryContext _localctx = new LibraryContext(Context, State);
		EnterRule(_localctx, 2, RULE_library);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 221;
				libraryDefinition();
				}
			}

			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1316328L) != 0)) {
				{
				{
				State = 224;
				definition();
				}
				}
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__26 || _la==T__27) {
				{
				{
				State = 230;
				statement();
				}
				}
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 236;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LibraryDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VersionSpecifierContext versionSpecifier() {
			return GetRuleContext<VersionSpecifierContext>(0);
		}
		public LibraryDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_libraryDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterLibraryDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitLibraryDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLibraryDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LibraryDefinitionContext libraryDefinition() {
		LibraryDefinitionContext _localctx = new LibraryDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_libraryDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			Match(T__0);
			State = 239;
			qualifiedIdentifier();
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 240;
				Match(T__1);
				State = 241;
				versionSpecifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VersionSpecifierContext versionSpecifier() {
			return GetRuleContext<VersionSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalIdentifierContext localIdentifier() {
			return GetRuleContext<LocalIdentifierContext>(0);
		}
		public UsingDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterUsingDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitUsingDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDefinitionContext usingDefinition() {
		UsingDefinitionContext _localctx = new UsingDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_usingDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(T__2);
			State = 245;
			qualifiedIdentifier();
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 246;
				Match(T__1);
				State = 247;
				versionSpecifier();
				}
			}

			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 250;
				Match(T__3);
				State = 251;
				localIdentifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VersionSpecifierContext versionSpecifier() {
			return GetRuleContext<VersionSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalIdentifierContext localIdentifier() {
			return GetRuleContext<LocalIdentifierContext>(0);
		}
		public IncludeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_includeDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterIncludeDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitIncludeDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncludeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeDefinitionContext includeDefinition() {
		IncludeDefinitionContext _localctx = new IncludeDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_includeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			Match(T__4);
			State = 255;
			qualifiedIdentifier();
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 256;
				Match(T__1);
				State = 257;
				versionSpecifier();
				}
			}

			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 260;
				Match(T__3);
				State = 261;
				localIdentifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LocalIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterLocalIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitLocalIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalIdentifierContext localIdentifier() {
		LocalIdentifierContext _localctx = new LocalIdentifierContext(Context, State);
		EnterRule(_localctx, 10, RULE_localIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessModifierContext : ParserRuleContext {
		public AccessModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterAccessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitAccessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessModifierContext accessModifier() {
		AccessModifierContext _localctx = new AccessModifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_accessModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__6) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterParameterDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitParameterDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDefinitionContext parameterDefinition() {
		ParameterDefinitionContext _localctx = new ParameterDefinitionContext(Context, State);
		EnterRule(_localctx, 14, RULE_parameterDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5 || _la==T__6) {
				{
				State = 268;
				accessModifier();
				}
			}

			State = 271;
			Match(T__7);
			State = 272;
			identifier();
			State = 274;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 273;
				typeSpecifier();
				}
				break;
			}
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 276;
				Match(T__8);
				State = 277;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodesystemDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodesystemIdContext codesystemId() {
			return GetRuleContext<CodesystemIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VersionSpecifierContext versionSpecifier() {
			return GetRuleContext<VersionSpecifierContext>(0);
		}
		public CodesystemDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codesystemDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterCodesystemDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitCodesystemDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodesystemDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodesystemDefinitionContext codesystemDefinition() {
		CodesystemDefinitionContext _localctx = new CodesystemDefinitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_codesystemDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5 || _la==T__6) {
				{
				State = 280;
				accessModifier();
				}
			}

			State = 283;
			Match(T__9);
			State = 284;
			identifier();
			State = 285;
			Match(T__10);
			State = 286;
			codesystemId();
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 287;
				Match(T__1);
				State = 288;
				versionSpecifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesetDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValuesetIdContext valuesetId() {
			return GetRuleContext<ValuesetIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VersionSpecifierContext versionSpecifier() {
			return GetRuleContext<VersionSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodesystemsContext codesystems() {
			return GetRuleContext<CodesystemsContext>(0);
		}
		public ValuesetDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valuesetDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterValuesetDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitValuesetDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValuesetDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValuesetDefinitionContext valuesetDefinition() {
		ValuesetDefinitionContext _localctx = new ValuesetDefinitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_valuesetDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5 || _la==T__6) {
				{
				State = 291;
				accessModifier();
				}
			}

			State = 294;
			Match(T__11);
			State = 295;
			identifier();
			State = 296;
			Match(T__10);
			State = 297;
			valuesetId();
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 298;
				Match(T__1);
				State = 299;
				versionSpecifier();
				}
			}

			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 302;
				codesystems();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodesystemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CodesystemIdentifierContext[] codesystemIdentifier() {
			return GetRuleContexts<CodesystemIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodesystemIdentifierContext codesystemIdentifier(int i) {
			return GetRuleContext<CodesystemIdentifierContext>(i);
		}
		public CodesystemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codesystems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterCodesystems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitCodesystems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodesystems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodesystemsContext codesystems() {
		CodesystemsContext _localctx = new CodesystemsContext(Context, State);
		EnterRule(_localctx, 20, RULE_codesystems);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			Match(T__12);
			State = 306;
			Match(T__13);
			State = 307;
			codesystemIdentifier();
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 308;
				Match(T__14);
				State = 309;
				codesystemIdentifier();
				}
				}
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 315;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodesystemIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LibraryIdentifierContext libraryIdentifier() {
			return GetRuleContext<LibraryIdentifierContext>(0);
		}
		public CodesystemIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codesystemIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterCodesystemIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitCodesystemIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodesystemIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodesystemIdentifierContext codesystemIdentifier() {
		CodesystemIdentifierContext _localctx = new CodesystemIdentifierContext(Context, State);
		EnterRule(_localctx, 22, RULE_codesystemIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 317;
				libraryIdentifier();
				State = 318;
				Match(T__16);
				}
				break;
			}
			State = 322;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LibraryIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LibraryIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_libraryIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterLibraryIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitLibraryIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLibraryIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LibraryIdentifierContext libraryIdentifier() {
		LibraryIdentifierContext _localctx = new LibraryIdentifierContext(Context, State);
		EnterRule(_localctx, 24, RULE_libraryIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeIdContext codeId() {
			return GetRuleContext<CodeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodesystemIdentifierContext codesystemIdentifier() {
			return GetRuleContext<CodesystemIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DisplayClauseContext displayClause() {
			return GetRuleContext<DisplayClauseContext>(0);
		}
		public CodeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterCodeDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitCodeDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeDefinitionContext codeDefinition() {
		CodeDefinitionContext _localctx = new CodeDefinitionContext(Context, State);
		EnterRule(_localctx, 26, RULE_codeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5 || _la==T__6) {
				{
				State = 326;
				accessModifier();
				}
			}

			State = 329;
			Match(T__17);
			State = 330;
			identifier();
			State = 331;
			Match(T__10);
			State = 332;
			codeId();
			State = 333;
			Match(T__18);
			State = 334;
			codesystemIdentifier();
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__153) {
				{
				State = 335;
				displayClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConceptDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeIdentifierContext[] codeIdentifier() {
			return GetRuleContexts<CodeIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeIdentifierContext codeIdentifier(int i) {
			return GetRuleContext<CodeIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DisplayClauseContext displayClause() {
			return GetRuleContext<DisplayClauseContext>(0);
		}
		public ConceptDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conceptDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterConceptDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitConceptDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConceptDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConceptDefinitionContext conceptDefinition() {
		ConceptDefinitionContext _localctx = new ConceptDefinitionContext(Context, State);
		EnterRule(_localctx, 28, RULE_conceptDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5 || _la==T__6) {
				{
				State = 338;
				accessModifier();
				}
			}

			State = 341;
			Match(T__19);
			State = 342;
			identifier();
			State = 343;
			Match(T__10);
			State = 344;
			Match(T__13);
			State = 345;
			codeIdentifier();
			State = 350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 346;
				Match(T__14);
				State = 347;
				codeIdentifier();
				}
				}
				State = 352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 353;
			Match(T__15);
			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__153) {
				{
				State = 354;
				displayClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LibraryIdentifierContext libraryIdentifier() {
			return GetRuleContext<LibraryIdentifierContext>(0);
		}
		public CodeIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterCodeIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitCodeIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeIdentifierContext codeIdentifier() {
		CodeIdentifierContext _localctx = new CodeIdentifierContext(Context, State);
		EnterRule(_localctx, 30, RULE_codeIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 357;
				libraryIdentifier();
				State = 358;
				Match(T__16);
				}
				break;
			}
			State = 362;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodesystemIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(cqlParser.STRING, 0); }
		public CodesystemIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codesystemId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterCodesystemId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitCodesystemId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodesystemId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodesystemIdContext codesystemId() {
		CodesystemIdContext _localctx = new CodesystemIdContext(Context, State);
		EnterRule(_localctx, 32, RULE_codesystemId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesetIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(cqlParser.STRING, 0); }
		public ValuesetIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valuesetId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterValuesetId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitValuesetId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValuesetId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValuesetIdContext valuesetId() {
		ValuesetIdContext _localctx = new ValuesetIdContext(Context, State);
		EnterRule(_localctx, 34, RULE_valuesetId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(cqlParser.STRING, 0); }
		public VersionSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_versionSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterVersionSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitVersionSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersionSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionSpecifierContext versionSpecifier() {
		VersionSpecifierContext _localctx = new VersionSpecifierContext(Context, State);
		EnterRule(_localctx, 36, RULE_versionSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(cqlParser.STRING, 0); }
		public CodeIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterCodeId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitCodeId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeIdContext codeId() {
		CodeIdContext _localctx = new CodeIdContext(Context, State);
		EnterRule(_localctx, 38, RULE_codeId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedTypeSpecifierContext namedTypeSpecifier() {
			return GetRuleContext<NamedTypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListTypeSpecifierContext listTypeSpecifier() {
			return GetRuleContext<ListTypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeSpecifierContext intervalTypeSpecifier() {
			return GetRuleContext<IntervalTypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleTypeSpecifierContext tupleTypeSpecifier() {
			return GetRuleContext<TupleTypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChoiceTypeSpecifierContext choiceTypeSpecifier() {
			return GetRuleContext<ChoiceTypeSpecifierContext>(0);
		}
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 40, RULE_typeSpecifier);
		try {
			State = 377;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__11:
			case T__12:
			case T__17:
			case T__19:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__44:
			case T__49:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__73:
			case T__75:
			case T__76:
			case T__78:
			case T__79:
			case T__80:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__105:
			case T__106:
			case T__108:
			case T__109:
			case T__110:
			case T__118:
			case T__119:
			case T__130:
			case T__131:
			case T__132:
			case T__133:
			case T__140:
			case T__141:
			case T__144:
			case T__148:
			case T__149:
			case T__153:
			case T__154:
			case T__155:
			case QUOTEDIDENTIFIER:
			case IDENTIFIER:
			case DELIMITEDIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 372;
				namedTypeSpecifier();
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 2);
				{
				State = 373;
				listTypeSpecifier();
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 3);
				{
				State = 374;
				intervalTypeSpecifier();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 4);
				{
				State = 375;
				tupleTypeSpecifier();
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 5);
				{
				State = 376;
				choiceTypeSpecifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedTypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferentialOrTypeNameIdentifierContext referentialOrTypeNameIdentifier() {
			return GetRuleContext<ReferentialOrTypeNameIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext[] qualifier() {
			return GetRuleContexts<QualifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier(int i) {
			return GetRuleContext<QualifierContext>(i);
		}
		public NamedTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedTypeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterNamedTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitNamedTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedTypeSpecifierContext namedTypeSpecifier() {
		NamedTypeSpecifierContext _localctx = new NamedTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 42, RULE_namedTypeSpecifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 379;
					qualifier();
					State = 380;
					Match(T__16);
					}
					} 
				}
				State = 386;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			State = 387;
			referentialOrTypeNameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ModelIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterModelIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitModelIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModelIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelIdentifierContext modelIdentifier() {
		ModelIdentifierContext _localctx = new ModelIdentifierContext(Context, State);
		EnterRule(_localctx, 44, RULE_modelIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ListTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listTypeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterListTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitListTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListTypeSpecifierContext listTypeSpecifier() {
		ListTypeSpecifierContext _localctx = new ListTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 46, RULE_listTypeSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			Match(T__20);
			State = 392;
			Match(T__21);
			State = 393;
			typeSpecifier();
			State = 394;
			Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalTypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public IntervalTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalTypeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterIntervalTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitIntervalTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalTypeSpecifierContext intervalTypeSpecifier() {
		IntervalTypeSpecifierContext _localctx = new IntervalTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 48, RULE_intervalTypeSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			Match(T__23);
			State = 397;
			Match(T__21);
			State = 398;
			typeSpecifier();
			State = 399;
			Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleElementDefinitionContext[] tupleElementDefinition() {
			return GetRuleContexts<TupleElementDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleElementDefinitionContext tupleElementDefinition(int i) {
			return GetRuleContext<TupleElementDefinitionContext>(i);
		}
		public TupleTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleTypeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterTupleTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitTupleTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeSpecifierContext tupleTypeSpecifier() {
		TupleTypeSpecifierContext _localctx = new TupleTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 50, RULE_tupleTypeSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			Match(T__24);
			State = 402;
			Match(T__13);
			State = 403;
			tupleElementDefinition();
			State = 408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 404;
				Match(T__14);
				State = 405;
				tupleElementDefinition();
				}
				}
				State = 410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 411;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleElementDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferentialIdentifierContext referentialIdentifier() {
			return GetRuleContext<ReferentialIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public TupleElementDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleElementDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterTupleElementDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitTupleElementDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleElementDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleElementDefinitionContext tupleElementDefinition() {
		TupleElementDefinitionContext _localctx = new TupleElementDefinitionContext(Context, State);
		EnterRule(_localctx, 52, RULE_tupleElementDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			referentialIdentifier();
			State = 414;
			typeSpecifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChoiceTypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext[] typeSpecifier() {
			return GetRuleContexts<TypeSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier(int i) {
			return GetRuleContext<TypeSpecifierContext>(i);
		}
		public ChoiceTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choiceTypeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterChoiceTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitChoiceTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoiceTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChoiceTypeSpecifierContext choiceTypeSpecifier() {
		ChoiceTypeSpecifierContext _localctx = new ChoiceTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 54, RULE_choiceTypeSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			Match(T__25);
			State = 417;
			Match(T__21);
			State = 418;
			typeSpecifier();
			State = 423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 419;
				Match(T__14);
				State = 420;
				typeSpecifier();
				}
				}
				State = 425;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 426;
			Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionDefinitionContext expressionDefinition() {
			return GetRuleContext<ExpressionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContextDefinitionContext contextDefinition() {
			return GetRuleContext<ContextDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_statement);
		try {
			State = 431;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 428;
				expressionDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 429;
				contextDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 430;
				functionDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ExpressionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterExpressionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitExpressionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionDefinitionContext expressionDefinition() {
		ExpressionDefinitionContext _localctx = new ExpressionDefinitionContext(Context, State);
		EnterRule(_localctx, 58, RULE_expressionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			Match(T__26);
			State = 435;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5 || _la==T__6) {
				{
				State = 434;
				accessModifier();
				}
			}

			State = 437;
			identifier();
			State = 438;
			Match(T__10);
			State = 439;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModelIdentifierContext modelIdentifier() {
			return GetRuleContext<ModelIdentifierContext>(0);
		}
		public ContextDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contextDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterContextDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitContextDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContextDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContextDefinitionContext contextDefinition() {
		ContextDefinitionContext _localctx = new ContextDefinitionContext(Context, State);
		EnterRule(_localctx, 60, RULE_contextDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			Match(T__27);
			State = 445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 442;
				modelIdentifier();
				State = 443;
				Match(T__16);
				}
				break;
			}
			State = 447;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FluentModifierContext : ParserRuleContext {
		public FluentModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fluentModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterFluentModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitFluentModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFluentModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FluentModifierContext fluentModifier() {
		FluentModifierContext _localctx = new FluentModifierContext(Context, State);
		EnterRule(_localctx, 62, RULE_fluentModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			Match(T__28);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierOrFunctionIdentifierContext identifierOrFunctionIdentifier() {
			return GetRuleContext<IdentifierOrFunctionIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FluentModifierContext fluentModifier() {
			return GetRuleContext<FluentModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandDefinitionContext[] operandDefinition() {
			return GetRuleContexts<OperandDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandDefinitionContext operandDefinition(int i) {
			return GetRuleContext<OperandDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 64, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			Match(T__26);
			State = 453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5 || _la==T__6) {
				{
				State = 452;
				accessModifier();
				}
			}

			State = 456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__28) {
				{
				State = 455;
				fluentModifier();
				}
			}

			State = 458;
			Match(T__29);
			State = 459;
			identifierOrFunctionIdentifier();
			State = 460;
			Match(T__30);
			State = 469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140772674742007806L) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 2161833627658158317L) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & 12722963L) != 0)) {
				{
				State = 461;
				operandDefinition();
				State = 466;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 462;
					Match(T__14);
					State = 463;
					operandDefinition();
					}
					}
					State = 468;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 471;
			Match(T__31);
			State = 474;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__32) {
				{
				State = 472;
				Match(T__32);
				State = 473;
				typeSpecifier();
				}
			}

			State = 476;
			Match(T__10);
			State = 479;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__11:
			case T__12:
			case T__13:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__23:
			case T__24:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__37:
			case T__44:
			case T__47:
			case T__49:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__57:
			case T__58:
			case T__59:
			case T__60:
			case T__62:
			case T__63:
			case T__67:
			case T__68:
			case T__73:
			case T__75:
			case T__76:
			case T__78:
			case T__79:
			case T__80:
			case T__81:
			case T__82:
			case T__83:
			case T__84:
			case T__85:
			case T__86:
			case T__87:
			case T__88:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__93:
			case T__94:
			case T__95:
			case T__96:
			case T__97:
			case T__98:
			case T__99:
			case T__100:
			case T__101:
			case T__103:
			case T__104:
			case T__105:
			case T__106:
			case T__108:
			case T__109:
			case T__110:
			case T__111:
			case T__112:
			case T__113:
			case T__114:
			case T__118:
			case T__119:
			case T__121:
			case T__124:
			case T__125:
			case T__126:
			case T__127:
			case T__130:
			case T__131:
			case T__132:
			case T__133:
			case T__140:
			case T__141:
			case T__144:
			case T__148:
			case T__149:
			case T__150:
			case T__151:
			case T__152:
			case T__153:
			case T__154:
			case T__155:
			case T__156:
			case QUOTEDIDENTIFIER:
			case DATETIME:
			case LONGNUMBER:
			case DATE:
			case TIME:
			case IDENTIFIER:
			case DELIMITEDIDENTIFIER:
			case STRING:
			case NUMBER:
				{
				State = 477;
				functionBody();
				}
				break;
			case T__33:
				{
				State = 478;
				Match(T__33);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferentialIdentifierContext referentialIdentifier() {
			return GetRuleContext<ReferentialIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public OperandDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operandDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterOperandDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitOperandDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperandDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandDefinitionContext operandDefinition() {
		OperandDefinitionContext _localctx = new OperandDefinitionContext(Context, State);
		EnterRule(_localctx, 66, RULE_operandDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			referentialIdentifier();
			State = 482;
			typeSpecifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 68, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RetrieveContext retrieve() {
			return GetRuleContext<RetrieveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierExpressionContext qualifiedIdentifierExpression() {
			return GetRuleContext<QualifiedIdentifierExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public QuerySourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterQuerySource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitQuerySource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuerySource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuerySourceContext querySource() {
		QuerySourceContext _localctx = new QuerySourceContext(Context, State);
		EnterRule(_localctx, 70, RULE_querySource);
		try {
			State = 492;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__37:
				EnterOuterAlt(_localctx, 1);
				{
				State = 486;
				retrieve();
				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__11:
			case T__12:
			case T__17:
			case T__19:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__44:
			case T__49:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__73:
			case T__75:
			case T__76:
			case T__78:
			case T__79:
			case T__80:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__105:
			case T__106:
			case T__108:
			case T__109:
			case T__110:
			case T__118:
			case T__119:
			case T__130:
			case T__131:
			case T__132:
			case T__133:
			case T__140:
			case T__141:
			case T__144:
			case T__148:
			case T__149:
			case T__153:
			case QUOTEDIDENTIFIER:
			case IDENTIFIER:
			case DELIMITEDIDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 487;
				qualifiedIdentifierExpression();
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 3);
				{
				State = 488;
				Match(T__30);
				State = 489;
				expression(0);
				State = 490;
				Match(T__31);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasedQuerySourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QuerySourceContext querySource() {
			return GetRuleContext<QuerySourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public AliasedQuerySourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasedQuerySource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterAliasedQuerySource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitAliasedQuerySource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasedQuerySource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasedQuerySourceContext aliasedQuerySource() {
		AliasedQuerySourceContext _localctx = new AliasedQuerySourceContext(Context, State);
		EnterRule(_localctx, 72, RULE_aliasedQuerySource);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			querySource();
			State = 495;
			alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 74, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryInclusionClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithoutClauseContext withoutClause() {
			return GetRuleContext<WithoutClauseContext>(0);
		}
		public QueryInclusionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryInclusionClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterQueryInclusionClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitQueryInclusionClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryInclusionClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryInclusionClauseContext queryInclusionClause() {
		QueryInclusionClauseContext _localctx = new QueryInclusionClauseContext(Context, State);
		EnterRule(_localctx, 76, RULE_queryInclusionClause);
		try {
			State = 501;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__34:
				EnterOuterAlt(_localctx, 1);
				{
				State = 499;
				withClause();
				}
				break;
			case T__36:
				EnterOuterAlt(_localctx, 2);
				{
				State = 500;
				withoutClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AliasedQuerySourceContext aliasedQuerySource() {
			return GetRuleContext<AliasedQuerySourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterWithClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitWithClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithClauseContext withClause() {
		WithClauseContext _localctx = new WithClauseContext(Context, State);
		EnterRule(_localctx, 78, RULE_withClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			Match(T__34);
			State = 504;
			aliasedQuerySource();
			State = 505;
			Match(T__35);
			State = 506;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithoutClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AliasedQuerySourceContext aliasedQuerySource() {
			return GetRuleContext<AliasedQuerySourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WithoutClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withoutClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterWithoutClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitWithoutClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithoutClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithoutClauseContext withoutClause() {
		WithoutClauseContext _localctx = new WithoutClauseContext(Context, State);
		EnterRule(_localctx, 80, RULE_withoutClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			Match(T__36);
			State = 509;
			aliasedQuerySource();
			State = 510;
			Match(T__35);
			State = 511;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetrieveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedTypeSpecifierContext namedTypeSpecifier() {
			return GetRuleContext<NamedTypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContextIdentifierContext contextIdentifier() {
			return GetRuleContext<ContextIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminologyContext terminology() {
			return GetRuleContext<TerminologyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodePathContext codePath() {
			return GetRuleContext<CodePathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeComparatorContext codeComparator() {
			return GetRuleContext<CodeComparatorContext>(0);
		}
		public RetrieveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retrieve; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterRetrieve(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitRetrieve(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetrieve(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetrieveContext retrieve() {
		RetrieveContext _localctx = new RetrieveContext(Context, State);
		EnterRule(_localctx, 82, RULE_retrieve);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			Match(T__37);
			State = 517;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 514;
				contextIdentifier();
				State = 515;
				Match(T__38);
				}
				break;
			}
			State = 519;
			namedTypeSpecifier();
			State = 527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 520;
				Match(T__10);
				State = 524;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 521;
					codePath();
					State = 522;
					codeComparator();
					}
					break;
				}
				State = 526;
				terminology();
				}
			}

			State = 529;
			Match(T__39);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierExpressionContext qualifiedIdentifierExpression() {
			return GetRuleContext<QualifiedIdentifierExpressionContext>(0);
		}
		public ContextIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contextIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterContextIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitContextIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContextIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContextIdentifierContext contextIdentifier() {
		ContextIdentifierContext _localctx = new ContextIdentifierContext(Context, State);
		EnterRule(_localctx, 84, RULE_contextIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			qualifiedIdentifierExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodePathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimplePathContext simplePath() {
			return GetRuleContext<SimplePathContext>(0);
		}
		public CodePathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codePath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterCodePath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitCodePath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodePath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodePathContext codePath() {
		CodePathContext _localctx = new CodePathContext(Context, State);
		EnterRule(_localctx, 86, RULE_codePath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			simplePath(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeComparatorContext : ParserRuleContext {
		public CodeComparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeComparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterCodeComparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitCodeComparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeComparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeComparatorContext codeComparator() {
		CodeComparatorContext _localctx = new CodeComparatorContext(Context, State);
		EnterRule(_localctx, 88, RULE_codeComparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15393162788864L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminologyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierExpressionContext qualifiedIdentifierExpression() {
			return GetRuleContext<QualifiedIdentifierExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TerminologyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminology; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterTerminology(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitTerminology(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminology(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminologyContext terminology() {
		TerminologyContext _localctx = new TerminologyContext(Context, State);
		EnterRule(_localctx, 90, RULE_terminology);
		try {
			State = 539;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 537;
				qualifiedIdentifierExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 538;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterQualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitQualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifierContext qualifier() {
		QualifierContext _localctx = new QualifierContext(Context, State);
		EnterRule(_localctx, 92, RULE_qualifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceClauseContext sourceClause() {
			return GetRuleContext<SourceClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetClauseContext letClause() {
			return GetRuleContext<LetClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryInclusionClauseContext[] queryInclusionClause() {
			return GetRuleContexts<QueryInclusionClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryInclusionClauseContext queryInclusionClause(int i) {
			return GetRuleContext<QueryInclusionClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggregateClauseContext aggregateClause() {
			return GetRuleContext<AggregateClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnClauseContext returnClause() {
			return GetRuleContext<ReturnClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortClauseContext sortClause() {
			return GetRuleContext<SortClauseContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 94, RULE_query);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 543;
			sourceClause();
			State = 545;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 544;
				letClause();
				}
				break;
			}
			State = 550;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 547;
					queryInclusionClause();
					}
					} 
				}
				State = 552;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			State = 554;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 553;
				whereClause();
				}
				break;
			}
			State = 558;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 556;
				aggregateClause();
				}
				break;
			case 2:
				{
				State = 557;
				returnClause();
				}
				break;
			}
			State = 561;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 560;
				sortClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AliasedQuerySourceContext[] aliasedQuerySource() {
			return GetRuleContexts<AliasedQuerySourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasedQuerySourceContext aliasedQuerySource(int i) {
			return GetRuleContext<AliasedQuerySourceContext>(i);
		}
		public SourceClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterSourceClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitSourceClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceClauseContext sourceClause() {
		SourceClauseContext _localctx = new SourceClauseContext(Context, State);
		EnterRule(_localctx, 96, RULE_sourceClause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 564;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 563;
				Match(T__18);
				}
			}

			State = 566;
			aliasedQuerySource();
			State = 571;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 567;
					Match(T__14);
					State = 568;
					aliasedQuerySource();
					}
					} 
				}
				State = 573;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LetClauseItemContext[] letClauseItem() {
			return GetRuleContexts<LetClauseItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetClauseItemContext letClauseItem(int i) {
			return GetRuleContext<LetClauseItemContext>(i);
		}
		public LetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterLetClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitLetClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetClauseContext letClause() {
		LetClauseContext _localctx = new LetClauseContext(Context, State);
		EnterRule(_localctx, 98, RULE_letClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 574;
			Match(T__43);
			State = 575;
			letClauseItem();
			State = 580;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 576;
					Match(T__14);
					State = 577;
					letClauseItem();
					}
					} 
				}
				State = 582;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetClauseItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LetClauseItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letClauseItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterLetClauseItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitLetClauseItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetClauseItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetClauseItemContext letClauseItem() {
		LetClauseItemContext _localctx = new LetClauseItemContext(Context, State);
		EnterRule(_localctx, 100, RULE_letClauseItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583;
			identifier();
			State = 584;
			Match(T__10);
			State = 585;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 102, RULE_whereClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 587;
			Match(T__44);
			State = 588;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterReturnClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitReturnClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnClauseContext returnClause() {
		ReturnClauseContext _localctx = new ReturnClauseContext(Context, State);
		EnterRule(_localctx, 104, RULE_returnClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590;
			Match(T__45);
			State = 592;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 591;
				_la = TokenStream.LA(1);
				if ( !(_la==T__46 || _la==T__47) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 594;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StartingClauseContext startingClause() {
			return GetRuleContext<StartingClauseContext>(0);
		}
		public AggregateClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregateClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterAggregateClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitAggregateClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregateClauseContext aggregateClause() {
		AggregateClauseContext _localctx = new AggregateClauseContext(Context, State);
		EnterRule(_localctx, 106, RULE_aggregateClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			Match(T__48);
			State = 598;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__46 || _la==T__47) {
				{
				State = 597;
				_la = TokenStream.LA(1);
				if ( !(_la==T__46 || _la==T__47) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 600;
			identifier();
			State = 602;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__49) {
				{
				State = 601;
				startingClause();
				}
			}

			State = 604;
			Match(T__10);
			State = 605;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartingClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleLiteralContext simpleLiteral() {
			return GetRuleContext<SimpleLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuantityContext quantity() {
			return GetRuleContext<QuantityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StartingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startingClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterStartingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitStartingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartingClauseContext startingClause() {
		StartingClauseContext _localctx = new StartingClauseContext(Context, State);
		EnterRule(_localctx, 108, RULE_startingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			Match(T__49);
			State = 614;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 608;
				simpleLiteral();
				}
				break;
			case 2:
				{
				State = 609;
				quantity();
				}
				break;
			case 3:
				{
				{
				State = 610;
				Match(T__30);
				State = 611;
				expression(0);
				State = 612;
				Match(T__31);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SortDirectionContext sortDirection() {
			return GetRuleContext<SortDirectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortByItemContext[] sortByItem() {
			return GetRuleContexts<SortByItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortByItemContext sortByItem(int i) {
			return GetRuleContext<SortByItemContext>(i);
		}
		public SortClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterSortClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitSortClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSortClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SortClauseContext sortClause() {
		SortClauseContext _localctx = new SortClauseContext(Context, State);
		EnterRule(_localctx, 110, RULE_sortClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 616;
			Match(T__50);
			State = 627;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__52:
			case T__53:
			case T__54:
			case T__55:
				{
				State = 617;
				sortDirection();
				}
				break;
			case T__51:
				{
				{
				State = 618;
				Match(T__51);
				State = 619;
				sortByItem();
				State = 624;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 620;
						Match(T__14);
						State = 621;
						sortByItem();
						}
						} 
					}
					State = 626;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortDirectionContext : ParserRuleContext {
		public SortDirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortDirection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterSortDirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitSortDirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSortDirection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SortDirectionContext sortDirection() {
		SortDirectionContext _localctx = new SortDirectionContext(Context, State);
		EnterRule(_localctx, 112, RULE_sortDirection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 135107988821114880L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortByItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext expressionTerm() {
			return GetRuleContext<ExpressionTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortDirectionContext sortDirection() {
			return GetRuleContext<SortDirectionContext>(0);
		}
		public SortByItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortByItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterSortByItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitSortByItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSortByItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SortByItemContext sortByItem() {
		SortByItemContext _localctx = new SortByItemContext(Context, State);
		EnterRule(_localctx, 114, RULE_sortByItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			expressionTerm(0);
			State = 633;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 632;
				sortDirection();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext[] qualifier() {
			return GetRuleContexts<QualifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifierContext qualifier(int i) {
			return GetRuleContext<QualifierContext>(i);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterQualifiedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitQualifiedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentifierContext qualifiedIdentifier() {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(Context, State);
		EnterRule(_localctx, 116, RULE_qualifiedIdentifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 640;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 635;
					qualifier();
					State = 636;
					Match(T__16);
					}
					} 
				}
				State = 642;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			State = 643;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentifierExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferentialIdentifierContext referentialIdentifier() {
			return GetRuleContext<ReferentialIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifierExpressionContext[] qualifierExpression() {
			return GetRuleContexts<QualifierExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifierExpressionContext qualifierExpression(int i) {
			return GetRuleContext<QualifierExpressionContext>(i);
		}
		public QualifiedIdentifierExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdentifierExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterQualifiedIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitQualifiedIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentifierExpressionContext qualifiedIdentifierExpression() {
		QualifiedIdentifierExpressionContext _localctx = new QualifiedIdentifierExpressionContext(Context, State);
		EnterRule(_localctx, 118, RULE_qualifiedIdentifierExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 650;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 645;
					qualifierExpression();
					State = 646;
					Match(T__16);
					}
					} 
				}
				State = 652;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			State = 653;
			referentialIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifierExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferentialIdentifierContext referentialIdentifier() {
			return GetRuleContext<ReferentialIdentifierContext>(0);
		}
		public QualifierExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifierExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterQualifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitQualifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifierExpressionContext qualifierExpression() {
		QualifierExpressionContext _localctx = new QualifierExpressionContext(Context, State);
		EnterRule(_localctx, 120, RULE_qualifierExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 655;
			referentialIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimplePathContext : ParserRuleContext {
		public SimplePathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simplePath; } }
	 
		public SimplePathContext() { }
		public virtual void CopyFrom(SimplePathContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimplePathIndexerContext : SimplePathContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimplePathContext simplePath() {
			return GetRuleContext<SimplePathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleLiteralContext simpleLiteral() {
			return GetRuleContext<SimpleLiteralContext>(0);
		}
		public SimplePathIndexerContext(SimplePathContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterSimplePathIndexer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitSimplePathIndexer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimplePathIndexer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimplePathQualifiedIdentifierContext : SimplePathContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimplePathContext simplePath() {
			return GetRuleContext<SimplePathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferentialIdentifierContext referentialIdentifier() {
			return GetRuleContext<ReferentialIdentifierContext>(0);
		}
		public SimplePathQualifiedIdentifierContext(SimplePathContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterSimplePathQualifiedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitSimplePathQualifiedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimplePathQualifiedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimplePathReferentialIdentifierContext : SimplePathContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferentialIdentifierContext referentialIdentifier() {
			return GetRuleContext<ReferentialIdentifierContext>(0);
		}
		public SimplePathReferentialIdentifierContext(SimplePathContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterSimplePathReferentialIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitSimplePathReferentialIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimplePathReferentialIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimplePathContext simplePath() {
		return simplePath(0);
	}

	private SimplePathContext simplePath(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SimplePathContext _localctx = new SimplePathContext(Context, _parentState);
		SimplePathContext _prevctx = _localctx;
		int _startState = 122;
		EnterRecursionRule(_localctx, 122, RULE_simplePath, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SimplePathReferentialIdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 658;
			referentialIdentifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 670;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 668;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
					case 1:
						{
						_localctx = new SimplePathQualifiedIdentifierContext(new SimplePathContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_simplePath);
						State = 660;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 661;
						Match(T__16);
						State = 662;
						referentialIdentifier();
						}
						break;
					case 2:
						{
						_localctx = new SimplePathIndexerContext(new SimplePathContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_simplePath);
						State = 663;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 664;
						Match(T__37);
						State = 665;
						simpleLiteral();
						State = 666;
						Match(T__39);
						}
						break;
					}
					} 
				}
				State = 672;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleLiteralContext : ParserRuleContext {
		public SimpleLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleLiteral; } }
	 
		public SimpleLiteralContext() { }
		public virtual void CopyFrom(SimpleLiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleNumberLiteralContext : SimpleLiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(cqlParser.NUMBER, 0); }
		public SimpleNumberLiteralContext(SimpleLiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterSimpleNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitSimpleNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleStringLiteralContext : SimpleLiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(cqlParser.STRING, 0); }
		public SimpleStringLiteralContext(SimpleLiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterSimpleStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitSimpleStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleLiteralContext simpleLiteral() {
		SimpleLiteralContext _localctx = new SimpleLiteralContext(Context, State);
		EnterRule(_localctx, 124, RULE_simpleLiteral);
		try {
			State = 675;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				_localctx = new SimpleStringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 673;
				Match(STRING);
				}
				break;
			case NUMBER:
				_localctx = new SimpleNumberLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 674;
				Match(NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DurationBetweenExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PluralDateTimePrecisionContext pluralDateTimePrecision() {
			return GetRuleContext<PluralDateTimePrecisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext[] expressionTerm() {
			return GetRuleContexts<ExpressionTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext expressionTerm(int i) {
			return GetRuleContext<ExpressionTermContext>(i);
		}
		public DurationBetweenExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterDurationBetweenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitDurationBetweenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationBetweenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InFixSetExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InFixSetExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterInFixSetExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitInFixSetExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInFixSetExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RetrieveExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public RetrieveContext retrieve() {
			return GetRuleContext<RetrieveContext>(0);
		}
		public RetrieveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterRetrieveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitRetrieveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetrieveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimingExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalOperatorPhraseContext intervalOperatorPhrase() {
			return GetRuleContext<IntervalOperatorPhraseContext>(0);
		}
		public TimingExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterTimingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitTimingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QueryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public QueryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BetweenExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext[] expressionTerm() {
			return GetRuleContexts<ExpressionTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext expressionTerm(int i) {
			return GetRuleContext<ExpressionTermContext>(i);
		}
		public BetweenExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterBetweenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitBetweenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetweenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MembershipExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateTimePrecisionSpecifierContext dateTimePrecisionSpecifier() {
			return GetRuleContext<DateTimePrecisionSpecifierContext>(0);
		}
		public MembershipExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterMembershipExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitMembershipExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMembershipExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DifferenceBetweenExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PluralDateTimePrecisionContext pluralDateTimePrecision() {
			return GetRuleContext<PluralDateTimePrecisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext[] expressionTerm() {
			return GetRuleContexts<ExpressionTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext expressionTerm(int i) {
			return GetRuleContext<ExpressionTermContext>(i);
		}
		public DifferenceBetweenExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterDifferenceBetweenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitDifferenceBetweenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDifferenceBetweenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InequalityExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InequalityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterInequalityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitInequalityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInequalityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExistenceExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExistenceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterExistenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitExistenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExistenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImpliesExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ImpliesExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterImpliesExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitImpliesExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImpliesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext expressionTerm() {
			return GetRuleContext<ExpressionTermContext>(0);
		}
		public TermExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterTermExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitTermExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public TypeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterTypeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitTypeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 126;
		EnterRecursionRule(_localctx, 126, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 708;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				_localctx = new TermExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 678;
				expressionTerm(0);
				}
				break;
			case 2:
				{
				_localctx = new RetrieveExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 679;
				retrieve();
				}
				break;
			case 3:
				{
				_localctx = new QueryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 680;
				query();
				}
				break;
			case 4:
				{
				_localctx = new CastExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 681;
				Match(T__62);
				State = 682;
				expression(0);
				State = 683;
				Match(T__61);
				State = 684;
				typeSpecifier();
				}
				break;
			case 5:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 686;
				Match(T__57);
				State = 687;
				expression(13);
				}
				break;
			case 6:
				{
				_localctx = new ExistenceExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 688;
				Match(T__63);
				State = 689;
				expression(12);
				}
				break;
			case 7:
				{
				_localctx = new DurationBetweenExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 692;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__67) {
					{
					State = 690;
					Match(T__67);
					State = 691;
					Match(T__40);
					}
				}

				State = 694;
				pluralDateTimePrecision();
				State = 695;
				Match(T__65);
				State = 696;
				expressionTerm(0);
				State = 697;
				Match(T__66);
				State = 698;
				expressionTerm(0);
				}
				break;
			case 8:
				{
				_localctx = new DifferenceBetweenExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 700;
				Match(T__68);
				State = 701;
				Match(T__40);
				State = 702;
				pluralDateTimePrecision();
				State = 703;
				Match(T__65);
				State = 704;
				expressionTerm(0);
				State = 705;
				Match(T__66);
				State = 706;
				expressionTerm(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 758;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 756;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
					case 1:
						{
						_localctx = new InequalityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 710;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 711;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & 844424930131971L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 712;
						expression(9);
						}
						break;
					case 2:
						{
						_localctx = new TimingExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 713;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 714;
						intervalOperatorPhrase();
						State = 715;
						expression(8);
						}
						break;
					case 3:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 717;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 718;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & 3221225475L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 719;
						expression(7);
						}
						break;
					case 4:
						{
						_localctx = new MembershipExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 720;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 721;
						_la = TokenStream.LA(1);
						if ( !(_la==T__40 || _la==T__73) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 723;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
						case 1:
							{
							State = 722;
							dateTimePrecisionSpecifier();
							}
							break;
						}
						State = 725;
						expression(6);
						}
						break;
					case 5:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 726;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 727;
						Match(T__66);
						State = 728;
						expression(5);
						}
						break;
					case 6:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 729;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 730;
						_la = TokenStream.LA(1);
						if ( !(_la==T__74 || _la==T__75) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 731;
						expression(4);
						}
						break;
					case 7:
						{
						_localctx = new ImpliesExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 732;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 733;
						Match(T__76);
						State = 734;
						expression(3);
						}
						break;
					case 8:
						{
						_localctx = new InFixSetExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 735;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 736;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 15L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 737;
						expression(2);
						}
						break;
					case 9:
						{
						_localctx = new BooleanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 738;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 739;
						Match(T__56);
						State = 741;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__57) {
							{
							State = 740;
							Match(T__57);
							}
						}

						State = 743;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4035225266123964416L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 10:
						{
						_localctx = new TypeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 744;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 745;
						_la = TokenStream.LA(1);
						if ( !(_la==T__56 || _la==T__61) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 746;
						typeSpecifier();
						}
						break;
					case 11:
						{
						_localctx = new BetweenExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 747;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 749;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__64) {
							{
							State = 748;
							Match(T__64);
							}
						}

						State = 751;
						Match(T__65);
						State = 752;
						expressionTerm(0);
						State = 753;
						Match(T__66);
						State = 754;
						expressionTerm(0);
						}
						break;
					}
					} 
				}
				State = 760;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DateTimePrecisionContext : ParserRuleContext {
		public DateTimePrecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimePrecision; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterDateTimePrecision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitDateTimePrecision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimePrecision(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTimePrecisionContext dateTimePrecision() {
		DateTimePrecisionContext _localctx = new DateTimePrecisionContext(Context, State);
		EnterRule(_localctx, 128, RULE_dateTimePrecision);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & 255L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeComponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DateTimePrecisionContext dateTimePrecision() {
			return GetRuleContext<DateTimePrecisionContext>(0);
		}
		public DateTimeComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterDateTimeComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitDateTimeComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeComponentContext dateTimeComponent() {
		DateTimeComponentContext _localctx = new DateTimeComponentContext(Context, State);
		EnterRule(_localctx, 130, RULE_dateTimeComponent);
		try {
			State = 768;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__81:
			case T__82:
			case T__83:
			case T__84:
			case T__85:
			case T__86:
			case T__87:
			case T__88:
				EnterOuterAlt(_localctx, 1);
				{
				State = 763;
				dateTimePrecision();
				}
				break;
			case T__89:
				EnterOuterAlt(_localctx, 2);
				{
				State = 764;
				Match(T__89);
				}
				break;
			case T__90:
				EnterOuterAlt(_localctx, 3);
				{
				State = 765;
				Match(T__90);
				}
				break;
			case T__91:
				EnterOuterAlt(_localctx, 4);
				{
				State = 766;
				Match(T__91);
				}
				break;
			case T__92:
				EnterOuterAlt(_localctx, 5);
				{
				State = 767;
				Match(T__92);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PluralDateTimePrecisionContext : ParserRuleContext {
		public PluralDateTimePrecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pluralDateTimePrecision; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterPluralDateTimePrecision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitPluralDateTimePrecision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPluralDateTimePrecision(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PluralDateTimePrecisionContext pluralDateTimePrecision() {
		PluralDateTimePrecisionContext _localctx = new PluralDateTimePrecisionContext(Context, State);
		EnterRule(_localctx, 132, RULE_pluralDateTimePrecision);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 770;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & 255L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionTermContext : ParserRuleContext {
		public ExpressionTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionTerm; } }
	 
		public ExpressionTermContext() { }
		public virtual void CopyFrom(ExpressionTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AdditionExpressionTermContext : ExpressionTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext[] expressionTerm() {
			return GetRuleContexts<ExpressionTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext expressionTerm(int i) {
			return GetRuleContext<ExpressionTermContext>(i);
		}
		public AdditionExpressionTermContext(ExpressionTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterAdditionExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitAdditionExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexedExpressionTermContext : ExpressionTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext expressionTerm() {
			return GetRuleContext<ExpressionTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IndexedExpressionTermContext(ExpressionTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterIndexedExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitIndexedExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexedExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WidthExpressionTermContext : ExpressionTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext expressionTerm() {
			return GetRuleContext<ExpressionTermContext>(0);
		}
		public WidthExpressionTermContext(ExpressionTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterWidthExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitWidthExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetAggregateExpressionTermContext : ExpressionTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateTimePrecisionContext dateTimePrecision() {
			return GetRuleContext<DateTimePrecisionContext>(0);
		}
		public SetAggregateExpressionTermContext(ExpressionTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterSetAggregateExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitSetAggregateExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetAggregateExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimeUnitExpressionTermContext : ExpressionTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public DateTimeComponentContext dateTimeComponent() {
			return GetRuleContext<DateTimeComponentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext expressionTerm() {
			return GetRuleContext<ExpressionTermContext>(0);
		}
		public TimeUnitExpressionTermContext(ExpressionTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterTimeUnitExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitTimeUnitExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeUnitExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfThenElseExpressionTermContext : ExpressionTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfThenElseExpressionTermContext(ExpressionTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterIfThenElseExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitIfThenElseExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElseExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimeBoundaryExpressionTermContext : ExpressionTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext expressionTerm() {
			return GetRuleContext<ExpressionTermContext>(0);
		}
		public TimeBoundaryExpressionTermContext(ExpressionTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterTimeBoundaryExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitTimeBoundaryExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeBoundaryExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ElementExtractorExpressionTermContext : ExpressionTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext expressionTerm() {
			return GetRuleContext<ExpressionTermContext>(0);
		}
		public ElementExtractorExpressionTermContext(ExpressionTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterElementExtractorExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitElementExtractorExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementExtractorExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConversionExpressionTermContext : ExpressionTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext unit() {
			return GetRuleContext<UnitContext>(0);
		}
		public ConversionExpressionTermContext(ExpressionTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterConversionExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitConversionExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeExtentExpressionTermContext : ExpressionTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedTypeSpecifierContext namedTypeSpecifier() {
			return GetRuleContext<NamedTypeSpecifierContext>(0);
		}
		public TypeExtentExpressionTermContext(ExpressionTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterTypeExtentExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitTypeExtentExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeExtentExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredecessorExpressionTermContext : ExpressionTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext expressionTerm() {
			return GetRuleContext<ExpressionTermContext>(0);
		}
		public PredecessorExpressionTermContext(ExpressionTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterPredecessorExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitPredecessorExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredecessorExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointExtractorExpressionTermContext : ExpressionTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext expressionTerm() {
			return GetRuleContext<ExpressionTermContext>(0);
		}
		public PointExtractorExpressionTermContext(ExpressionTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterPointExtractorExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitPointExtractorExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointExtractorExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationExpressionTermContext : ExpressionTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext[] expressionTerm() {
			return GetRuleContexts<ExpressionTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext expressionTerm(int i) {
			return GetRuleContext<ExpressionTermContext>(i);
		}
		public MultiplicationExpressionTermContext(ExpressionTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AggregateExpressionTermContext : ExpressionTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AggregateExpressionTermContext(ExpressionTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterAggregateExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitAggregateExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DurationExpressionTermContext : ExpressionTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public PluralDateTimePrecisionContext pluralDateTimePrecision() {
			return GetRuleContext<PluralDateTimePrecisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext expressionTerm() {
			return GetRuleContext<ExpressionTermContext>(0);
		}
		public DurationExpressionTermContext(ExpressionTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterDurationExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitDurationExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDurationExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DifferenceExpressionTermContext : ExpressionTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public PluralDateTimePrecisionContext pluralDateTimePrecision() {
			return GetRuleContext<PluralDateTimePrecisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext expressionTerm() {
			return GetRuleContext<ExpressionTermContext>(0);
		}
		public DifferenceExpressionTermContext(ExpressionTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterDifferenceExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitDifferenceExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDifferenceExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseExpressionTermContext : ExpressionTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseExpressionItemContext[] caseExpressionItem() {
			return GetRuleContexts<CaseExpressionItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseExpressionItemContext caseExpressionItem(int i) {
			return GetRuleContext<CaseExpressionItemContext>(i);
		}
		public CaseExpressionTermContext(ExpressionTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterCaseExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitCaseExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerExpressionTermContext : ExpressionTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext[] expressionTerm() {
			return GetRuleContexts<ExpressionTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext expressionTerm(int i) {
			return GetRuleContext<ExpressionTermContext>(i);
		}
		public PowerExpressionTermContext(ExpressionTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterPowerExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitPowerExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SuccessorExpressionTermContext : ExpressionTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext expressionTerm() {
			return GetRuleContext<ExpressionTermContext>(0);
		}
		public SuccessorExpressionTermContext(ExpressionTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterSuccessorExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitSuccessorExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuccessorExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PolarityExpressionTermContext : ExpressionTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext expressionTerm() {
			return GetRuleContext<ExpressionTermContext>(0);
		}
		public PolarityExpressionTermContext(ExpressionTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterPolarityExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitPolarityExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPolarityExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermExpressionTermContext : ExpressionTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermExpressionTermContext(ExpressionTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterTermExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitTermExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InvocationExpressionTermContext : ExpressionTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTermContext expressionTerm() {
			return GetRuleContext<ExpressionTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedInvocationContext qualifiedInvocation() {
			return GetRuleContext<QualifiedInvocationContext>(0);
		}
		public InvocationExpressionTermContext(ExpressionTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterInvocationExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitInvocationExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocationExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionTermContext expressionTerm() {
		return expressionTerm(0);
	}

	private ExpressionTermContext expressionTerm(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionTermContext _localctx = new ExpressionTermContext(Context, _parentState);
		ExpressionTermContext _prevctx = _localctx;
		int _startState = 134;
		EnterRecursionRule(_localctx, 134, RULE_expressionTerm, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 850;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				_localctx = new TermExpressionTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 773;
				term();
				}
				break;
			case 2:
				{
				_localctx = new ConversionExpressionTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 774;
				Match(T__101);
				State = 775;
				expression(0);
				State = 776;
				Match(T__102);
				State = 779;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
				case T__1:
				case T__2:
				case T__3:
				case T__4:
				case T__5:
				case T__6:
				case T__7:
				case T__8:
				case T__9:
				case T__11:
				case T__12:
				case T__17:
				case T__19:
				case T__20:
				case T__23:
				case T__24:
				case T__25:
				case T__26:
				case T__27:
				case T__28:
				case T__29:
				case T__44:
				case T__49:
				case T__51:
				case T__52:
				case T__53:
				case T__54:
				case T__55:
				case T__73:
				case T__75:
				case T__76:
				case T__78:
				case T__79:
				case T__80:
				case T__89:
				case T__90:
				case T__91:
				case T__92:
				case T__105:
				case T__106:
				case T__108:
				case T__109:
				case T__110:
				case T__118:
				case T__119:
				case T__130:
				case T__131:
				case T__132:
				case T__133:
				case T__140:
				case T__141:
				case T__144:
				case T__148:
				case T__149:
				case T__153:
				case T__154:
				case T__155:
				case QUOTEDIDENTIFIER:
				case IDENTIFIER:
				case DELIMITEDIDENTIFIER:
					{
					State = 777;
					typeSpecifier();
					}
					break;
				case T__81:
				case T__82:
				case T__83:
				case T__84:
				case T__85:
				case T__86:
				case T__87:
				case T__88:
				case T__93:
				case T__94:
				case T__95:
				case T__96:
				case T__97:
				case T__98:
				case T__99:
				case T__100:
				case STRING:
					{
					State = 778;
					unit();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				_localctx = new PolarityExpressionTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 781;
				_la = TokenStream.LA(1);
				if ( !(_la==T__103 || _la==T__104) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 782;
				expressionTerm(18);
				}
				break;
			case 4:
				{
				_localctx = new TimeBoundaryExpressionTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 783;
				_la = TokenStream.LA(1);
				if ( !(_la==T__105 || _la==T__106) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 784;
				Match(T__107);
				State = 785;
				expressionTerm(17);
				}
				break;
			case 5:
				{
				_localctx = new TimeUnitExpressionTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 786;
				dateTimeComponent();
				State = 787;
				Match(T__18);
				State = 788;
				expressionTerm(16);
				}
				break;
			case 6:
				{
				_localctx = new DurationExpressionTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 790;
				Match(T__67);
				State = 791;
				Match(T__40);
				State = 792;
				pluralDateTimePrecision();
				State = 793;
				Match(T__107);
				State = 794;
				expressionTerm(15);
				}
				break;
			case 7:
				{
				_localctx = new DifferenceExpressionTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 796;
				Match(T__68);
				State = 797;
				Match(T__40);
				State = 798;
				pluralDateTimePrecision();
				State = 799;
				Match(T__107);
				State = 800;
				expressionTerm(14);
				}
				break;
			case 8:
				{
				_localctx = new WidthExpressionTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 802;
				Match(T__108);
				State = 803;
				Match(T__107);
				State = 804;
				expressionTerm(13);
				}
				break;
			case 9:
				{
				_localctx = new SuccessorExpressionTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 805;
				Match(T__109);
				State = 806;
				Match(T__107);
				State = 807;
				expressionTerm(12);
				}
				break;
			case 10:
				{
				_localctx = new PredecessorExpressionTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 808;
				Match(T__110);
				State = 809;
				Match(T__107);
				State = 810;
				expressionTerm(11);
				}
				break;
			case 11:
				{
				_localctx = new ElementExtractorExpressionTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 811;
				Match(T__111);
				State = 812;
				Match(T__18);
				State = 813;
				expressionTerm(10);
				}
				break;
			case 12:
				{
				_localctx = new PointExtractorExpressionTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 814;
				Match(T__112);
				State = 815;
				Match(T__18);
				State = 816;
				expressionTerm(9);
				}
				break;
			case 13:
				{
				_localctx = new TypeExtentExpressionTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 817;
				_la = TokenStream.LA(1);
				if ( !(_la==T__113 || _la==T__114) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 818;
				namedTypeSpecifier();
				}
				break;
			case 14:
				{
				_localctx = new IfThenElseExpressionTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 819;
				Match(T__121);
				State = 820;
				expression(0);
				State = 821;
				Match(T__122);
				State = 822;
				expression(0);
				State = 823;
				Match(T__123);
				State = 824;
				expression(0);
				}
				break;
			case 15:
				{
				_localctx = new CaseExpressionTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 826;
				Match(T__124);
				State = 828;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4758861967782021122L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1905040784319597519L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 549753872505L) != 0)) {
					{
					State = 827;
					expression(0);
					}
				}

				State = 831;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 830;
					caseExpressionItem();
					}
					}
					State = 833;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__129 );
				State = 835;
				Match(T__123);
				State = 836;
				expression(0);
				State = 837;
				Match(T__106);
				}
				break;
			case 16:
				{
				_localctx = new AggregateExpressionTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 839;
				_la = TokenStream.LA(1);
				if ( !(_la==T__47 || _la==T__125) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 840;
				expression(0);
				}
				break;
			case 17:
				{
				_localctx = new SetAggregateExpressionTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 841;
				_la = TokenStream.LA(1);
				if ( !(_la==T__126 || _la==T__127) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 842;
				expression(0);
				State = 848;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
				case 1:
					{
					State = 843;
					Match(T__128);
					State = 846;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
					case 1:
						{
						State = 844;
						dateTimePrecision();
						}
						break;
					case 2:
						{
						State = 845;
						expression(0);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 871;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 869;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
					case 1:
						{
						_localctx = new PowerExpressionTermContext(new ExpressionTermContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expressionTerm);
						State = 852;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 853;
						Match(T__115);
						State = 854;
						expressionTerm(8);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicationExpressionTermContext(new ExpressionTermContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expressionTerm);
						State = 855;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 856;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & 15L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 857;
						expressionTerm(7);
						}
						break;
					case 3:
						{
						_localctx = new AdditionExpressionTermContext(new ExpressionTermContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expressionTerm);
						State = 858;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 859;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & 131075L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 860;
						expressionTerm(6);
						}
						break;
					case 4:
						{
						_localctx = new InvocationExpressionTermContext(new ExpressionTermContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expressionTerm);
						State = 861;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 862;
						Match(T__16);
						State = 863;
						qualifiedInvocation();
						}
						break;
					case 5:
						{
						_localctx = new IndexedExpressionTermContext(new ExpressionTermContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expressionTerm);
						State = 864;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 865;
						Match(T__37);
						State = 866;
						expression(0);
						State = 867;
						Match(T__39);
						}
						break;
					}
					} 
				}
				State = 873;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CaseExpressionItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CaseExpressionItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseExpressionItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterCaseExpressionItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitCaseExpressionItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseExpressionItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseExpressionItemContext caseExpressionItem() {
		CaseExpressionItemContext _localctx = new CaseExpressionItemContext(Context, State);
		EnterRule(_localctx, 136, RULE_caseExpressionItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 874;
			Match(T__129);
			State = 875;
			expression(0);
			State = 876;
			Match(T__122);
			State = 877;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimePrecisionSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DateTimePrecisionContext dateTimePrecision() {
			return GetRuleContext<DateTimePrecisionContext>(0);
		}
		public DateTimePrecisionSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimePrecisionSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterDateTimePrecisionSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitDateTimePrecisionSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimePrecisionSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTimePrecisionSpecifierContext dateTimePrecisionSpecifier() {
		DateTimePrecisionSpecifierContext _localctx = new DateTimePrecisionSpecifierContext(Context, State);
		EnterRule(_localctx, 138, RULE_dateTimePrecisionSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 879;
			dateTimePrecision();
			State = 880;
			Match(T__107);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelativeQualifierContext : ParserRuleContext {
		public RelativeQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relativeQualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterRelativeQualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitRelativeQualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelativeQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelativeQualifierContext relativeQualifier() {
		RelativeQualifierContext _localctx = new RelativeQualifierContext(Context, State);
		EnterRule(_localctx, 140, RULE_relativeQualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 882;
			_la = TokenStream.LA(1);
			if ( !(_la==T__130 || _la==T__131) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OffsetRelativeQualifierContext : ParserRuleContext {
		public OffsetRelativeQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_offsetRelativeQualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterOffsetRelativeQualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitOffsetRelativeQualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOffsetRelativeQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OffsetRelativeQualifierContext offsetRelativeQualifier() {
		OffsetRelativeQualifierContext _localctx = new OffsetRelativeQualifierContext(Context, State);
		EnterRule(_localctx, 142, RULE_offsetRelativeQualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 884;
			_la = TokenStream.LA(1);
			if ( !(_la==T__132 || _la==T__133) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusiveRelativeQualifierContext : ParserRuleContext {
		public ExclusiveRelativeQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveRelativeQualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterExclusiveRelativeQualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitExclusiveRelativeQualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveRelativeQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveRelativeQualifierContext exclusiveRelativeQualifier() {
		ExclusiveRelativeQualifierContext _localctx = new ExclusiveRelativeQualifierContext(Context, State);
		EnterRule(_localctx, 144, RULE_exclusiveRelativeQualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 886;
			_la = TokenStream.LA(1);
			if ( !(_la==T__134 || _la==T__135) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuantityOffsetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QuantityContext quantity() {
			return GetRuleContext<QuantityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OffsetRelativeQualifierContext offsetRelativeQualifier() {
			return GetRuleContext<OffsetRelativeQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveRelativeQualifierContext exclusiveRelativeQualifier() {
			return GetRuleContext<ExclusiveRelativeQualifierContext>(0);
		}
		public QuantityOffsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quantityOffset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterQuantityOffset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitQuantityOffset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantityOffset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuantityOffsetContext quantityOffset() {
		QuantityOffsetContext _localctx = new QuantityOffsetContext(Context, State);
		EnterRule(_localctx, 146, RULE_quantityOffset);
		int _la;
		try {
			State = 895;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 888;
				quantity();
				State = 890;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__132 || _la==T__133) {
					{
					State = 889;
					offsetRelativeQualifier();
					}
				}

				}
				}
				break;
			case T__134:
			case T__135:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 892;
				exclusiveRelativeQualifier();
				State = 893;
				quantity();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemporalRelationshipContext : ParserRuleContext {
		public TemporalRelationshipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_temporalRelationship; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterTemporalRelationship(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitTemporalRelationship(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemporalRelationship(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemporalRelationshipContext temporalRelationship() {
		TemporalRelationshipContext _localctx = new TemporalRelationshipContext(Context, State);
		EnterRule(_localctx, 148, RULE_temporalRelationship);
		int _la;
		try {
			State = 905;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 898;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__136) {
					{
					State = 897;
					Match(T__136);
					}
				}

				State = 900;
				_la = TokenStream.LA(1);
				if ( !(_la==T__137 || _la==T__138) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 901;
				_la = TokenStream.LA(1);
				if ( !(_la==T__137 || _la==T__138) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 903;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__139) {
					{
					State = 902;
					Match(T__139);
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalOperatorPhraseContext : ParserRuleContext {
		public IntervalOperatorPhraseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalOperatorPhrase; } }
	 
		public IntervalOperatorPhraseContext() { }
		public virtual void CopyFrom(IntervalOperatorPhraseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WithinIntervalOperatorPhraseContext : IntervalOperatorPhraseContext {
		[System.Diagnostics.DebuggerNonUserCode] public QuantityContext quantity() {
			return GetRuleContext<QuantityContext>(0);
		}
		public WithinIntervalOperatorPhraseContext(IntervalOperatorPhraseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterWithinIntervalOperatorPhrase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitWithinIntervalOperatorPhrase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithinIntervalOperatorPhrase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncludedInIntervalOperatorPhraseContext : IntervalOperatorPhraseContext {
		[System.Diagnostics.DebuggerNonUserCode] public DateTimePrecisionSpecifierContext dateTimePrecisionSpecifier() {
			return GetRuleContext<DateTimePrecisionSpecifierContext>(0);
		}
		public IncludedInIntervalOperatorPhraseContext(IntervalOperatorPhraseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterIncludedInIntervalOperatorPhrase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitIncludedInIntervalOperatorPhrase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncludedInIntervalOperatorPhrase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EndsIntervalOperatorPhraseContext : IntervalOperatorPhraseContext {
		[System.Diagnostics.DebuggerNonUserCode] public DateTimePrecisionSpecifierContext dateTimePrecisionSpecifier() {
			return GetRuleContext<DateTimePrecisionSpecifierContext>(0);
		}
		public EndsIntervalOperatorPhraseContext(IntervalOperatorPhraseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterEndsIntervalOperatorPhrase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitEndsIntervalOperatorPhrase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndsIntervalOperatorPhrase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcurrentWithIntervalOperatorPhraseContext : IntervalOperatorPhraseContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelativeQualifierContext relativeQualifier() {
			return GetRuleContext<RelativeQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateTimePrecisionContext dateTimePrecision() {
			return GetRuleContext<DateTimePrecisionContext>(0);
		}
		public ConcurrentWithIntervalOperatorPhraseContext(IntervalOperatorPhraseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterConcurrentWithIntervalOperatorPhrase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitConcurrentWithIntervalOperatorPhrase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcurrentWithIntervalOperatorPhrase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OverlapsIntervalOperatorPhraseContext : IntervalOperatorPhraseContext {
		[System.Diagnostics.DebuggerNonUserCode] public DateTimePrecisionSpecifierContext dateTimePrecisionSpecifier() {
			return GetRuleContext<DateTimePrecisionSpecifierContext>(0);
		}
		public OverlapsIntervalOperatorPhraseContext(IntervalOperatorPhraseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterOverlapsIntervalOperatorPhrase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitOverlapsIntervalOperatorPhrase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverlapsIntervalOperatorPhrase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncludesIntervalOperatorPhraseContext : IntervalOperatorPhraseContext {
		[System.Diagnostics.DebuggerNonUserCode] public DateTimePrecisionSpecifierContext dateTimePrecisionSpecifier() {
			return GetRuleContext<DateTimePrecisionSpecifierContext>(0);
		}
		public IncludesIntervalOperatorPhraseContext(IntervalOperatorPhraseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterIncludesIntervalOperatorPhrase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitIncludesIntervalOperatorPhrase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncludesIntervalOperatorPhrase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BeforeOrAfterIntervalOperatorPhraseContext : IntervalOperatorPhraseContext {
		[System.Diagnostics.DebuggerNonUserCode] public TemporalRelationshipContext temporalRelationship() {
			return GetRuleContext<TemporalRelationshipContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuantityOffsetContext quantityOffset() {
			return GetRuleContext<QuantityOffsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateTimePrecisionSpecifierContext dateTimePrecisionSpecifier() {
			return GetRuleContext<DateTimePrecisionSpecifierContext>(0);
		}
		public BeforeOrAfterIntervalOperatorPhraseContext(IntervalOperatorPhraseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterBeforeOrAfterIntervalOperatorPhrase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitBeforeOrAfterIntervalOperatorPhrase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeforeOrAfterIntervalOperatorPhrase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MeetsIntervalOperatorPhraseContext : IntervalOperatorPhraseContext {
		[System.Diagnostics.DebuggerNonUserCode] public DateTimePrecisionSpecifierContext dateTimePrecisionSpecifier() {
			return GetRuleContext<DateTimePrecisionSpecifierContext>(0);
		}
		public MeetsIntervalOperatorPhraseContext(IntervalOperatorPhraseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterMeetsIntervalOperatorPhrase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitMeetsIntervalOperatorPhrase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeetsIntervalOperatorPhrase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StartsIntervalOperatorPhraseContext : IntervalOperatorPhraseContext {
		[System.Diagnostics.DebuggerNonUserCode] public DateTimePrecisionSpecifierContext dateTimePrecisionSpecifier() {
			return GetRuleContext<DateTimePrecisionSpecifierContext>(0);
		}
		public StartsIntervalOperatorPhraseContext(IntervalOperatorPhraseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterStartsIntervalOperatorPhrase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitStartsIntervalOperatorPhrase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartsIntervalOperatorPhrase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalOperatorPhraseContext intervalOperatorPhrase() {
		IntervalOperatorPhraseContext _localctx = new IntervalOperatorPhraseContext(Context, State);
		EnterRule(_localctx, 150, RULE_intervalOperatorPhrase);
		int _la;
		try {
			State = 988;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				_localctx = new ConcurrentWithIntervalOperatorPhraseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 908;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & 7L) != 0)) {
					{
					State = 907;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & 7L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 910;
				Match(T__143);
				State = 912;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & 255L) != 0)) {
					{
					State = 911;
					dateTimePrecision();
					}
				}

				State = 916;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__130:
				case T__131:
					{
					State = 914;
					relativeQualifier();
					}
					break;
				case T__61:
					{
					State = 915;
					Match(T__61);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 919;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
				case 1:
					{
					State = 918;
					_la = TokenStream.LA(1);
					if ( !(_la==T__105 || _la==T__106) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new IncludesIntervalOperatorPhraseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 922;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__64) {
					{
					State = 921;
					Match(T__64);
					}
				}

				State = 924;
				Match(T__144);
				State = 926;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
				case 1:
					{
					State = 925;
					dateTimePrecisionSpecifier();
					}
					break;
				}
				State = 929;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
				case 1:
					{
					State = 928;
					_la = TokenStream.LA(1);
					if ( !(_la==T__105 || _la==T__106) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new IncludedInIntervalOperatorPhraseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 932;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & 7L) != 0)) {
					{
					State = 931;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & 7L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 935;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__64) {
					{
					State = 934;
					Match(T__64);
					}
				}

				State = 937;
				_la = TokenStream.LA(1);
				if ( !(_la==T__145 || _la==T__146) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 939;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
				case 1:
					{
					State = 938;
					dateTimePrecisionSpecifier();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new BeforeOrAfterIntervalOperatorPhraseContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 942;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & 7L) != 0)) {
					{
					State = 941;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & 7L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 945;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & 2147483651L) != 0)) {
					{
					State = 944;
					quantityOffset();
					}
				}

				State = 947;
				temporalRelationship();
				State = 949;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
				case 1:
					{
					State = 948;
					dateTimePrecisionSpecifier();
					}
					break;
				}
				State = 952;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
				case 1:
					{
					State = 951;
					_la = TokenStream.LA(1);
					if ( !(_la==T__105 || _la==T__106) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new WithinIntervalOperatorPhraseContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 955;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & 7L) != 0)) {
					{
					State = 954;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & 7L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 958;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__64) {
					{
					State = 957;
					Match(T__64);
					}
				}

				State = 960;
				Match(T__147);
				State = 961;
				quantity();
				State = 962;
				Match(T__107);
				State = 964;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
				case 1:
					{
					State = 963;
					_la = TokenStream.LA(1);
					if ( !(_la==T__105 || _la==T__106) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 6:
				_localctx = new MeetsIntervalOperatorPhraseContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 966;
				Match(T__148);
				State = 968;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__137 || _la==T__138) {
					{
					State = 967;
					_la = TokenStream.LA(1);
					if ( !(_la==T__137 || _la==T__138) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 971;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
				case 1:
					{
					State = 970;
					dateTimePrecisionSpecifier();
					}
					break;
				}
				}
				break;
			case 7:
				_localctx = new OverlapsIntervalOperatorPhraseContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 973;
				Match(T__149);
				State = 975;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__137 || _la==T__138) {
					{
					State = 974;
					_la = TokenStream.LA(1);
					if ( !(_la==T__137 || _la==T__138) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 978;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
				case 1:
					{
					State = 977;
					dateTimePrecisionSpecifier();
					}
					break;
				}
				}
				break;
			case 8:
				_localctx = new StartsIntervalOperatorPhraseContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 980;
				Match(T__140);
				State = 982;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
				case 1:
					{
					State = 981;
					dateTimePrecisionSpecifier();
					}
					break;
				}
				}
				break;
			case 9:
				_localctx = new EndsIntervalOperatorPhraseContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 984;
				Match(T__141);
				State = 986;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
				case 1:
					{
					State = 985;
					dateTimePrecisionSpecifier();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExternalConstantTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExternalConstantContext externalConstant() {
			return GetRuleContext<ExternalConstantContext>(0);
		}
		public ExternalConstantTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterExternalConstantTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitExternalConstantTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalConstantTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleSelectorTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleSelectorContext tupleSelector() {
			return GetRuleContext<TupleSelectorContext>(0);
		}
		public TupleSelectorTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterTupleSelectorTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitTupleSelectorTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleSelectorTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterLiteralTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitLiteralTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConceptSelectorTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConceptSelectorContext conceptSelector() {
			return GetRuleContext<ConceptSelectorContext>(0);
		}
		public ConceptSelectorTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterConceptSelectorTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitConceptSelectorTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConceptSelectorTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterParenthesizedTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitParenthesizedTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CodeSelectorTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public CodeSelectorContext codeSelector() {
			return GetRuleContext<CodeSelectorContext>(0);
		}
		public CodeSelectorTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterCodeSelectorTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitCodeSelectorTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeSelectorTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InvocationTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		public InvocationTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterInvocationTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitInvocationTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocationTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstanceSelectorTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstanceSelectorContext instanceSelector() {
			return GetRuleContext<InstanceSelectorContext>(0);
		}
		public InstanceSelectorTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterInstanceSelectorTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitInstanceSelectorTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceSelectorTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntervalSelectorTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntervalSelectorContext intervalSelector() {
			return GetRuleContext<IntervalSelectorContext>(0);
		}
		public IntervalSelectorTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterIntervalSelectorTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitIntervalSelectorTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalSelectorTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListSelectorTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListSelectorContext listSelector() {
			return GetRuleContext<ListSelectorContext>(0);
		}
		public ListSelectorTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterListSelectorTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitListSelectorTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListSelectorTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 152, RULE_term);
		try {
			State = 1003;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				_localctx = new InvocationTermContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 990;
				invocation();
				}
				break;
			case 2:
				_localctx = new LiteralTermContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 991;
				literal();
				}
				break;
			case 3:
				_localctx = new ExternalConstantTermContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 992;
				externalConstant();
				}
				break;
			case 4:
				_localctx = new IntervalSelectorTermContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 993;
				intervalSelector();
				}
				break;
			case 5:
				_localctx = new TupleSelectorTermContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 994;
				tupleSelector();
				}
				break;
			case 6:
				_localctx = new InstanceSelectorTermContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 995;
				instanceSelector();
				}
				break;
			case 7:
				_localctx = new ListSelectorTermContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 996;
				listSelector();
				}
				break;
			case 8:
				_localctx = new CodeSelectorTermContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 997;
				codeSelector();
				}
				break;
			case 9:
				_localctx = new ConceptSelectorTermContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 998;
				conceptSelector();
				}
				break;
			case 10:
				_localctx = new ParenthesizedTermContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 999;
				Match(T__30);
				State = 1000;
				expression(0);
				State = 1001;
				Match(T__31);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedInvocationContext : ParserRuleContext {
		public QualifiedInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedInvocation; } }
	 
		public QualifiedInvocationContext() { }
		public virtual void CopyFrom(QualifiedInvocationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class QualifiedFunctionInvocationContext : QualifiedInvocationContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedFunctionContext qualifiedFunction() {
			return GetRuleContext<QualifiedFunctionContext>(0);
		}
		public QualifiedFunctionInvocationContext(QualifiedInvocationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterQualifiedFunctionInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitQualifiedFunctionInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedFunctionInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QualifiedMemberInvocationContext : QualifiedInvocationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferentialIdentifierContext referentialIdentifier() {
			return GetRuleContext<ReferentialIdentifierContext>(0);
		}
		public QualifiedMemberInvocationContext(QualifiedInvocationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterQualifiedMemberInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitQualifiedMemberInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedMemberInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedInvocationContext qualifiedInvocation() {
		QualifiedInvocationContext _localctx = new QualifiedInvocationContext(Context, State);
		EnterRule(_localctx, 154, RULE_qualifiedInvocation);
		try {
			State = 1007;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				_localctx = new QualifiedMemberInvocationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1005;
				referentialIdentifier();
				}
				break;
			case 2:
				_localctx = new QualifiedFunctionInvocationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1006;
				qualifiedFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierOrFunctionIdentifierContext identifierOrFunctionIdentifier() {
			return GetRuleContext<IdentifierOrFunctionIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public QualifiedFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterQualifiedFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitQualifiedFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedFunctionContext qualifiedFunction() {
		QualifiedFunctionContext _localctx = new QualifiedFunctionContext(Context, State);
		EnterRule(_localctx, 156, RULE_qualifiedFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1009;
			identifierOrFunctionIdentifier();
			State = 1010;
			Match(T__30);
			State = 1012;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4758861967782021122L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1905040784319597519L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 549753872505L) != 0)) {
				{
				State = 1011;
				paramList();
				}
			}

			State = 1014;
			Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvocationContext : ParserRuleContext {
		public InvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocation; } }
	 
		public InvocationContext() { }
		public virtual void CopyFrom(InvocationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TotalInvocationContext : InvocationContext {
		public TotalInvocationContext(InvocationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterTotalInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitTotalInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTotalInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisInvocationContext : InvocationContext {
		public ThisInvocationContext(InvocationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterThisInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitThisInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexInvocationContext : InvocationContext {
		public IndexInvocationContext(InvocationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterIndexInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitIndexInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionInvocationContext : InvocationContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public FunctionInvocationContext(InvocationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterFunctionInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitFunctionInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberInvocationContext : InvocationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferentialIdentifierContext referentialIdentifier() {
			return GetRuleContext<ReferentialIdentifierContext>(0);
		}
		public MemberInvocationContext(InvocationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterMemberInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitMemberInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvocationContext invocation() {
		InvocationContext _localctx = new InvocationContext(Context, State);
		EnterRule(_localctx, 158, RULE_invocation);
		try {
			State = 1021;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
			case 1:
				_localctx = new MemberInvocationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1016;
				referentialIdentifier();
				}
				break;
			case 2:
				_localctx = new FunctionInvocationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1017;
				function();
				}
				break;
			case 3:
				_localctx = new ThisInvocationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1018;
				Match(T__150);
				}
				break;
			case 4:
				_localctx = new IndexInvocationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1019;
				Match(T__151);
				}
				break;
			case 5:
				_localctx = new TotalInvocationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1020;
				Match(T__152);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferentialIdentifierContext referentialIdentifier() {
			return GetRuleContext<ReferentialIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 160, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1023;
			referentialIdentifier();
			State = 1024;
			Match(T__30);
			State = 1026;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4758861967782021122L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1905040784319597519L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 549753872505L) != 0)) {
				{
				State = 1025;
				paramList();
				}
			}

			State = 1028;
			Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RatioContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QuantityContext[] quantity() {
			return GetRuleContexts<QuantityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuantityContext quantity(int i) {
			return GetRuleContext<QuantityContext>(i);
		}
		public RatioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ratio; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterRatio(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitRatio(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRatio(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RatioContext ratio() {
		RatioContext _localctx = new RatioContext(Context, State);
		EnterRule(_localctx, 162, RULE_ratio);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1030;
			quantity();
			State = 1031;
			Match(T__10);
			State = 1032;
			quantity();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TimeLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(cqlParser.TIME, 0); }
		public TimeLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterTimeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitTimeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLiteralContext : LiteralContext {
		public NullLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RatioLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public RatioContext ratio() {
			return GetRuleContext<RatioContext>(0);
		}
		public RatioLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterRatioLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitRatioLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRatioLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateTimeLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(cqlParser.DATETIME, 0); }
		public DateTimeLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterDateTimeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitDateTimeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(cqlParser.STRING, 0); }
		public StringLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(cqlParser.DATE, 0); }
		public DateLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterDateLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitDateLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralContext : LiteralContext {
		public BooleanLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(cqlParser.NUMBER, 0); }
		public NumberLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LongNumberLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGNUMBER() { return GetToken(cqlParser.LONGNUMBER, 0); }
		public LongNumberLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterLongNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitLongNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QuantityLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public QuantityContext quantity() {
			return GetRuleContext<QuantityContext>(0);
		}
		public QuantityLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterQuantityLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitQuantityLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantityLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 164, RULE_literal);
		int _la;
		try {
			State = 1044;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				_localctx = new BooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1034;
				_la = TokenStream.LA(1);
				if ( !(_la==T__59 || _la==T__60) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				_localctx = new NullLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1035;
				Match(T__58);
				}
				break;
			case 3:
				_localctx = new StringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1036;
				Match(STRING);
				}
				break;
			case 4:
				_localctx = new NumberLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1037;
				Match(NUMBER);
				}
				break;
			case 5:
				_localctx = new LongNumberLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1038;
				Match(LONGNUMBER);
				}
				break;
			case 6:
				_localctx = new DateTimeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1039;
				Match(DATETIME);
				}
				break;
			case 7:
				_localctx = new DateLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1040;
				Match(DATE);
				}
				break;
			case 8:
				_localctx = new TimeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1041;
				Match(TIME);
				}
				break;
			case 9:
				_localctx = new QuantityLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1042;
				quantity();
				}
				break;
			case 10:
				_localctx = new RatioLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1043;
				ratio();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IntervalSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterIntervalSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitIntervalSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalSelectorContext intervalSelector() {
		IntervalSelectorContext _localctx = new IntervalSelectorContext(Context, State);
		EnterRule(_localctx, 166, RULE_intervalSelector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1046;
			Match(T__23);
			State = 1047;
			_la = TokenStream.LA(1);
			if ( !(_la==T__30 || _la==T__37) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1048;
			expression(0);
			State = 1049;
			Match(T__14);
			State = 1050;
			expression(0);
			State = 1051;
			_la = TokenStream.LA(1);
			if ( !(_la==T__31 || _la==T__39) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleElementSelectorContext[] tupleElementSelector() {
			return GetRuleContexts<TupleElementSelectorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleElementSelectorContext tupleElementSelector(int i) {
			return GetRuleContext<TupleElementSelectorContext>(i);
		}
		public TupleSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterTupleSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitTupleSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleSelectorContext tupleSelector() {
		TupleSelectorContext _localctx = new TupleSelectorContext(Context, State);
		EnterRule(_localctx, 168, RULE_tupleSelector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1054;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__24) {
				{
				State = 1053;
				Match(T__24);
				}
			}

			State = 1056;
			Match(T__13);
			State = 1066;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				{
				State = 1057;
				Match(T__10);
				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__11:
			case T__12:
			case T__17:
			case T__19:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__44:
			case T__49:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__73:
			case T__75:
			case T__76:
			case T__78:
			case T__79:
			case T__80:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__105:
			case T__106:
			case T__108:
			case T__109:
			case T__110:
			case T__118:
			case T__119:
			case T__130:
			case T__131:
			case T__132:
			case T__133:
			case T__140:
			case T__141:
			case T__144:
			case T__148:
			case T__149:
			case T__153:
			case QUOTEDIDENTIFIER:
			case IDENTIFIER:
			case DELIMITEDIDENTIFIER:
				{
				{
				State = 1058;
				tupleElementSelector();
				State = 1063;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 1059;
					Match(T__14);
					State = 1060;
					tupleElementSelector();
					}
					}
					State = 1065;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1068;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleElementSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferentialIdentifierContext referentialIdentifier() {
			return GetRuleContext<ReferentialIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TupleElementSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleElementSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterTupleElementSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitTupleElementSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleElementSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleElementSelectorContext tupleElementSelector() {
		TupleElementSelectorContext _localctx = new TupleElementSelectorContext(Context, State);
		EnterRule(_localctx, 170, RULE_tupleElementSelector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1070;
			referentialIdentifier();
			State = 1071;
			Match(T__10);
			State = 1072;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedTypeSpecifierContext namedTypeSpecifier() {
			return GetRuleContext<NamedTypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstanceElementSelectorContext[] instanceElementSelector() {
			return GetRuleContexts<InstanceElementSelectorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstanceElementSelectorContext instanceElementSelector(int i) {
			return GetRuleContext<InstanceElementSelectorContext>(i);
		}
		public InstanceSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterInstanceSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitInstanceSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstanceSelectorContext instanceSelector() {
		InstanceSelectorContext _localctx = new InstanceSelectorContext(Context, State);
		EnterRule(_localctx, 172, RULE_instanceSelector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1074;
			namedTypeSpecifier();
			State = 1075;
			Match(T__13);
			State = 1085;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				{
				State = 1076;
				Match(T__10);
				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__11:
			case T__12:
			case T__17:
			case T__19:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__44:
			case T__49:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__73:
			case T__75:
			case T__76:
			case T__78:
			case T__79:
			case T__80:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__105:
			case T__106:
			case T__108:
			case T__109:
			case T__110:
			case T__118:
			case T__119:
			case T__130:
			case T__131:
			case T__132:
			case T__133:
			case T__140:
			case T__141:
			case T__144:
			case T__148:
			case T__149:
			case T__153:
			case QUOTEDIDENTIFIER:
			case IDENTIFIER:
			case DELIMITEDIDENTIFIER:
				{
				{
				State = 1077;
				instanceElementSelector();
				State = 1082;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 1078;
					Match(T__14);
					State = 1079;
					instanceElementSelector();
					}
					}
					State = 1084;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1087;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceElementSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferentialIdentifierContext referentialIdentifier() {
			return GetRuleContext<ReferentialIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InstanceElementSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceElementSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterInstanceElementSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitInstanceElementSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceElementSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstanceElementSelectorContext instanceElementSelector() {
		InstanceElementSelectorContext _localctx = new InstanceElementSelectorContext(Context, State);
		EnterRule(_localctx, 174, RULE_instanceElementSelector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1089;
			referentialIdentifier();
			State = 1090;
			Match(T__10);
			State = 1091;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ListSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterListSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitListSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListSelectorContext listSelector() {
		ListSelectorContext _localctx = new ListSelectorContext(Context, State);
		EnterRule(_localctx, 176, RULE_listSelector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 1093;
				Match(T__20);
				State = 1098;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__21) {
					{
					State = 1094;
					Match(T__21);
					State = 1095;
					typeSpecifier();
					State = 1096;
					Match(T__22);
					}
				}

				}
			}

			State = 1102;
			Match(T__13);
			State = 1111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4758861967782021122L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1905040784319597519L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 549753872505L) != 0)) {
				{
				State = 1103;
				expression(0);
				State = 1108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 1104;
					Match(T__14);
					State = 1105;
					expression(0);
					}
					}
					State = 1110;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1113;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisplayClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(cqlParser.STRING, 0); }
		public DisplayClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_displayClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterDisplayClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitDisplayClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplayClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisplayClauseContext displayClause() {
		DisplayClauseContext _localctx = new DisplayClauseContext(Context, State);
		EnterRule(_localctx, 178, RULE_displayClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1115;
			Match(T__153);
			State = 1116;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(cqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodesystemIdentifierContext codesystemIdentifier() {
			return GetRuleContext<CodesystemIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DisplayClauseContext displayClause() {
			return GetRuleContext<DisplayClauseContext>(0);
		}
		public CodeSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterCodeSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitCodeSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeSelectorContext codeSelector() {
		CodeSelectorContext _localctx = new CodeSelectorContext(Context, State);
		EnterRule(_localctx, 180, RULE_codeSelector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1118;
			Match(T__154);
			State = 1119;
			Match(STRING);
			State = 1120;
			Match(T__18);
			State = 1121;
			codesystemIdentifier();
			State = 1123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				{
				State = 1122;
				displayClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConceptSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CodeSelectorContext[] codeSelector() {
			return GetRuleContexts<CodeSelectorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeSelectorContext codeSelector(int i) {
			return GetRuleContext<CodeSelectorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DisplayClauseContext displayClause() {
			return GetRuleContext<DisplayClauseContext>(0);
		}
		public ConceptSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conceptSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterConceptSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitConceptSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConceptSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConceptSelectorContext conceptSelector() {
		ConceptSelectorContext _localctx = new ConceptSelectorContext(Context, State);
		EnterRule(_localctx, 182, RULE_conceptSelector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1125;
			Match(T__155);
			State = 1126;
			Match(T__13);
			State = 1127;
			codeSelector();
			State = 1132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 1128;
				Match(T__14);
				State = 1129;
				codeSelector();
				}
				}
				State = 1134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1135;
			Match(T__15);
			State = 1137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
			case 1:
				{
				State = 1136;
				displayClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 184, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1139;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -15150577076226L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -175643684002350017L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 478150271L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedWordContext : ParserRuleContext {
		public ReservedWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterReservedWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitReservedWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReservedWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedWordContext reservedWord() {
		ReservedWordContext _localctx = new ReservedWordContext(Context, State);
		EnterRule(_localctx, 186, RULE_reservedWord);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1141;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -140787825319084032L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -283989560810272705L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 404594183L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordIdentifierContext : ParserRuleContext {
		public KeywordIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterKeywordIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitKeywordIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeywordIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordIdentifierContext keywordIdentifier() {
		KeywordIdentifierContext _localctx = new KeywordIdentifierContext(Context, State);
		EnterRule(_localctx, 188, RULE_keywordIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1143;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 140772674742007806L) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 2161833627658158317L) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & 8979L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObsoleteIdentifierContext : ParserRuleContext {
		public ObsoleteIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obsoleteIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterObsoleteIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitObsoleteIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObsoleteIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObsoleteIdentifierContext obsoleteIdentifier() {
		ObsoleteIdentifierContext _localctx = new ObsoleteIdentifierContext(Context, State);
		EnterRule(_localctx, 190, RULE_obsoleteIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1145;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 288687772990177284L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 13195146167297L) != 0) || ((((_la - 154)) & ~0x3f) == 0 && ((1L << (_la - 154)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionIdentifierContext : ParserRuleContext {
		public FunctionIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterFunctionIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitFunctionIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionIdentifierContext functionIdentifier() {
		FunctionIdentifierContext _localctx = new FunctionIdentifierContext(Context, State);
		EnterRule(_localctx, 192, RULE_functionIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1147;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -15150577076226L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -175643684002350017L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 478145663L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameIdentifierContext : ParserRuleContext {
		public TypeNameIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeNameIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterTypeNameIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitTypeNameIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeNameIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameIdentifierContext typeNameIdentifier() {
		TypeNameIdentifierContext _localctx = new TypeNameIdentifierContext(Context, State);
		EnterRule(_localctx, 194, RULE_typeNameIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1149;
			_la = TokenStream.LA(1);
			if ( !(_la==T__89 || _la==T__90 || _la==T__154 || _la==T__155) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferentialIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordIdentifierContext keywordIdentifier() {
			return GetRuleContext<KeywordIdentifierContext>(0);
		}
		public ReferentialIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referentialIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterReferentialIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitReferentialIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferentialIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferentialIdentifierContext referentialIdentifier() {
		ReferentialIdentifierContext _localctx = new ReferentialIdentifierContext(Context, State);
		EnterRule(_localctx, 196, RULE_referentialIdentifier);
		try {
			State = 1153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QUOTEDIDENTIFIER:
			case IDENTIFIER:
			case DELIMITEDIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1151;
				identifier();
				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__11:
			case T__12:
			case T__17:
			case T__19:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__44:
			case T__49:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__73:
			case T__75:
			case T__76:
			case T__78:
			case T__79:
			case T__80:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__105:
			case T__106:
			case T__108:
			case T__109:
			case T__110:
			case T__118:
			case T__119:
			case T__130:
			case T__131:
			case T__132:
			case T__133:
			case T__140:
			case T__141:
			case T__144:
			case T__148:
			case T__149:
			case T__153:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1152;
				keywordIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferentialOrTypeNameIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferentialIdentifierContext referentialIdentifier() {
			return GetRuleContext<ReferentialIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameIdentifierContext typeNameIdentifier() {
			return GetRuleContext<TypeNameIdentifierContext>(0);
		}
		public ReferentialOrTypeNameIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referentialOrTypeNameIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterReferentialOrTypeNameIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitReferentialOrTypeNameIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferentialOrTypeNameIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferentialOrTypeNameIdentifierContext referentialOrTypeNameIdentifier() {
		ReferentialOrTypeNameIdentifierContext _localctx = new ReferentialOrTypeNameIdentifierContext(Context, State);
		EnterRule(_localctx, 198, RULE_referentialOrTypeNameIdentifier);
		try {
			State = 1157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1155;
				referentialIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1156;
				typeNameIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierOrFunctionIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionIdentifierContext functionIdentifier() {
			return GetRuleContext<FunctionIdentifierContext>(0);
		}
		public IdentifierOrFunctionIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierOrFunctionIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterIdentifierOrFunctionIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitIdentifierOrFunctionIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierOrFunctionIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierOrFunctionIdentifierContext identifierOrFunctionIdentifier() {
		IdentifierOrFunctionIdentifierContext _localctx = new IdentifierOrFunctionIdentifierContext(Context, State);
		EnterRule(_localctx, 200, RULE_identifierOrFunctionIdentifier);
		try {
			State = 1161;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QUOTEDIDENTIFIER:
			case IDENTIFIER:
			case DELIMITEDIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1159;
				identifier();
				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__11:
			case T__12:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__23:
			case T__24:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__34:
			case T__35:
			case T__36:
			case T__40:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__78:
			case T__79:
			case T__80:
			case T__81:
			case T__82:
			case T__83:
			case T__84:
			case T__85:
			case T__86:
			case T__87:
			case T__88:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__93:
			case T__94:
			case T__95:
			case T__96:
			case T__97:
			case T__98:
			case T__99:
			case T__100:
			case T__101:
			case T__102:
			case T__105:
			case T__106:
			case T__107:
			case T__108:
			case T__109:
			case T__110:
			case T__111:
			case T__112:
			case T__113:
			case T__114:
			case T__118:
			case T__119:
			case T__121:
			case T__122:
			case T__123:
			case T__124:
			case T__125:
			case T__126:
			case T__127:
			case T__128:
			case T__129:
			case T__130:
			case T__131:
			case T__132:
			case T__133:
			case T__137:
			case T__138:
			case T__140:
			case T__141:
			case T__142:
			case T__143:
			case T__144:
			case T__145:
			case T__146:
			case T__147:
			case T__148:
			case T__149:
			case T__153:
			case T__154:
			case T__155:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1160;
				functionIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(cqlParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITEDIDENTIFIER() { return GetToken(cqlParser.DELIMITEDIDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTEDIDENTIFIER() { return GetToken(cqlParser.QUOTEDIDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 202, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1163;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & 97L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(cqlParser.STRING, 0); }
		public ExternalConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterExternalConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitExternalConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalConstantContext externalConstant() {
		ExternalConstantContext _localctx = new ExternalConstantContext(Context, State);
		EnterRule(_localctx, 204, RULE_externalConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1165;
			Match(T__156);
			State = 1168;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QUOTEDIDENTIFIER:
			case IDENTIFIER:
			case DELIMITEDIDENTIFIER:
				{
				State = 1166;
				identifier();
				}
				break;
			case STRING:
				{
				State = 1167;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 206, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1170;
			expression(0);
			State = 1175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 1171;
				Match(T__14);
				State = 1172;
				expression(0);
				}
				}
				State = 1177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuantityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(cqlParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext unit() {
			return GetRuleContext<UnitContext>(0);
		}
		public QuantityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quantity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterQuantity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitQuantity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuantityContext quantity() {
		QuantityContext _localctx = new QuantityContext(Context, State);
		EnterRule(_localctx, 208, RULE_quantity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1178;
			Match(NUMBER);
			State = 1180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				{
				State = 1179;
				unit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DateTimePrecisionContext dateTimePrecision() {
			return GetRuleContext<DateTimePrecisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PluralDateTimePrecisionContext pluralDateTimePrecision() {
			return GetRuleContext<PluralDateTimePrecisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(cqlParser.STRING, 0); }
		public UnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.EnterUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcqlListener typedListener = listener as IcqlListener;
			if (typedListener != null) typedListener.ExitUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcqlVisitor<TResult> typedVisitor = visitor as IcqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnitContext unit() {
		UnitContext _localctx = new UnitContext(Context, State);
		EnterRule(_localctx, 210, RULE_unit);
		try {
			State = 1185;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__81:
			case T__82:
			case T__83:
			case T__84:
			case T__85:
			case T__86:
			case T__87:
			case T__88:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1182;
				dateTimePrecision();
				}
				break;
			case T__93:
			case T__94:
			case T__95:
			case T__96:
			case T__97:
			case T__98:
			case T__99:
			case T__100:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1183;
				pluralDateTimePrecision();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1184;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 61: return simplePath_sempred((SimplePathContext)_localctx, predIndex);
		case 63: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 67: return expressionTerm_sempred((ExpressionTermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool simplePath_sempred(SimplePathContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 6);
		case 5: return Precpred(Context, 5);
		case 6: return Precpred(Context, 4);
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 2);
		case 9: return Precpred(Context, 1);
		case 10: return Precpred(Context, 16);
		case 11: return Precpred(Context, 15);
		case 12: return Precpred(Context, 11);
		}
		return true;
	}
	private bool expressionTerm_sempred(ExpressionTermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 7);
		case 14: return Precpred(Context, 6);
		case 15: return Precpred(Context, 5);
		case 16: return Precpred(Context, 21);
		case 17: return Precpred(Context, 20);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,169,1188,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,220,8,0,1,1,3,1,223,8,1,1,
		1,5,1,226,8,1,10,1,12,1,229,9,1,1,1,5,1,232,8,1,10,1,12,1,235,9,1,1,1,
		1,1,1,2,1,2,1,2,1,2,3,2,243,8,2,1,3,1,3,1,3,1,3,3,3,249,8,3,1,3,1,3,3,
		3,253,8,3,1,4,1,4,1,4,1,4,3,4,259,8,4,1,4,1,4,3,4,263,8,4,1,5,1,5,1,6,
		1,6,1,7,3,7,270,8,7,1,7,1,7,1,7,3,7,275,8,7,1,7,1,7,3,7,279,8,7,1,8,3,
		8,282,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,290,8,8,1,9,3,9,293,8,9,1,9,1,9,
		1,9,1,9,1,9,1,9,3,9,301,8,9,1,9,3,9,304,8,9,1,10,1,10,1,10,1,10,1,10,5,
		10,311,8,10,10,10,12,10,314,9,10,1,10,1,10,1,11,1,11,1,11,3,11,321,8,11,
		1,11,1,11,1,12,1,12,1,13,3,13,328,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,3,13,337,8,13,1,14,3,14,340,8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		5,14,349,8,14,10,14,12,14,352,9,14,1,14,1,14,3,14,356,8,14,1,15,1,15,1,
		15,3,15,361,8,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,
		1,20,1,20,1,20,1,20,3,20,378,8,20,1,21,1,21,1,21,5,21,383,8,21,10,21,12,
		21,386,9,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
		1,24,1,24,1,25,1,25,1,25,1,25,1,25,5,25,407,8,25,10,25,12,25,410,9,25,
		1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,5,27,422,8,27,10,27,
		12,27,425,9,27,1,27,1,27,1,28,1,28,1,28,3,28,432,8,28,1,29,1,29,3,29,436,
		8,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,3,30,446,8,30,1,30,1,30,1,
		31,1,31,1,32,1,32,3,32,454,8,32,1,32,3,32,457,8,32,1,32,1,32,1,32,1,32,
		1,32,1,32,5,32,465,8,32,10,32,12,32,468,9,32,3,32,470,8,32,1,32,1,32,1,
		32,3,32,475,8,32,1,32,1,32,1,32,3,32,480,8,32,1,33,1,33,1,33,1,34,1,34,
		1,35,1,35,1,35,1,35,1,35,1,35,3,35,493,8,35,1,36,1,36,1,36,1,37,1,37,1,
		38,1,38,3,38,502,8,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,
		1,41,1,41,1,41,1,41,3,41,518,8,41,1,41,1,41,1,41,1,41,1,41,3,41,525,8,
		41,1,41,3,41,528,8,41,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,
		3,45,540,8,45,1,46,1,46,1,47,1,47,3,47,546,8,47,1,47,5,47,549,8,47,10,
		47,12,47,552,9,47,1,47,3,47,555,8,47,1,47,1,47,3,47,559,8,47,1,47,3,47,
		562,8,47,1,48,3,48,565,8,48,1,48,1,48,1,48,5,48,570,8,48,10,48,12,48,573,
		9,48,1,49,1,49,1,49,1,49,5,49,579,8,49,10,49,12,49,582,9,49,1,50,1,50,
		1,50,1,50,1,51,1,51,1,51,1,52,1,52,3,52,593,8,52,1,52,1,52,1,53,1,53,3,
		53,599,8,53,1,53,1,53,3,53,603,8,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,
		1,54,1,54,1,54,3,54,615,8,54,1,55,1,55,1,55,1,55,1,55,1,55,5,55,623,8,
		55,10,55,12,55,626,9,55,3,55,628,8,55,1,56,1,56,1,57,1,57,3,57,634,8,57,
		1,58,1,58,1,58,5,58,639,8,58,10,58,12,58,642,9,58,1,58,1,58,1,59,1,59,
		1,59,5,59,649,8,59,10,59,12,59,652,9,59,1,59,1,59,1,60,1,60,1,61,1,61,
		1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,5,61,669,8,61,10,61,12,61,
		672,9,61,1,62,1,62,3,62,676,8,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,
		63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,693,8,63,1,63,1,63,1,63,1,63,
		1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,709,8,63,1,63,1,
		63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,724,8,63,
		1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
		1,63,1,63,3,63,742,8,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,750,8,63,1,
		63,1,63,1,63,1,63,1,63,5,63,757,8,63,10,63,12,63,760,9,63,1,64,1,64,1,
		65,1,65,1,65,1,65,1,65,3,65,769,8,65,1,66,1,66,1,67,1,67,1,67,1,67,1,67,
		1,67,1,67,3,67,780,8,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,
		67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,
		67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,
		67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,829,8,67,1,67,4,67,
		832,8,67,11,67,12,67,833,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
		1,67,1,67,3,67,847,8,67,3,67,849,8,67,3,67,851,8,67,1,67,1,67,1,67,1,67,
		1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,5,67,
		870,8,67,10,67,12,67,873,9,67,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,
		1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,3,73,891,8,73,1,73,1,73,1,73,3,
		73,896,8,73,1,74,3,74,899,8,74,1,74,1,74,1,74,3,74,904,8,74,3,74,906,8,
		74,1,75,3,75,909,8,75,1,75,1,75,3,75,913,8,75,1,75,1,75,3,75,917,8,75,
		1,75,3,75,920,8,75,1,75,3,75,923,8,75,1,75,1,75,3,75,927,8,75,1,75,3,75,
		930,8,75,1,75,3,75,933,8,75,1,75,3,75,936,8,75,1,75,1,75,3,75,940,8,75,
		1,75,3,75,943,8,75,1,75,3,75,946,8,75,1,75,1,75,3,75,950,8,75,1,75,3,75,
		953,8,75,1,75,3,75,956,8,75,1,75,3,75,959,8,75,1,75,1,75,1,75,1,75,3,75,
		965,8,75,1,75,1,75,3,75,969,8,75,1,75,3,75,972,8,75,1,75,1,75,3,75,976,
		8,75,1,75,3,75,979,8,75,1,75,1,75,3,75,983,8,75,1,75,1,75,3,75,987,8,75,
		3,75,989,8,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,
		76,1,76,3,76,1004,8,76,1,77,1,77,3,77,1008,8,77,1,78,1,78,1,78,3,78,1013,
		8,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,3,79,1022,8,79,1,80,1,80,1,80,
		3,80,1027,8,80,1,80,1,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,
		1,82,1,82,1,82,1,82,1,82,3,82,1045,8,82,1,83,1,83,1,83,1,83,1,83,1,83,
		1,83,1,84,3,84,1055,8,84,1,84,1,84,1,84,1,84,1,84,5,84,1062,8,84,10,84,
		12,84,1065,9,84,3,84,1067,8,84,1,84,1,84,1,85,1,85,1,85,1,85,1,86,1,86,
		1,86,1,86,1,86,1,86,5,86,1081,8,86,10,86,12,86,1084,9,86,3,86,1086,8,86,
		1,86,1,86,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,3,88,1099,8,88,
		3,88,1101,8,88,1,88,1,88,1,88,1,88,5,88,1107,8,88,10,88,12,88,1110,9,88,
		3,88,1112,8,88,1,88,1,88,1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,3,90,
		1124,8,90,1,91,1,91,1,91,1,91,1,91,5,91,1131,8,91,10,91,12,91,1134,9,91,
		1,91,1,91,3,91,1138,8,91,1,92,1,92,1,93,1,93,1,94,1,94,1,95,1,95,1,96,
		1,96,1,97,1,97,1,98,1,98,3,98,1154,8,98,1,99,1,99,3,99,1158,8,99,1,100,
		1,100,3,100,1162,8,100,1,101,1,101,1,102,1,102,1,102,3,102,1169,8,102,
		1,103,1,103,1,103,5,103,1174,8,103,10,103,12,103,1177,9,103,1,104,1,104,
		3,104,1181,8,104,1,105,1,105,1,105,3,105,1186,8,105,1,105,0,3,122,126,
		134,106,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
		46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
		94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
		132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
		168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
		204,206,208,210,0,36,1,0,6,7,1,0,41,43,1,0,47,48,1,0,53,56,2,0,22,23,70,
		71,2,0,42,43,72,73,2,0,41,41,74,74,1,0,75,76,1,0,78,81,1,0,59,61,2,0,57,
		57,62,62,1,0,82,89,1,0,94,101,1,0,104,105,1,0,106,107,1,0,114,115,2,0,
		48,48,126,126,1,0,127,128,1,0,117,120,2,0,104,105,121,121,1,0,131,132,
		1,0,133,134,1,0,135,136,1,0,138,139,1,0,141,143,1,0,146,147,1,0,60,61,
		2,0,31,31,38,38,2,0,32,32,40,40,15,0,1,10,12,13,18,21,24,25,27,30,35,37,
		41,41,44,69,74,77,79,103,106,115,119,120,122,134,137,150,154,156,19,0,
		19,19,21,21,24,25,35,37,41,41,44,44,46,49,51,51,57,69,75,75,82,89,94,103,
		108,108,112,115,122,130,137,140,143,144,146,148,155,156,20,0,1,10,12,13,
		18,18,20,20,27,30,45,45,50,50,52,56,74,74,76,77,79,81,90,93,106,107,109,
		111,119,120,131,134,141,142,145,145,149,150,154,154,11,0,2,2,18,18,20,
		20,45,45,47,48,58,58,64,64,74,74,90,93,106,107,154,156,16,0,1,10,12,13,
		18,21,24,25,27,30,35,37,41,41,44,69,74,77,79,103,106,115,119,120,122,134,
		138,139,141,150,154,156,2,0,90,91,155,156,2,0,158,158,163,164,1290,0,219,
		1,0,0,0,2,222,1,0,0,0,4,238,1,0,0,0,6,244,1,0,0,0,8,254,1,0,0,0,10,264,
		1,0,0,0,12,266,1,0,0,0,14,269,1,0,0,0,16,281,1,0,0,0,18,292,1,0,0,0,20,
		305,1,0,0,0,22,320,1,0,0,0,24,324,1,0,0,0,26,327,1,0,0,0,28,339,1,0,0,
		0,30,360,1,0,0,0,32,364,1,0,0,0,34,366,1,0,0,0,36,368,1,0,0,0,38,370,1,
		0,0,0,40,377,1,0,0,0,42,384,1,0,0,0,44,389,1,0,0,0,46,391,1,0,0,0,48,396,
		1,0,0,0,50,401,1,0,0,0,52,413,1,0,0,0,54,416,1,0,0,0,56,431,1,0,0,0,58,
		433,1,0,0,0,60,441,1,0,0,0,62,449,1,0,0,0,64,451,1,0,0,0,66,481,1,0,0,
		0,68,484,1,0,0,0,70,492,1,0,0,0,72,494,1,0,0,0,74,497,1,0,0,0,76,501,1,
		0,0,0,78,503,1,0,0,0,80,508,1,0,0,0,82,513,1,0,0,0,84,531,1,0,0,0,86,533,
		1,0,0,0,88,535,1,0,0,0,90,539,1,0,0,0,92,541,1,0,0,0,94,543,1,0,0,0,96,
		564,1,0,0,0,98,574,1,0,0,0,100,583,1,0,0,0,102,587,1,0,0,0,104,590,1,0,
		0,0,106,596,1,0,0,0,108,607,1,0,0,0,110,616,1,0,0,0,112,629,1,0,0,0,114,
		631,1,0,0,0,116,640,1,0,0,0,118,650,1,0,0,0,120,655,1,0,0,0,122,657,1,
		0,0,0,124,675,1,0,0,0,126,708,1,0,0,0,128,761,1,0,0,0,130,768,1,0,0,0,
		132,770,1,0,0,0,134,850,1,0,0,0,136,874,1,0,0,0,138,879,1,0,0,0,140,882,
		1,0,0,0,142,884,1,0,0,0,144,886,1,0,0,0,146,895,1,0,0,0,148,905,1,0,0,
		0,150,988,1,0,0,0,152,1003,1,0,0,0,154,1007,1,0,0,0,156,1009,1,0,0,0,158,
		1021,1,0,0,0,160,1023,1,0,0,0,162,1030,1,0,0,0,164,1044,1,0,0,0,166,1046,
		1,0,0,0,168,1054,1,0,0,0,170,1070,1,0,0,0,172,1074,1,0,0,0,174,1089,1,
		0,0,0,176,1100,1,0,0,0,178,1115,1,0,0,0,180,1118,1,0,0,0,182,1125,1,0,
		0,0,184,1139,1,0,0,0,186,1141,1,0,0,0,188,1143,1,0,0,0,190,1145,1,0,0,
		0,192,1147,1,0,0,0,194,1149,1,0,0,0,196,1153,1,0,0,0,198,1157,1,0,0,0,
		200,1161,1,0,0,0,202,1163,1,0,0,0,204,1165,1,0,0,0,206,1170,1,0,0,0,208,
		1178,1,0,0,0,210,1185,1,0,0,0,212,220,3,6,3,0,213,220,3,8,4,0,214,220,
		3,16,8,0,215,220,3,18,9,0,216,220,3,26,13,0,217,220,3,28,14,0,218,220,
		3,14,7,0,219,212,1,0,0,0,219,213,1,0,0,0,219,214,1,0,0,0,219,215,1,0,0,
		0,219,216,1,0,0,0,219,217,1,0,0,0,219,218,1,0,0,0,220,1,1,0,0,0,221,223,
		3,4,2,0,222,221,1,0,0,0,222,223,1,0,0,0,223,227,1,0,0,0,224,226,3,0,0,
		0,225,224,1,0,0,0,226,229,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,
		233,1,0,0,0,229,227,1,0,0,0,230,232,3,56,28,0,231,230,1,0,0,0,232,235,
		1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,236,1,0,0,0,235,233,1,0,0,
		0,236,237,5,0,0,1,237,3,1,0,0,0,238,239,5,1,0,0,239,242,3,116,58,0,240,
		241,5,2,0,0,241,243,3,36,18,0,242,240,1,0,0,0,242,243,1,0,0,0,243,5,1,
		0,0,0,244,245,5,3,0,0,245,248,3,116,58,0,246,247,5,2,0,0,247,249,3,36,
		18,0,248,246,1,0,0,0,248,249,1,0,0,0,249,252,1,0,0,0,250,251,5,4,0,0,251,
		253,3,10,5,0,252,250,1,0,0,0,252,253,1,0,0,0,253,7,1,0,0,0,254,255,5,5,
		0,0,255,258,3,116,58,0,256,257,5,2,0,0,257,259,3,36,18,0,258,256,1,0,0,
		0,258,259,1,0,0,0,259,262,1,0,0,0,260,261,5,4,0,0,261,263,3,10,5,0,262,
		260,1,0,0,0,262,263,1,0,0,0,263,9,1,0,0,0,264,265,3,202,101,0,265,11,1,
		0,0,0,266,267,7,0,0,0,267,13,1,0,0,0,268,270,3,12,6,0,269,268,1,0,0,0,
		269,270,1,0,0,0,270,271,1,0,0,0,271,272,5,8,0,0,272,274,3,202,101,0,273,
		275,3,40,20,0,274,273,1,0,0,0,274,275,1,0,0,0,275,278,1,0,0,0,276,277,
		5,9,0,0,277,279,3,126,63,0,278,276,1,0,0,0,278,279,1,0,0,0,279,15,1,0,
		0,0,280,282,3,12,6,0,281,280,1,0,0,0,281,282,1,0,0,0,282,283,1,0,0,0,283,
		284,5,10,0,0,284,285,3,202,101,0,285,286,5,11,0,0,286,289,3,32,16,0,287,
		288,5,2,0,0,288,290,3,36,18,0,289,287,1,0,0,0,289,290,1,0,0,0,290,17,1,
		0,0,0,291,293,3,12,6,0,292,291,1,0,0,0,292,293,1,0,0,0,293,294,1,0,0,0,
		294,295,5,12,0,0,295,296,3,202,101,0,296,297,5,11,0,0,297,300,3,34,17,
		0,298,299,5,2,0,0,299,301,3,36,18,0,300,298,1,0,0,0,300,301,1,0,0,0,301,
		303,1,0,0,0,302,304,3,20,10,0,303,302,1,0,0,0,303,304,1,0,0,0,304,19,1,
		0,0,0,305,306,5,13,0,0,306,307,5,14,0,0,307,312,3,22,11,0,308,309,5,15,
		0,0,309,311,3,22,11,0,310,308,1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,
		312,313,1,0,0,0,313,315,1,0,0,0,314,312,1,0,0,0,315,316,5,16,0,0,316,21,
		1,0,0,0,317,318,3,24,12,0,318,319,5,17,0,0,319,321,1,0,0,0,320,317,1,0,
		0,0,320,321,1,0,0,0,321,322,1,0,0,0,322,323,3,202,101,0,323,23,1,0,0,0,
		324,325,3,202,101,0,325,25,1,0,0,0,326,328,3,12,6,0,327,326,1,0,0,0,327,
		328,1,0,0,0,328,329,1,0,0,0,329,330,5,18,0,0,330,331,3,202,101,0,331,332,
		5,11,0,0,332,333,3,38,19,0,333,334,5,19,0,0,334,336,3,22,11,0,335,337,
		3,178,89,0,336,335,1,0,0,0,336,337,1,0,0,0,337,27,1,0,0,0,338,340,3,12,
		6,0,339,338,1,0,0,0,339,340,1,0,0,0,340,341,1,0,0,0,341,342,5,20,0,0,342,
		343,3,202,101,0,343,344,5,11,0,0,344,345,5,14,0,0,345,350,3,30,15,0,346,
		347,5,15,0,0,347,349,3,30,15,0,348,346,1,0,0,0,349,352,1,0,0,0,350,348,
		1,0,0,0,350,351,1,0,0,0,351,353,1,0,0,0,352,350,1,0,0,0,353,355,5,16,0,
		0,354,356,3,178,89,0,355,354,1,0,0,0,355,356,1,0,0,0,356,29,1,0,0,0,357,
		358,3,24,12,0,358,359,5,17,0,0,359,361,1,0,0,0,360,357,1,0,0,0,360,361,
		1,0,0,0,361,362,1,0,0,0,362,363,3,202,101,0,363,31,1,0,0,0,364,365,5,165,
		0,0,365,33,1,0,0,0,366,367,5,165,0,0,367,35,1,0,0,0,368,369,5,165,0,0,
		369,37,1,0,0,0,370,371,5,165,0,0,371,39,1,0,0,0,372,378,3,42,21,0,373,
		378,3,46,23,0,374,378,3,48,24,0,375,378,3,50,25,0,376,378,3,54,27,0,377,
		372,1,0,0,0,377,373,1,0,0,0,377,374,1,0,0,0,377,375,1,0,0,0,377,376,1,
		0,0,0,378,41,1,0,0,0,379,380,3,92,46,0,380,381,5,17,0,0,381,383,1,0,0,
		0,382,379,1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,
		387,1,0,0,0,386,384,1,0,0,0,387,388,3,198,99,0,388,43,1,0,0,0,389,390,
		3,202,101,0,390,45,1,0,0,0,391,392,5,21,0,0,392,393,5,22,0,0,393,394,3,
		40,20,0,394,395,5,23,0,0,395,47,1,0,0,0,396,397,5,24,0,0,397,398,5,22,
		0,0,398,399,3,40,20,0,399,400,5,23,0,0,400,49,1,0,0,0,401,402,5,25,0,0,
		402,403,5,14,0,0,403,408,3,52,26,0,404,405,5,15,0,0,405,407,3,52,26,0,
		406,404,1,0,0,0,407,410,1,0,0,0,408,406,1,0,0,0,408,409,1,0,0,0,409,411,
		1,0,0,0,410,408,1,0,0,0,411,412,5,16,0,0,412,51,1,0,0,0,413,414,3,196,
		98,0,414,415,3,40,20,0,415,53,1,0,0,0,416,417,5,26,0,0,417,418,5,22,0,
		0,418,423,3,40,20,0,419,420,5,15,0,0,420,422,3,40,20,0,421,419,1,0,0,0,
		422,425,1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,426,1,0,0,0,425,423,
		1,0,0,0,426,427,5,23,0,0,427,55,1,0,0,0,428,432,3,58,29,0,429,432,3,60,
		30,0,430,432,3,64,32,0,431,428,1,0,0,0,431,429,1,0,0,0,431,430,1,0,0,0,
		432,57,1,0,0,0,433,435,5,27,0,0,434,436,3,12,6,0,435,434,1,0,0,0,435,436,
		1,0,0,0,436,437,1,0,0,0,437,438,3,202,101,0,438,439,5,11,0,0,439,440,3,
		126,63,0,440,59,1,0,0,0,441,445,5,28,0,0,442,443,3,44,22,0,443,444,5,17,
		0,0,444,446,1,0,0,0,445,442,1,0,0,0,445,446,1,0,0,0,446,447,1,0,0,0,447,
		448,3,202,101,0,448,61,1,0,0,0,449,450,5,29,0,0,450,63,1,0,0,0,451,453,
		5,27,0,0,452,454,3,12,6,0,453,452,1,0,0,0,453,454,1,0,0,0,454,456,1,0,
		0,0,455,457,3,62,31,0,456,455,1,0,0,0,456,457,1,0,0,0,457,458,1,0,0,0,
		458,459,5,30,0,0,459,460,3,200,100,0,460,469,5,31,0,0,461,466,3,66,33,
		0,462,463,5,15,0,0,463,465,3,66,33,0,464,462,1,0,0,0,465,468,1,0,0,0,466,
		464,1,0,0,0,466,467,1,0,0,0,467,470,1,0,0,0,468,466,1,0,0,0,469,461,1,
		0,0,0,469,470,1,0,0,0,470,471,1,0,0,0,471,474,5,32,0,0,472,473,5,33,0,
		0,473,475,3,40,20,0,474,472,1,0,0,0,474,475,1,0,0,0,475,476,1,0,0,0,476,
		479,5,11,0,0,477,480,3,68,34,0,478,480,5,34,0,0,479,477,1,0,0,0,479,478,
		1,0,0,0,480,65,1,0,0,0,481,482,3,196,98,0,482,483,3,40,20,0,483,67,1,0,
		0,0,484,485,3,126,63,0,485,69,1,0,0,0,486,493,3,82,41,0,487,493,3,118,
		59,0,488,489,5,31,0,0,489,490,3,126,63,0,490,491,5,32,0,0,491,493,1,0,
		0,0,492,486,1,0,0,0,492,487,1,0,0,0,492,488,1,0,0,0,493,71,1,0,0,0,494,
		495,3,70,35,0,495,496,3,74,37,0,496,73,1,0,0,0,497,498,3,202,101,0,498,
		75,1,0,0,0,499,502,3,78,39,0,500,502,3,80,40,0,501,499,1,0,0,0,501,500,
		1,0,0,0,502,77,1,0,0,0,503,504,5,35,0,0,504,505,3,72,36,0,505,506,5,36,
		0,0,506,507,3,126,63,0,507,79,1,0,0,0,508,509,5,37,0,0,509,510,3,72,36,
		0,510,511,5,36,0,0,511,512,3,126,63,0,512,81,1,0,0,0,513,517,5,38,0,0,
		514,515,3,84,42,0,515,516,5,39,0,0,516,518,1,0,0,0,517,514,1,0,0,0,517,
		518,1,0,0,0,518,519,1,0,0,0,519,527,3,42,21,0,520,524,5,11,0,0,521,522,
		3,86,43,0,522,523,3,88,44,0,523,525,1,0,0,0,524,521,1,0,0,0,524,525,1,
		0,0,0,525,526,1,0,0,0,526,528,3,90,45,0,527,520,1,0,0,0,527,528,1,0,0,
		0,528,529,1,0,0,0,529,530,5,40,0,0,530,83,1,0,0,0,531,532,3,118,59,0,532,
		85,1,0,0,0,533,534,3,122,61,0,534,87,1,0,0,0,535,536,7,1,0,0,536,89,1,
		0,0,0,537,540,3,118,59,0,538,540,3,126,63,0,539,537,1,0,0,0,539,538,1,
		0,0,0,540,91,1,0,0,0,541,542,3,202,101,0,542,93,1,0,0,0,543,545,3,96,48,
		0,544,546,3,98,49,0,545,544,1,0,0,0,545,546,1,0,0,0,546,550,1,0,0,0,547,
		549,3,76,38,0,548,547,1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,0,550,551,
		1,0,0,0,551,554,1,0,0,0,552,550,1,0,0,0,553,555,3,102,51,0,554,553,1,0,
		0,0,554,555,1,0,0,0,555,558,1,0,0,0,556,559,3,106,53,0,557,559,3,104,52,
		0,558,556,1,0,0,0,558,557,1,0,0,0,558,559,1,0,0,0,559,561,1,0,0,0,560,
		562,3,110,55,0,561,560,1,0,0,0,561,562,1,0,0,0,562,95,1,0,0,0,563,565,
		5,19,0,0,564,563,1,0,0,0,564,565,1,0,0,0,565,566,1,0,0,0,566,571,3,72,
		36,0,567,568,5,15,0,0,568,570,3,72,36,0,569,567,1,0,0,0,570,573,1,0,0,
		0,571,569,1,0,0,0,571,572,1,0,0,0,572,97,1,0,0,0,573,571,1,0,0,0,574,575,
		5,44,0,0,575,580,3,100,50,0,576,577,5,15,0,0,577,579,3,100,50,0,578,576,
		1,0,0,0,579,582,1,0,0,0,580,578,1,0,0,0,580,581,1,0,0,0,581,99,1,0,0,0,
		582,580,1,0,0,0,583,584,3,202,101,0,584,585,5,11,0,0,585,586,3,126,63,
		0,586,101,1,0,0,0,587,588,5,45,0,0,588,589,3,126,63,0,589,103,1,0,0,0,
		590,592,5,46,0,0,591,593,7,2,0,0,592,591,1,0,0,0,592,593,1,0,0,0,593,594,
		1,0,0,0,594,595,3,126,63,0,595,105,1,0,0,0,596,598,5,49,0,0,597,599,7,
		2,0,0,598,597,1,0,0,0,598,599,1,0,0,0,599,600,1,0,0,0,600,602,3,202,101,
		0,601,603,3,108,54,0,602,601,1,0,0,0,602,603,1,0,0,0,603,604,1,0,0,0,604,
		605,5,11,0,0,605,606,3,126,63,0,606,107,1,0,0,0,607,614,5,50,0,0,608,615,
		3,124,62,0,609,615,3,208,104,0,610,611,5,31,0,0,611,612,3,126,63,0,612,
		613,5,32,0,0,613,615,1,0,0,0,614,608,1,0,0,0,614,609,1,0,0,0,614,610,1,
		0,0,0,615,109,1,0,0,0,616,627,5,51,0,0,617,628,3,112,56,0,618,619,5,52,
		0,0,619,624,3,114,57,0,620,621,5,15,0,0,621,623,3,114,57,0,622,620,1,0,
		0,0,623,626,1,0,0,0,624,622,1,0,0,0,624,625,1,0,0,0,625,628,1,0,0,0,626,
		624,1,0,0,0,627,617,1,0,0,0,627,618,1,0,0,0,628,111,1,0,0,0,629,630,7,
		3,0,0,630,113,1,0,0,0,631,633,3,134,67,0,632,634,3,112,56,0,633,632,1,
		0,0,0,633,634,1,0,0,0,634,115,1,0,0,0,635,636,3,92,46,0,636,637,5,17,0,
		0,637,639,1,0,0,0,638,635,1,0,0,0,639,642,1,0,0,0,640,638,1,0,0,0,640,
		641,1,0,0,0,641,643,1,0,0,0,642,640,1,0,0,0,643,644,3,202,101,0,644,117,
		1,0,0,0,645,646,3,120,60,0,646,647,5,17,0,0,647,649,1,0,0,0,648,645,1,
		0,0,0,649,652,1,0,0,0,650,648,1,0,0,0,650,651,1,0,0,0,651,653,1,0,0,0,
		652,650,1,0,0,0,653,654,3,196,98,0,654,119,1,0,0,0,655,656,3,196,98,0,
		656,121,1,0,0,0,657,658,6,61,-1,0,658,659,3,196,98,0,659,670,1,0,0,0,660,
		661,10,2,0,0,661,662,5,17,0,0,662,669,3,196,98,0,663,664,10,1,0,0,664,
		665,5,38,0,0,665,666,3,124,62,0,666,667,5,40,0,0,667,669,1,0,0,0,668,660,
		1,0,0,0,668,663,1,0,0,0,669,672,1,0,0,0,670,668,1,0,0,0,670,671,1,0,0,
		0,671,123,1,0,0,0,672,670,1,0,0,0,673,676,5,165,0,0,674,676,5,166,0,0,
		675,673,1,0,0,0,675,674,1,0,0,0,676,125,1,0,0,0,677,678,6,63,-1,0,678,
		709,3,134,67,0,679,709,3,82,41,0,680,709,3,94,47,0,681,682,5,63,0,0,682,
		683,3,126,63,0,683,684,5,62,0,0,684,685,3,40,20,0,685,709,1,0,0,0,686,
		687,5,58,0,0,687,709,3,126,63,13,688,689,5,64,0,0,689,709,3,126,63,12,
		690,691,5,68,0,0,691,693,5,41,0,0,692,690,1,0,0,0,692,693,1,0,0,0,693,
		694,1,0,0,0,694,695,3,132,66,0,695,696,5,66,0,0,696,697,3,134,67,0,697,
		698,5,67,0,0,698,699,3,134,67,0,699,709,1,0,0,0,700,701,5,69,0,0,701,702,
		5,41,0,0,702,703,3,132,66,0,703,704,5,66,0,0,704,705,3,134,67,0,705,706,
		5,67,0,0,706,707,3,134,67,0,707,709,1,0,0,0,708,677,1,0,0,0,708,679,1,
		0,0,0,708,680,1,0,0,0,708,681,1,0,0,0,708,686,1,0,0,0,708,688,1,0,0,0,
		708,692,1,0,0,0,708,700,1,0,0,0,709,758,1,0,0,0,710,711,10,8,0,0,711,712,
		7,4,0,0,712,757,3,126,63,9,713,714,10,7,0,0,714,715,3,150,75,0,715,716,
		3,126,63,8,716,757,1,0,0,0,717,718,10,6,0,0,718,719,7,5,0,0,719,757,3,
		126,63,7,720,721,10,5,0,0,721,723,7,6,0,0,722,724,3,138,69,0,723,722,1,
		0,0,0,723,724,1,0,0,0,724,725,1,0,0,0,725,757,3,126,63,6,726,727,10,4,
		0,0,727,728,5,67,0,0,728,757,3,126,63,5,729,730,10,3,0,0,730,731,7,7,0,
		0,731,757,3,126,63,4,732,733,10,2,0,0,733,734,5,77,0,0,734,757,3,126,63,
		3,735,736,10,1,0,0,736,737,7,8,0,0,737,757,3,126,63,2,738,739,10,16,0,
		0,739,741,5,57,0,0,740,742,5,58,0,0,741,740,1,0,0,0,741,742,1,0,0,0,742,
		743,1,0,0,0,743,757,7,9,0,0,744,745,10,15,0,0,745,746,7,10,0,0,746,757,
		3,40,20,0,747,749,10,11,0,0,748,750,5,65,0,0,749,748,1,0,0,0,749,750,1,
		0,0,0,750,751,1,0,0,0,751,752,5,66,0,0,752,753,3,134,67,0,753,754,5,67,
		0,0,754,755,3,134,67,0,755,757,1,0,0,0,756,710,1,0,0,0,756,713,1,0,0,0,
		756,717,1,0,0,0,756,720,1,0,0,0,756,726,1,0,0,0,756,729,1,0,0,0,756,732,
		1,0,0,0,756,735,1,0,0,0,756,738,1,0,0,0,756,744,1,0,0,0,756,747,1,0,0,
		0,757,760,1,0,0,0,758,756,1,0,0,0,758,759,1,0,0,0,759,127,1,0,0,0,760,
		758,1,0,0,0,761,762,7,11,0,0,762,129,1,0,0,0,763,769,3,128,64,0,764,769,
		5,90,0,0,765,769,5,91,0,0,766,769,5,92,0,0,767,769,5,93,0,0,768,763,1,
		0,0,0,768,764,1,0,0,0,768,765,1,0,0,0,768,766,1,0,0,0,768,767,1,0,0,0,
		769,131,1,0,0,0,770,771,7,12,0,0,771,133,1,0,0,0,772,773,6,67,-1,0,773,
		851,3,152,76,0,774,775,5,102,0,0,775,776,3,126,63,0,776,779,5,103,0,0,
		777,780,3,40,20,0,778,780,3,210,105,0,779,777,1,0,0,0,779,778,1,0,0,0,
		780,851,1,0,0,0,781,782,7,13,0,0,782,851,3,134,67,18,783,784,7,14,0,0,
		784,785,5,108,0,0,785,851,3,134,67,17,786,787,3,130,65,0,787,788,5,19,
		0,0,788,789,3,134,67,16,789,851,1,0,0,0,790,791,5,68,0,0,791,792,5,41,
		0,0,792,793,3,132,66,0,793,794,5,108,0,0,794,795,3,134,67,15,795,851,1,
		0,0,0,796,797,5,69,0,0,797,798,5,41,0,0,798,799,3,132,66,0,799,800,5,108,
		0,0,800,801,3,134,67,14,801,851,1,0,0,0,802,803,5,109,0,0,803,804,5,108,
		0,0,804,851,3,134,67,13,805,806,5,110,0,0,806,807,5,108,0,0,807,851,3,
		134,67,12,808,809,5,111,0,0,809,810,5,108,0,0,810,851,3,134,67,11,811,
		812,5,112,0,0,812,813,5,19,0,0,813,851,3,134,67,10,814,815,5,113,0,0,815,
		816,5,19,0,0,816,851,3,134,67,9,817,818,7,15,0,0,818,851,3,42,21,0,819,
		820,5,122,0,0,820,821,3,126,63,0,821,822,5,123,0,0,822,823,3,126,63,0,
		823,824,5,124,0,0,824,825,3,126,63,0,825,851,1,0,0,0,826,828,5,125,0,0,
		827,829,3,126,63,0,828,827,1,0,0,0,828,829,1,0,0,0,829,831,1,0,0,0,830,
		832,3,136,68,0,831,830,1,0,0,0,832,833,1,0,0,0,833,831,1,0,0,0,833,834,
		1,0,0,0,834,835,1,0,0,0,835,836,5,124,0,0,836,837,3,126,63,0,837,838,5,
		107,0,0,838,851,1,0,0,0,839,840,7,16,0,0,840,851,3,126,63,0,841,842,7,
		17,0,0,842,848,3,126,63,0,843,846,5,129,0,0,844,847,3,128,64,0,845,847,
		3,126,63,0,846,844,1,0,0,0,846,845,1,0,0,0,847,849,1,0,0,0,848,843,1,0,
		0,0,848,849,1,0,0,0,849,851,1,0,0,0,850,772,1,0,0,0,850,774,1,0,0,0,850,
		781,1,0,0,0,850,783,1,0,0,0,850,786,1,0,0,0,850,790,1,0,0,0,850,796,1,
		0,0,0,850,802,1,0,0,0,850,805,1,0,0,0,850,808,1,0,0,0,850,811,1,0,0,0,
		850,814,1,0,0,0,850,817,1,0,0,0,850,819,1,0,0,0,850,826,1,0,0,0,850,839,
		1,0,0,0,850,841,1,0,0,0,851,871,1,0,0,0,852,853,10,7,0,0,853,854,5,116,
		0,0,854,870,3,134,67,8,855,856,10,6,0,0,856,857,7,18,0,0,857,870,3,134,
		67,7,858,859,10,5,0,0,859,860,7,19,0,0,860,870,3,134,67,6,861,862,10,21,
		0,0,862,863,5,17,0,0,863,870,3,154,77,0,864,865,10,20,0,0,865,866,5,38,
		0,0,866,867,3,126,63,0,867,868,5,40,0,0,868,870,1,0,0,0,869,852,1,0,0,
		0,869,855,1,0,0,0,869,858,1,0,0,0,869,861,1,0,0,0,869,864,1,0,0,0,870,
		873,1,0,0,0,871,869,1,0,0,0,871,872,1,0,0,0,872,135,1,0,0,0,873,871,1,
		0,0,0,874,875,5,130,0,0,875,876,3,126,63,0,876,877,5,123,0,0,877,878,3,
		126,63,0,878,137,1,0,0,0,879,880,3,128,64,0,880,881,5,108,0,0,881,139,
		1,0,0,0,882,883,7,20,0,0,883,141,1,0,0,0,884,885,7,21,0,0,885,143,1,0,
		0,0,886,887,7,22,0,0,887,145,1,0,0,0,888,890,3,208,104,0,889,891,3,142,
		71,0,890,889,1,0,0,0,890,891,1,0,0,0,891,896,1,0,0,0,892,893,3,144,72,
		0,893,894,3,208,104,0,894,896,1,0,0,0,895,888,1,0,0,0,895,892,1,0,0,0,
		896,147,1,0,0,0,897,899,5,137,0,0,898,897,1,0,0,0,898,899,1,0,0,0,899,
		900,1,0,0,0,900,906,7,23,0,0,901,903,7,23,0,0,902,904,5,140,0,0,903,902,
		1,0,0,0,903,904,1,0,0,0,904,906,1,0,0,0,905,898,1,0,0,0,905,901,1,0,0,
		0,906,149,1,0,0,0,907,909,7,24,0,0,908,907,1,0,0,0,908,909,1,0,0,0,909,
		910,1,0,0,0,910,912,5,144,0,0,911,913,3,128,64,0,912,911,1,0,0,0,912,913,
		1,0,0,0,913,916,1,0,0,0,914,917,3,140,70,0,915,917,5,62,0,0,916,914,1,
		0,0,0,916,915,1,0,0,0,917,919,1,0,0,0,918,920,7,14,0,0,919,918,1,0,0,0,
		919,920,1,0,0,0,920,989,1,0,0,0,921,923,5,65,0,0,922,921,1,0,0,0,922,923,
		1,0,0,0,923,924,1,0,0,0,924,926,5,145,0,0,925,927,3,138,69,0,926,925,1,
		0,0,0,926,927,1,0,0,0,927,929,1,0,0,0,928,930,7,14,0,0,929,928,1,0,0,0,
		929,930,1,0,0,0,930,989,1,0,0,0,931,933,7,24,0,0,932,931,1,0,0,0,932,933,
		1,0,0,0,933,935,1,0,0,0,934,936,5,65,0,0,935,934,1,0,0,0,935,936,1,0,0,
		0,936,937,1,0,0,0,937,939,7,25,0,0,938,940,3,138,69,0,939,938,1,0,0,0,
		939,940,1,0,0,0,940,989,1,0,0,0,941,943,7,24,0,0,942,941,1,0,0,0,942,943,
		1,0,0,0,943,945,1,0,0,0,944,946,3,146,73,0,945,944,1,0,0,0,945,946,1,0,
		0,0,946,947,1,0,0,0,947,949,3,148,74,0,948,950,3,138,69,0,949,948,1,0,
		0,0,949,950,1,0,0,0,950,952,1,0,0,0,951,953,7,14,0,0,952,951,1,0,0,0,952,
		953,1,0,0,0,953,989,1,0,0,0,954,956,7,24,0,0,955,954,1,0,0,0,955,956,1,
		0,0,0,956,958,1,0,0,0,957,959,5,65,0,0,958,957,1,0,0,0,958,959,1,0,0,0,
		959,960,1,0,0,0,960,961,5,148,0,0,961,962,3,208,104,0,962,964,5,108,0,
		0,963,965,7,14,0,0,964,963,1,0,0,0,964,965,1,0,0,0,965,989,1,0,0,0,966,
		968,5,149,0,0,967,969,7,23,0,0,968,967,1,0,0,0,968,969,1,0,0,0,969,971,
		1,0,0,0,970,972,3,138,69,0,971,970,1,0,0,0,971,972,1,0,0,0,972,989,1,0,
		0,0,973,975,5,150,0,0,974,976,7,23,0,0,975,974,1,0,0,0,975,976,1,0,0,0,
		976,978,1,0,0,0,977,979,3,138,69,0,978,977,1,0,0,0,978,979,1,0,0,0,979,
		989,1,0,0,0,980,982,5,141,0,0,981,983,3,138,69,0,982,981,1,0,0,0,982,983,
		1,0,0,0,983,989,1,0,0,0,984,986,5,142,0,0,985,987,3,138,69,0,986,985,1,
		0,0,0,986,987,1,0,0,0,987,989,1,0,0,0,988,908,1,0,0,0,988,922,1,0,0,0,
		988,932,1,0,0,0,988,942,1,0,0,0,988,955,1,0,0,0,988,966,1,0,0,0,988,973,
		1,0,0,0,988,980,1,0,0,0,988,984,1,0,0,0,989,151,1,0,0,0,990,1004,3,158,
		79,0,991,1004,3,164,82,0,992,1004,3,204,102,0,993,1004,3,166,83,0,994,
		1004,3,168,84,0,995,1004,3,172,86,0,996,1004,3,176,88,0,997,1004,3,180,
		90,0,998,1004,3,182,91,0,999,1000,5,31,0,0,1000,1001,3,126,63,0,1001,1002,
		5,32,0,0,1002,1004,1,0,0,0,1003,990,1,0,0,0,1003,991,1,0,0,0,1003,992,
		1,0,0,0,1003,993,1,0,0,0,1003,994,1,0,0,0,1003,995,1,0,0,0,1003,996,1,
		0,0,0,1003,997,1,0,0,0,1003,998,1,0,0,0,1003,999,1,0,0,0,1004,153,1,0,
		0,0,1005,1008,3,196,98,0,1006,1008,3,156,78,0,1007,1005,1,0,0,0,1007,1006,
		1,0,0,0,1008,155,1,0,0,0,1009,1010,3,200,100,0,1010,1012,5,31,0,0,1011,
		1013,3,206,103,0,1012,1011,1,0,0,0,1012,1013,1,0,0,0,1013,1014,1,0,0,0,
		1014,1015,5,32,0,0,1015,157,1,0,0,0,1016,1022,3,196,98,0,1017,1022,3,160,
		80,0,1018,1022,5,151,0,0,1019,1022,5,152,0,0,1020,1022,5,153,0,0,1021,
		1016,1,0,0,0,1021,1017,1,0,0,0,1021,1018,1,0,0,0,1021,1019,1,0,0,0,1021,
		1020,1,0,0,0,1022,159,1,0,0,0,1023,1024,3,196,98,0,1024,1026,5,31,0,0,
		1025,1027,3,206,103,0,1026,1025,1,0,0,0,1026,1027,1,0,0,0,1027,1028,1,
		0,0,0,1028,1029,5,32,0,0,1029,161,1,0,0,0,1030,1031,3,208,104,0,1031,1032,
		5,11,0,0,1032,1033,3,208,104,0,1033,163,1,0,0,0,1034,1045,7,26,0,0,1035,
		1045,5,59,0,0,1036,1045,5,165,0,0,1037,1045,5,166,0,0,1038,1045,5,160,
		0,0,1039,1045,5,159,0,0,1040,1045,5,161,0,0,1041,1045,5,162,0,0,1042,1045,
		3,208,104,0,1043,1045,3,162,81,0,1044,1034,1,0,0,0,1044,1035,1,0,0,0,1044,
		1036,1,0,0,0,1044,1037,1,0,0,0,1044,1038,1,0,0,0,1044,1039,1,0,0,0,1044,
		1040,1,0,0,0,1044,1041,1,0,0,0,1044,1042,1,0,0,0,1044,1043,1,0,0,0,1045,
		165,1,0,0,0,1046,1047,5,24,0,0,1047,1048,7,27,0,0,1048,1049,3,126,63,0,
		1049,1050,5,15,0,0,1050,1051,3,126,63,0,1051,1052,7,28,0,0,1052,167,1,
		0,0,0,1053,1055,5,25,0,0,1054,1053,1,0,0,0,1054,1055,1,0,0,0,1055,1056,
		1,0,0,0,1056,1066,5,14,0,0,1057,1067,5,11,0,0,1058,1063,3,170,85,0,1059,
		1060,5,15,0,0,1060,1062,3,170,85,0,1061,1059,1,0,0,0,1062,1065,1,0,0,0,
		1063,1061,1,0,0,0,1063,1064,1,0,0,0,1064,1067,1,0,0,0,1065,1063,1,0,0,
		0,1066,1057,1,0,0,0,1066,1058,1,0,0,0,1067,1068,1,0,0,0,1068,1069,5,16,
		0,0,1069,169,1,0,0,0,1070,1071,3,196,98,0,1071,1072,5,11,0,0,1072,1073,
		3,126,63,0,1073,171,1,0,0,0,1074,1075,3,42,21,0,1075,1085,5,14,0,0,1076,
		1086,5,11,0,0,1077,1082,3,174,87,0,1078,1079,5,15,0,0,1079,1081,3,174,
		87,0,1080,1078,1,0,0,0,1081,1084,1,0,0,0,1082,1080,1,0,0,0,1082,1083,1,
		0,0,0,1083,1086,1,0,0,0,1084,1082,1,0,0,0,1085,1076,1,0,0,0,1085,1077,
		1,0,0,0,1086,1087,1,0,0,0,1087,1088,5,16,0,0,1088,173,1,0,0,0,1089,1090,
		3,196,98,0,1090,1091,5,11,0,0,1091,1092,3,126,63,0,1092,175,1,0,0,0,1093,
		1098,5,21,0,0,1094,1095,5,22,0,0,1095,1096,3,40,20,0,1096,1097,5,23,0,
		0,1097,1099,1,0,0,0,1098,1094,1,0,0,0,1098,1099,1,0,0,0,1099,1101,1,0,
		0,0,1100,1093,1,0,0,0,1100,1101,1,0,0,0,1101,1102,1,0,0,0,1102,1111,5,
		14,0,0,1103,1108,3,126,63,0,1104,1105,5,15,0,0,1105,1107,3,126,63,0,1106,
		1104,1,0,0,0,1107,1110,1,0,0,0,1108,1106,1,0,0,0,1108,1109,1,0,0,0,1109,
		1112,1,0,0,0,1110,1108,1,0,0,0,1111,1103,1,0,0,0,1111,1112,1,0,0,0,1112,
		1113,1,0,0,0,1113,1114,5,16,0,0,1114,177,1,0,0,0,1115,1116,5,154,0,0,1116,
		1117,5,165,0,0,1117,179,1,0,0,0,1118,1119,5,155,0,0,1119,1120,5,165,0,
		0,1120,1121,5,19,0,0,1121,1123,3,22,11,0,1122,1124,3,178,89,0,1123,1122,
		1,0,0,0,1123,1124,1,0,0,0,1124,181,1,0,0,0,1125,1126,5,156,0,0,1126,1127,
		5,14,0,0,1127,1132,3,180,90,0,1128,1129,5,15,0,0,1129,1131,3,180,90,0,
		1130,1128,1,0,0,0,1131,1134,1,0,0,0,1132,1130,1,0,0,0,1132,1133,1,0,0,
		0,1133,1135,1,0,0,0,1134,1132,1,0,0,0,1135,1137,5,16,0,0,1136,1138,3,178,
		89,0,1137,1136,1,0,0,0,1137,1138,1,0,0,0,1138,183,1,0,0,0,1139,1140,7,
		29,0,0,1140,185,1,0,0,0,1141,1142,7,30,0,0,1142,187,1,0,0,0,1143,1144,
		7,31,0,0,1144,189,1,0,0,0,1145,1146,7,32,0,0,1146,191,1,0,0,0,1147,1148,
		7,33,0,0,1148,193,1,0,0,0,1149,1150,7,34,0,0,1150,195,1,0,0,0,1151,1154,
		3,202,101,0,1152,1154,3,188,94,0,1153,1151,1,0,0,0,1153,1152,1,0,0,0,1154,
		197,1,0,0,0,1155,1158,3,196,98,0,1156,1158,3,194,97,0,1157,1155,1,0,0,
		0,1157,1156,1,0,0,0,1158,199,1,0,0,0,1159,1162,3,202,101,0,1160,1162,3,
		192,96,0,1161,1159,1,0,0,0,1161,1160,1,0,0,0,1162,201,1,0,0,0,1163,1164,
		7,35,0,0,1164,203,1,0,0,0,1165,1168,5,157,0,0,1166,1169,3,202,101,0,1167,
		1169,5,165,0,0,1168,1166,1,0,0,0,1168,1167,1,0,0,0,1169,205,1,0,0,0,1170,
		1175,3,126,63,0,1171,1172,5,15,0,0,1172,1174,3,126,63,0,1173,1171,1,0,
		0,0,1174,1177,1,0,0,0,1175,1173,1,0,0,0,1175,1176,1,0,0,0,1176,207,1,0,
		0,0,1177,1175,1,0,0,0,1178,1180,5,166,0,0,1179,1181,3,210,105,0,1180,1179,
		1,0,0,0,1180,1181,1,0,0,0,1181,209,1,0,0,0,1182,1186,3,128,64,0,1183,1186,
		3,132,66,0,1184,1186,5,165,0,0,1185,1182,1,0,0,0,1185,1183,1,0,0,0,1185,
		1184,1,0,0,0,1186,211,1,0,0,0,134,219,222,227,233,242,248,252,258,262,
		269,274,278,281,289,292,300,303,312,320,327,336,339,350,355,360,377,384,
		408,423,431,435,445,453,456,466,469,474,479,492,501,517,524,527,539,545,
		550,554,558,561,564,571,580,592,598,602,614,624,627,633,640,650,668,670,
		675,692,708,723,741,749,756,758,768,779,828,833,846,848,850,869,871,890,
		895,898,903,905,908,912,916,919,922,926,929,932,935,939,942,945,949,952,
		955,958,964,968,971,975,978,982,986,988,1003,1007,1012,1021,1026,1044,
		1054,1063,1066,1082,1085,1098,1100,1108,1111,1123,1132,1137,1153,1157,
		1161,1168,1175,1180,1185
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Hl7.Cql.CqlToElm.Grammar
