#nullable enable
abstract Hl7.Cql.Abstractions.TypeResolver.GetListElementType(System.Type! type, bool throwError = false) -> System.Type?
abstract Hl7.Cql.Abstractions.TypeResolver.ResolveType(string! typeSpecifier, bool throwError = true) -> System.Type?
const Hl7.Cql.Abstractions.UCUMUnits.Centimeter = "cm" -> string!
const Hl7.Cql.Abstractions.UCUMUnits.Day = "d" -> string!
const Hl7.Cql.Abstractions.UCUMUnits.Default = "1" -> string!
const Hl7.Cql.Abstractions.UCUMUnits.Foot = "[ft_i]" -> string!
const Hl7.Cql.Abstractions.UCUMUnits.Hour = "h" -> string!
const Hl7.Cql.Abstractions.UCUMUnits.Inch = "[in_i]" -> string!
const Hl7.Cql.Abstractions.UCUMUnits.Meter = "m" -> string!
const Hl7.Cql.Abstractions.UCUMUnits.Millisecond = "ms" -> string!
const Hl7.Cql.Abstractions.UCUMUnits.Minute = "min" -> string!
const Hl7.Cql.Abstractions.UCUMUnits.Month = "mo" -> string!
const Hl7.Cql.Abstractions.UCUMUnits.Second = "s" -> string!
const Hl7.Cql.Abstractions.UCUMUnits.Unary = "1" -> string!
const Hl7.Cql.Abstractions.UCUMUnits.Week = "wk" -> string!
const Hl7.Cql.Abstractions.UCUMUnits.Yard = "[yd_i]" -> string!
const Hl7.Cql.Abstractions.UCUMUnits.Year = "a" -> string!
Hl7.Cql.Abstractions.CqlDeclarationAttribute
Hl7.Cql.Abstractions.CqlDeclarationAttribute.CqlDeclarationAttribute(string! Name) -> void
Hl7.Cql.Abstractions.CqlDeclarationAttribute.Name.get -> string!
Hl7.Cql.Abstractions.CqlLibraryAttribute
Hl7.Cql.Abstractions.CqlLibraryAttribute.CqlLibraryAttribute(string! Identifier, string! Version) -> void
Hl7.Cql.Abstractions.CqlLibraryAttribute.Identifier.get -> string!
Hl7.Cql.Abstractions.CqlLibraryAttribute.Version.get -> string!
Hl7.Cql.Abstractions.CqlTagAttribute
Hl7.Cql.Abstractions.CqlTagAttribute.CqlTagAttribute(string! Name, string! Value) -> void
Hl7.Cql.Abstractions.CqlTagAttribute.Name.get -> string!
Hl7.Cql.Abstractions.CqlTagAttribute.Value.get -> string!
Hl7.Cql.Abstractions.CqlValueSetAttribute
Hl7.Cql.Abstractions.CqlValueSetAttribute.CqlValueSetAttribute(string! Id) -> void
Hl7.Cql.Abstractions.CqlValueSetAttribute.Id.get -> string!
Hl7.Cql.Abstractions.ICqlComparable<T>
Hl7.Cql.Abstractions.ICqlComparable<T>.CompareTo(T? other, string? precision = null) -> int?
Hl7.Cql.Abstractions.ICqlComparer
Hl7.Cql.Abstractions.ICqlComparer.Compare(object? x, object? y, string? precision) -> int?
Hl7.Cql.Abstractions.ICqlComparer.Equals(object? x, object? y, string? precision) -> bool?
Hl7.Cql.Abstractions.ICqlComparer.GetHashCode(object? x) -> int
Hl7.Cql.Abstractions.ICqlComparer<T>
Hl7.Cql.Abstractions.ICqlComparer<T>.Compare(T? x, T? y, string? precision) -> int?
Hl7.Cql.Abstractions.ICqlComparer<T>.Equals(T? x, T? y, string? precision) -> bool?
Hl7.Cql.Abstractions.ICqlComparer<T>.GetHashCode(T x) -> int
Hl7.Cql.Abstractions.ICqlLibrary
Hl7.Cql.Abstractions.ICqlLibrary.AddLibraryService(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
Hl7.Cql.Abstractions.IEquivalenceComparer
Hl7.Cql.Abstractions.IEquivalenceComparer.Equivalent(object? x, object? y, string? precision) -> bool
Hl7.Cql.Abstractions.IEquivalenceComparer<T>
Hl7.Cql.Abstractions.IEquivalenceComparer<T>.Equivalent(T x, T y, string? precision) -> bool
Hl7.Cql.Abstractions.IEquivalentable<T>
Hl7.Cql.Abstractions.IEquivalentable<T>.Equivalent(T? other, string? precision) -> bool
Hl7.Cql.Abstractions.TypeResolver
Hl7.Cql.Abstractions.TypeResolver.TypeResolver() -> void
Hl7.Cql.Abstractions.UCUMUnits
Hl7.Cql.Abstractions.Units
static Hl7.Cql.Abstractions.UCUMUnits.FromDateTimePrecision(Hl7.Cql.Iso8601.DateTimePrecision dtp) -> string?
static readonly Hl7.Cql.Abstractions.Units.CqlUnitsToUCUM -> System.Collections.Generic.IDictionary<string!, string!>!
static readonly Hl7.Cql.Abstractions.Units.UCUMUnitsToCql -> System.Collections.Generic.IDictionary<string!, string!>!
