#nullable enable
Hl7.Cql.Runtime.BaseTypeResolver
Hl7.Cql.Runtime.BaseTypeResolver.BaseTypeResolver() -> void
Hl7.Cql.Runtime.ContextEventArgs
Hl7.Cql.Runtime.ContextEventArgs.ContextEventArgs(object? state = null) -> void
Hl7.Cql.Runtime.ContextEventArgs.State.get -> object?
Hl7.Cql.Runtime.CqlContext
Hl7.Cql.Runtime.CqlContext.ContextEvent -> System.EventHandler<Hl7.Cql.Runtime.ContextEventArgs!>?
Hl7.Cql.Runtime.CqlContext.CqlContext(Hl7.Cql.Operators.ICqlOperators! operators, System.Collections.Generic.IDictionary<string!, object!>? parameters = null, Hl7.Cql.Runtime.DefinitionDictionary<System.Delegate!>? delegates = null) -> void
Hl7.Cql.Runtime.CqlContext.Definitions.get -> Hl7.Cql.Runtime.DefinitionDictionary<System.Delegate!>!
Hl7.Cql.Runtime.CqlContext.MessageReceived -> System.EventHandler<Hl7.Cql.Operators.MessageEventArgs!>?
Hl7.Cql.Runtime.CqlContext.Operators.get -> Hl7.Cql.Operators.ICqlOperators!
Hl7.Cql.Runtime.CqlContext.Parameters.get -> System.Collections.Generic.IDictionary<string!, object!>!
Hl7.Cql.Runtime.CqlContext.RaiseContextEvent(Hl7.Cql.Runtime.ContextEventArgs! eventData) -> Hl7.Cql.Runtime.CqlContext!
Hl7.Cql.Runtime.CqlContext.ResolveParameter(string! libraryNameAndVersion, string! parameterName, object? defaultValue) -> object?
Hl7.Cql.Runtime.DefinitionDictionary<T>
Hl7.Cql.Runtime.DefinitionDictionary<T>.Add(string! libraryName, string! definition, System.Type![]! signature, T! expression) -> void
Hl7.Cql.Runtime.DefinitionDictionary<T>.Add(string! libraryName, string! definition, T! expression) -> void
Hl7.Cql.Runtime.DefinitionDictionary<T>.AddTag(string! library, string! definition, System.Type![]! signature, string! name, params string![]! values) -> void
Hl7.Cql.Runtime.DefinitionDictionary<T>.ContainsKey(string? libraryName, string! definition) -> bool
Hl7.Cql.Runtime.DefinitionDictionary<T>.ContainsKey(string? libraryName, string! definition, System.Type![]! signature) -> bool
Hl7.Cql.Runtime.DefinitionDictionary<T>.ContainsLibrary(string! libraryName) -> bool
Hl7.Cql.Runtime.DefinitionDictionary<T>.DefinitionDictionary() -> void
Hl7.Cql.Runtime.DefinitionDictionary<T>.DefinitionsForLibrary(string? libraryName) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string!, System.Collections.Generic.List<(System.Type![]! Signature, T! T)>!>>!
Hl7.Cql.Runtime.DefinitionDictionary<T>.Libraries.get -> System.Collections.Generic.IEnumerable<string!>!
Hl7.Cql.Runtime.DefinitionDictionary<T>.Merge(params Hl7.Cql.Runtime.DefinitionDictionary<T!>![]! dictionaries) -> void
Hl7.Cql.Runtime.DefinitionDictionary<T>.Merge(string! libKey, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string!, System.Collections.Generic.List<(System.Type![]!, T!)>!>>! expressions) -> void
Hl7.Cql.Runtime.DefinitionDictionary<T>.this[string? libraryName, string! definition, params System.Type![]! signature].get -> T!
Hl7.Cql.Runtime.DefinitionDictionary<T>.this[string? libraryName, string! definition].get -> T!
Hl7.Cql.Runtime.DefinitionDictionary<T>.TryGetDefinesForLibrary(string? libraryName, out System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string!, T!>>? definitions) -> bool
Hl7.Cql.Runtime.DefinitionDictionary<T>.TryGetDefinitionsForLibrary(string? libraryName, out System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string!, System.Collections.Generic.List<(System.Type![]!, T!)>!>>? definitions) -> bool
Hl7.Cql.Runtime.DefinitionDictionary<T>.TryGetTags(string! library, string! definition, System.Type![]! signature, out System.Linq.ILookup<string!, string!>? tags) -> bool
Hl7.Cql.Runtime.DefinitionDictionary<T>.TryGetValue(string? libraryName, string! definition, out T? expression) -> bool
Hl7.Cql.Runtime.DefinitionDictionary<T>.TryGetValue(string? libraryName, string! definition, System.Type![]! signature, out T? expression) -> bool
override Hl7.Cql.Runtime.BaseTypeResolver.GetListElementType(System.Type! type, bool throwError = false) -> System.Type?
override Hl7.Cql.Runtime.BaseTypeResolver.ResolveType(string! typeSpecifier, bool throwError = true) -> System.Type?
readonly Hl7.Cql.Runtime.BaseTypeResolver.Types -> System.Collections.Generic.Dictionary<string!, System.Type!>!
virtual Hl7.Cql.Runtime.BaseTypeResolver.GetPropertyCore(System.Type! type, string! propertyName) -> System.Reflection.PropertyInfo?
