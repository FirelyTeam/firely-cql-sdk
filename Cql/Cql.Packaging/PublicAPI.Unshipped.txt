#nullable enable
Hl7.Cql.Packaging.AssemblyLoadContextExtensions
Hl7.Cql.Packaging.CqlTypeToFhirMapping
Hl7.Cql.Packaging.CqlTypeToFhirMapping.CqlType.get -> Hl7.Cql.Primitives.CqlPrimitiveType?
Hl7.Cql.Packaging.CqlTypeToFhirMapping.CqlType.init -> void
Hl7.Cql.Packaging.CqlTypeToFhirMapping.CqlTypeToFhirMapping(Hl7.Cql.Packaging.CqlTypeToFhirMapping! original) -> void
Hl7.Cql.Packaging.CqlTypeToFhirMapping.CqlTypeToFhirMapping(Hl7.Fhir.Model.FHIRAllTypes? FhirType, Hl7.Cql.Primitives.CqlPrimitiveType? CqlType, Hl7.Cql.Packaging.CqlTypeToFhirMapping? ElementType = null) -> void
Hl7.Cql.Packaging.CqlTypeToFhirMapping.Deconstruct(out Hl7.Fhir.Model.FHIRAllTypes? FhirType, out Hl7.Cql.Primitives.CqlPrimitiveType? CqlType, out Hl7.Cql.Packaging.CqlTypeToFhirMapping? ElementType) -> void
Hl7.Cql.Packaging.CqlTypeToFhirMapping.ElementType.get -> Hl7.Cql.Packaging.CqlTypeToFhirMapping?
Hl7.Cql.Packaging.CqlTypeToFhirMapping.ElementType.init -> void
Hl7.Cql.Packaging.CqlTypeToFhirMapping.FhirType.get -> Hl7.Fhir.Model.FHIRAllTypes?
Hl7.Cql.Packaging.CqlTypeToFhirMapping.FhirType.init -> void
Hl7.Cql.Packaging.CqlTypeToFhirTypeMapper
Hl7.Cql.Packaging.CqlTypeToFhirTypeMapper.CqlTypeToFhirTypeMapper(Hl7.Cql.Abstractions.TypeResolver! typeResolver) -> void
Hl7.Cql.Packaging.CqlTypeToFhirTypeMapper.CqlTypeToFhirTypeMapper(Hl7.Cql.Abstractions.TypeResolver! typeResolver, Hl7.Fhir.Introspection.ModelInspector! modelInspector) -> void
Hl7.Cql.Packaging.CqlTypeToFhirTypeMapper.TypeEntryFor(Hl7.Cql.Elm.Element! element) -> Hl7.Cql.Packaging.CqlTypeToFhirMapping?
Hl7.Cql.Packaging.CqlTypeToFhirTypeMapper.TypeEntryFor(Hl7.Cql.Elm.TypeSpecifier? resultTypeSpecifier) -> Hl7.Cql.Packaging.CqlTypeToFhirMapping?
Hl7.Cql.Packaging.CqlTypeToFhirTypeMapper.TypeEntryFor(Hl7.Cql.Primitives.CqlPrimitiveType cqlType, Hl7.Cql.Packaging.CqlTypeToFhirMapping? elementType = null) -> Hl7.Cql.Packaging.CqlTypeToFhirMapping?
Hl7.Cql.Packaging.CqlTypeToFhirTypeMapper.TypeEntryFor(Hl7.Fhir.Model.FHIRAllTypes fhirType) -> Hl7.Cql.Packaging.CqlTypeToFhirMapping?
Hl7.Cql.Packaging.CqlTypeToFhirTypeMapper.TypeEntryFor(string? name) -> Hl7.Cql.Packaging.CqlTypeToFhirMapping?
Hl7.Cql.Packaging.CqlTypeToFhirTypeMapper.TypeEntryFor(System.Type! type) -> Hl7.Cql.Packaging.CqlTypeToFhirMapping?
Hl7.Cql.Packaging.DataRequirementsAnalyzer
Hl7.Cql.Packaging.DataRequirementsAnalyzer.Analyze() -> System.Collections.Generic.IReadOnlyCollection<Hl7.Fhir.Model.DataRequirement!>!
Hl7.Cql.Packaging.DataRequirementsAnalyzer.DataRequirementsAnalyzer(Hl7.Cql.Compiler.LibrarySet! librarySet, Hl7.Cql.Elm.Library! library) -> void
Hl7.Cql.Packaging.PostProcessors.FhirResourceWriterOptions
Hl7.Cql.Packaging.PostProcessors.FhirResourceWriterOptions.FhirResourceWriterOptions() -> void
Hl7.Cql.Packaging.PostProcessors.FhirResourceWriterOptions.OutDirectory.get -> System.IO.DirectoryInfo?
Hl7.Cql.Packaging.PostProcessors.FhirResourceWriterOptions.OutDirectory.set -> void
Hl7.Cql.Packaging.PostProcessors.FhirResourceWriterOptions.OverrideDate.get -> System.DateTime?
Hl7.Cql.Packaging.PostProcessors.FhirResourceWriterOptions.OverrideDate.set -> void
override Hl7.Cql.Packaging.CqlTypeToFhirMapping.Equals(object? obj) -> bool
override Hl7.Cql.Packaging.CqlTypeToFhirMapping.GetHashCode() -> int
override Hl7.Cql.Packaging.CqlTypeToFhirMapping.ToString() -> string!
static Hl7.Cql.Packaging.AssemblyLoadContextExtensions.Run(this System.Runtime.Loader.AssemblyLoadContext! assemblyContext, string! library, string! version, Hl7.Cql.Runtime.CqlContext! ctx) -> System.Collections.Generic.IDictionary<string!, object?>!
static Hl7.Cql.Packaging.CqlTypeToFhirMapping.operator !=(Hl7.Cql.Packaging.CqlTypeToFhirMapping? left, Hl7.Cql.Packaging.CqlTypeToFhirMapping? right) -> bool
static Hl7.Cql.Packaging.CqlTypeToFhirMapping.operator ==(Hl7.Cql.Packaging.CqlTypeToFhirMapping? left, Hl7.Cql.Packaging.CqlTypeToFhirMapping? right) -> bool
static Hl7.Cql.Packaging.PostProcessors.FhirResourceWriterOptions.BindConfig(Hl7.Cql.Packaging.PostProcessors.FhirResourceWriterOptions! opt, Microsoft.Extensions.Configuration.IConfiguration! config) -> void
virtual Hl7.Cql.Packaging.CqlTypeToFhirMapping.<Clone>$() -> Hl7.Cql.Packaging.CqlTypeToFhirMapping!
virtual Hl7.Cql.Packaging.CqlTypeToFhirMapping.EqualityContract.get -> System.Type!
virtual Hl7.Cql.Packaging.CqlTypeToFhirMapping.Equals(Hl7.Cql.Packaging.CqlTypeToFhirMapping? other) -> bool
virtual Hl7.Cql.Packaging.CqlTypeToFhirMapping.PrintMembers(System.Text.StringBuilder! builder) -> bool
