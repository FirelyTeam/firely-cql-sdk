{
  "resourceType": "Library",
  "id": "FHIR347-0.1.021",
  "version": "0.1.021",
  "name": "FHIR347",
  "status": "active",
  "type": {
    "coding": [
      {
        "system": "http://terminology.hl7.org/CodeSystem/library-type",
        "code": "logic-library"
      }
    ]
  },
  "date": "1970-01-01T00:00:00.0000000Z",
  "relatedArtifact": [
    {
      "type": "depends-on",
      "resource": "FHIRHelpers-4.0.001"
    },
    {
      "type": "depends-on",
      "resource": "SupplementalDataElementsFHIR4-2.0.000"
    },
    {
      "type": "depends-on",
      "resource": "MATGlobalCommonFunctionsFHIR4-6.1.000"
    }
  ],
  "parameter": [
    {
      "name": "Measurement Period",
      "use": "in",
      "min": 1,
      "max": "1",
      "type": "Period"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Basic"
        }
      ],
      "name": "ASCVD Diagnosis or Procedure before End of Measurement Period",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Encounter"
        }
      ],
      "name": "Qualifying Encounter during Measurement Period",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "name": "Initial Population 1",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Denominator 1",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Patients Age 20 or Older at Start of Measurement Period",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Observation"
        }
      ],
      "name": "LDL Result Greater Than or Equal To 190",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Condition"
        }
      ],
      "name": "Hypercholesterolemia Diagnosis",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "name": "Patients Age 20 Years and Older with LDL Cholesterol Result Greater than or Equal to 190 or Hypercholesterolemia without ASCVD",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Initial Population 2",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Denominator 2",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Has Diabetes Diagnosis",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Patients Age 40 to 75 Years with Diabetes without ASCVD or LDL Greater than 190 or Hypercholesterolemia",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Initial Population 3",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Denominator 3",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Coding"
        }
      ],
      "name": "SDE Ethnicity",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Basic"
        }
      ],
      "name": "SDE Payer",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Coding"
        }
      ],
      "name": "SDE Race",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "name": "SDE Sex",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "code"
    },
    {
      "name": "Has Allergy to Statin",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Has Order or Receiving Hospice Care or Palliative Care",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Has Hepatitis or Liver Disease Diagnosis",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Has Statin Associated Muscle Symptoms",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Has ESRD Diagnosis",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Has Adverse Reaction to Statin",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Denominator Exceptions",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Denominator Exclusions",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "MedicationRequest"
        }
      ],
      "name": "Statin Therapy Ordered during Measurement Period",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "MedicationRequest"
        }
      ],
      "name": "Prescribed Statin Therapy Any Time during Measurement Period",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "name": "Numerator",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1240",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.21",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.73",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.666.5.694",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1138.566",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.204",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.44",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.103.12.1001",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.353",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.110.12.1024",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.67.1.101.1.269",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1572",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1584",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.100",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.46",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1573",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.42",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1574",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1575",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.403",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.101.12.1001",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.101.12.1008",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1576",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.600.1.1575",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.600.1.1579",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.67",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.600.1.1623",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.101.12.1025",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.101.12.1030",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.101.12.1026",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.101.12.1023",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.102",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1047.47",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1110.42",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1108.85",
      "use": "in",
      "type": "ValueSet"
    }
  ],
  "content": [
    {
      "id": "FHIR347-0.1.021+elm",
      "contentType": "application/elm+json",
      "data": ""
    },
    {
      "id": "FHIR347-0.1.021+cql",
      "contentType": "text/cql",
      "data": ""
    },
    {
      "id": "FHIR347-0.1.021+dll",
      "contentType": "application/octet-stream",
      "data": "
    },
    {
      "id": "FHIR347-0.1.021+csharp",
      "contentType": "text/plain",
      "data": ""
    }
  ]
}