{
  "resourceType": "Library",
  "id": "BCSEHEDISMY2022-1.0.0",
  "version": "1.0.0",
  "name": "BCSEHEDISMY2022",
  "status": "active",
  "type": {
    "coding": [
      {
        "system": "http://terminology.hl7.org/CodeSystem/library-type",
        "code": "logic-library"
      }
    ]
  },
  "date": "1970-01-01T00:00:00.0000000Z",
  "relatedArtifact": [
    {
      "type": "depends-on",
      "resource": "FHIRHelpers-4.0.001"
    },
    {
      "type": "depends-on",
      "resource": "NCQAHealthPlanEnrollment-1.0.0"
    },
    {
      "type": "depends-on",
      "resource": "NCQAStatus-1.0.0"
    },
    {
      "type": "depends-on",
      "resource": "NCQAFHIRBase-1.0.0"
    },
    {
      "type": "depends-on",
      "resource": "NCQAHospice-1.0.0"
    },
    {
      "type": "depends-on",
      "resource": "NCQAAdvancedIllnessandFrailty-1.0.0"
    },
    {
      "type": "depends-on",
      "resource": "NCQAPalliativeCare-1.0.0"
    }
  ],
  "parameter": [
    {
      "name": "Measurement Period",
      "use": "in",
      "min": 1,
      "max": "1",
      "type": "Period"
    },
    {
      "name": "October 1 Two Years Prior to the Measurement Period",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "dateTime"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "dateTime"
        }
      ],
      "name": "Participation Period",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "Period"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Coverage"
        }
      ],
      "name": "Member Coverage",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "name": "Enrolled During Participation Period",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Initial Population",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Denominator",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Condition"
        }
      ],
      "name": "Right Mastectomy Diagnosis",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Procedure"
        }
      ],
      "name": "Right Mastectomy Procedure",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Condition"
        }
      ],
      "name": "Left Mastectomy Diagnosis",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Procedure"
        }
      ],
      "name": "Left Mastectomy Procedure",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Condition"
        }
      ],
      "name": "Bilateral Mastectomy Diagnosis",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Procedure"
        }
      ],
      "name": "Bilateral Mastectomy Procedure",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "name": "Mastectomy Exclusion",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Exclusions",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Numerator",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "https://www.ncqa.org/fhir/valueset/2.16.840.1.113883.3.464.1004.1329",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "https://www.ncqa.org/fhir/valueset/2.16.840.1.113883.3.464.1004.1330",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "https://www.ncqa.org/fhir/valueset/2.16.840.1.113883.3.464.1004.1042",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "https://www.ncqa.org/fhir/valueset/2.16.840.1.113883.3.464.1004.1043",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "https://www.ncqa.org/fhir/valueset/2.16.840.1.113883.3.464.1004.1951",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "https://www.ncqa.org/fhir/valueset/2.16.840.1.113883.3.464.1004.1949",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "https://www.ncqa.org/fhir/valueset/2.16.840.1.113883.3.464.1004.1950",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "https://www.ncqa.org/fhir/valueset/2.16.840.1.113883.3.464.1004.1948",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "https://www.ncqa.org/fhir/valueset/2.16.840.1.113883.3.464.1004.1331",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "https://www.ncqa.org/fhir/valueset/2.16.840.1.113883.3.464.1004.1148",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "https://www.ncqa.org/fhir/valueset/2.16.840.1.113883.3.464.1004.1168",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "https://www.ncqa.org/fhir/valueset/2.16.840.1.113883.3.464.1004.1230",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "https://www.ncqa.org/fhir/valueset/2.16.840.1.113883.3.464.1004.1256",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "https://www.ncqa.org/fhir/valueset/2.16.840.1.113883.3.464.1004.1334",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "https://www.ncqa.org/fhir/valueset/2.16.840.1.113883.3.464.1004.1335",
      "use": "in",
      "type": "ValueSet"
    }
  ],
  "content": [
    {
      "id": "BCSEHEDISMY2022-1.0.0+elm",
      "contentType": "application/elm+json",
      "data": ""
    },
    {
      "id": "BCSEHEDISMY2022-1.0.0+cql",
      "contentType": "text/cql",
      "data": "bGlicmFyeSBCQ1NFSEVESVNNWTIwMjIgdmVyc2lvbiAnMS4wLjAnDQoNCnVzaW5nIEZISVIgdmVyc2lvbiAnNC4wLjEnDQoNCmluY2x1ZGUgRkhJUkhlbHBlcnMgdmVyc2lvbiAnNC4wLjAwMScgY2FsbGVkIEZISVJIZWxwZXJzDQppbmNsdWRlIE5DUUFIZWFsdGhQbGFuRW5yb2xsbWVudCB2ZXJzaW9uICcxLjAuMCcgY2FsbGVkIEVucm9sbG1lbnQNCmluY2x1ZGUgTkNRQVN0YXR1cyB2ZXJzaW9uICcxLjAuMCcgY2FsbGVkIFN0YXR1cw0KaW5jbHVkZSBOQ1FBRkhJUkJhc2UgdmVyc2lvbiAnMS4wLjAnIGNhbGxlZCBGSElSQmFzZQ0KaW5jbHVkZSBOQ1FBSG9zcGljZSB2ZXJzaW9uICcxLjAuMCcgY2FsbGVkIEhvc3BpY2UNCmluY2x1ZGUgTkNRQUFkdmFuY2VkSWxsbmVzc2FuZEZyYWlsdHkgdmVyc2lvbiAnMS4wLjAnIGNhbGxlZCBBZHZhbmNlZElsbG5lc3NGcmFpbHR5DQppbmNsdWRlIE5DUUFQYWxsaWF0aXZlQ2FyZSB2ZXJzaW9uICcxLjAuMCcgY2FsbGVkIFBhbGxpYXRpdmVDYXJlDQoNCnZhbHVlc2V0ICJBYnNlbmNlIG9mIExlZnQgQnJlYXN0IjogJ2h0dHBzOi8vd3d3Lm5jcWEub3JnL2ZoaXIvdmFsdWVzZXQvMi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwNC4xMzI5Jw0KdmFsdWVzZXQgIkFic2VuY2Ugb2YgUmlnaHQgQnJlYXN0IjogJ2h0dHBzOi8vd3d3Lm5jcWEub3JnL2ZoaXIvdmFsdWVzZXQvMi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwNC4xMzMwJw0KdmFsdWVzZXQgIkJpbGF0ZXJhbCBNYXN0ZWN0b215IjogJ2h0dHBzOi8vd3d3Lm5jcWEub3JnL2ZoaXIvdmFsdWVzZXQvMi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwNC4xMDQyJw0KdmFsdWVzZXQgIkJpbGF0ZXJhbCBNb2RpZmllciI6ICdodHRwczovL3d3dy5uY3FhLm9yZy9maGlyL3ZhbHVlc2V0LzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTA0MycNCnZhbHVlc2V0ICJDbGluaWNhbCBCaWxhdGVyYWwgTW9kaWZpZXIiOiAnaHR0cHM6Ly93d3cubmNxYS5vcmcvZmhpci92YWx1ZXNldC8yLjE2Ljg0MC4xLjExMzg4My4zLjQ2NC4xMDA0LjE5NTEnDQp2YWx1ZXNldCAiQ2xpbmljYWwgTGVmdCBNb2RpZmllciI6ICdodHRwczovL3d3dy5uY3FhLm9yZy9maGlyL3ZhbHVlc2V0LzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTk0OScNCnZhbHVlc2V0ICJDbGluaWNhbCBSaWdodCBNb2RpZmllciI6ICdodHRwczovL3d3dy5uY3FhLm9yZy9maGlyL3ZhbHVlc2V0LzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTk1MCcNCnZhbHVlc2V0ICJDbGluaWNhbCBVbmlsYXRlcmFsIE1hc3RlY3RvbXkiOiAnaHR0cHM6Ly93d3cubmNxYS5vcmcvZmhpci92YWx1ZXNldC8yLjE2Ljg0MC4xLjExMzg4My4zLjQ2NC4xMDA0LjE5NDgnDQp2YWx1ZXNldCAiSGlzdG9yeSBvZiBCaWxhdGVyYWwgTWFzdGVjdG9teSI6ICdodHRwczovL3d3dy5uY3FhLm9yZy9maGlyL3ZhbHVlc2V0LzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTMzMScNCnZhbHVlc2V0ICJMZWZ0IE1vZGlmaWVyIjogJ2h0dHBzOi8vd3d3Lm5jcWEub3JnL2ZoaXIvdmFsdWVzZXQvMi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwNC4xMTQ4Jw0KdmFsdWVzZXQgIk1hbW1vZ3JhcGh5IjogJ2h0dHBzOi8vd3d3Lm5jcWEub3JnL2ZoaXIvdmFsdWVzZXQvMi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwNC4xMTY4Jw0KdmFsdWVzZXQgIlJpZ2h0IE1vZGlmaWVyIjogJ2h0dHBzOi8vd3d3Lm5jcWEub3JnL2ZoaXIvdmFsdWVzZXQvMi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwNC4xMjMwJw0KdmFsdWVzZXQgIlVuaWxhdGVyYWwgTWFzdGVjdG9teSI6ICdodHRwczovL3d3dy5uY3FhLm9yZy9maGlyL3ZhbHVlc2V0LzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTI1NicNCnZhbHVlc2V0ICJVbmlsYXRlcmFsIE1hc3RlY3RvbXkgTGVmdCI6ICdodHRwczovL3d3dy5uY3FhLm9yZy9maGlyL3ZhbHVlc2V0LzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTMzNCcNCnZhbHVlc2V0ICJVbmlsYXRlcmFsIE1hc3RlY3RvbXkgUmlnaHQiOiAnaHR0cHM6Ly93d3cubmNxYS5vcmcvZmhpci92YWx1ZXNldC8yLjE2Ljg0MC4xLjExMzg4My4zLjQ2NC4xMDA0LjEzMzUnDQoNCnBhcmFtZXRlciAiTWVhc3VyZW1lbnQgUGVyaW9kIiBJbnRlcnZhbDxEYXRlVGltZT4NCg0KY29udGV4dCBQYXRpZW50DQoNCmRlZmluZSAiSW5pdGlhbCBQb3B1bGF0aW9uIjoNCiAgQWdlSW5ZZWFyc0F0KGRhdGUgZnJvbQ0KICAgIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIg0KICApaW4gSW50ZXJ2YWxbNTIsIDc0XQ0KICAgIGFuZCBQYXRpZW50LmdlbmRlci52YWx1ZSA9ICdmZW1hbGUnDQogICAgYW5kICJFbnJvbGxlZCBEdXJpbmcgUGFydGljaXBhdGlvbiBQZXJpb2QiDQoNCmRlZmluZSAiRW5yb2xsZWQgRHVyaW5nIFBhcnRpY2lwYXRpb24gUGVyaW9kIjoNCiAgRW5yb2xsbWVudC4iSGVhbHRoIFBsYW4gRW5yb2xsbWVudCBDcml0ZXJpYSIgKCAiTWVtYmVyIENvdmVyYWdlIiwgZGF0ZSBmcm9tDQogIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIiwgSW50ZXJ2YWxbZGF0ZSBmcm9tICJPY3RvYmVyIDEgVHdvIFllYXJzIFByaW9yIHRvIHRoZSBNZWFzdXJlbWVudCBQZXJpb2QiLCBkYXRlIGZyb20NCiAgZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiIC0gMiB5ZWFyc10sIDAgKQ0KICAgIGFuZCBFbnJvbGxtZW50LiJIZWFsdGggUGxhbiBFbnJvbGxtZW50IENyaXRlcmlhIiAoICJNZW1iZXIgQ292ZXJhZ2UiLCBkYXRlIGZyb20NCiAgICBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIsIEludGVydmFsW2RhdGUgZnJvbSBzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIiAtIDEgeWVhciwgZGF0ZSBmcm9tDQogICAgZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiIC0gMSB5ZWFyXSwgNDUgKQ0KICAgIGFuZCBFbnJvbGxtZW50LiJIZWFsdGggUGxhbiBFbnJvbGxtZW50IENyaXRlcmlhIiAoICJNZW1iZXIgQ292ZXJhZ2UiLCBkYXRlIGZyb20NCiAgICBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIsIEludGVydmFsW2RhdGUgZnJvbSBzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIiwgZGF0ZSBmcm9tDQogICAgZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiXSwgNDUgKQ0KDQpkZWZpbmUgIk1lbWJlciBDb3ZlcmFnZSI6DQogIFtDb3ZlcmFnZV0gQw0KICAgIHdoZXJlIEZISVJCYXNlLiJOb3JtYWxpemUgSW50ZXJ2YWwiICggQy5wZXJpb2QgKSBvdmVybGFwcyAiUGFydGljaXBhdGlvbiBQZXJpb2QiDQoNCmRlZmluZSAiUGFydGljaXBhdGlvbiBQZXJpb2QiOg0KICBJbnRlcnZhbFsiT2N0b2JlciAxIFR3byBZZWFycyBQcmlvciB0byB0aGUgTWVhc3VyZW1lbnQgUGVyaW9kIiwNCiAgZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiXQ0KDQpkZWZpbmUgIk9jdG9iZXIgMSBUd28gWWVhcnMgUHJpb3IgdG8gdGhlIE1lYXN1cmVtZW50IFBlcmlvZCI6DQogIERhdGVUaW1lKCh5ZWFyIGZyb20gc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIgLSAyKSwgMTAsIDEsIDAsIDAsIDAsIDAsIDApDQoNCmRlZmluZSAiRGVub21pbmF0b3IiOg0KICAiSW5pdGlhbCBQb3B1bGF0aW9uIg0KDQpkZWZpbmUgIkV4Y2x1c2lvbnMiOg0KICBIb3NwaWNlLiJIb3NwaWNlIEludGVydmVudGlvbiBvciBFbmNvdW50ZXIiDQogICAgb3IgIk1hc3RlY3RvbXkgRXhjbHVzaW9uIg0KICAgIG9yIEFkdmFuY2VkSWxsbmVzc0ZyYWlsdHkuIkFkdmFuY2VkIElsbG5lc3MgYW5kIEZyYWlsdHkgRXhjbHVzaW9uIE5vdCBJbmNsdWRpbmcgT3ZlciBBZ2UgODAiDQogICAgb3IgUGFsbGlhdGl2ZUNhcmUuIlBhbGxpYXRpdmUgQ2FyZSBPdmVybGFwcGluZyBQZXJpb2QiICggIk1lYXN1cmVtZW50IFBlcmlvZCIgKQ0KDQpkZWZpbmUgIk1hc3RlY3RvbXkgRXhjbHVzaW9uIjoNCiAgKCAoIGV4aXN0cyAiUmlnaHQgTWFzdGVjdG9teSBEaWFnbm9zaXMiDQogICAgICAgIG9yIGV4aXN0cyAiUmlnaHQgTWFzdGVjdG9teSBQcm9jZWR1cmUiDQogICAgKQ0KICAgICAgYW5kICggZXhpc3RzICJMZWZ0IE1hc3RlY3RvbXkgRGlhZ25vc2lzIg0KICAgICAgICAgIG9yIGV4aXN0cyAiTGVmdCBNYXN0ZWN0b215IFByb2NlZHVyZSINCiAgICAgICkNCiAgKQ0KICAgIG9yIGV4aXN0cyAiQmlsYXRlcmFsIE1hc3RlY3RvbXkgRGlhZ25vc2lzIg0KICAgIG9yIGV4aXN0cyAiQmlsYXRlcmFsIE1hc3RlY3RvbXkgUHJvY2VkdXJlIg0KDQpkZWZpbmUgIlJpZ2h0IE1hc3RlY3RvbXkgRGlhZ25vc2lzIjoNCiAgKCBTdGF0dXMuIkFjdGl2ZSBDb25kaXRpb24iICggW0NvbmRpdGlvbjogIkFic2VuY2Ugb2YgUmlnaHQgQnJlYXN0Il0gKSApIFJpZ2h0TWFzdGVjdG9teURpYWdub3Npcw0KICAgIHdoZXJlIEZISVJCYXNlLiJQcmV2YWxlbmNlIFBlcmlvZCIgKCBSaWdodE1hc3RlY3RvbXlEaWFnbm9zaXMgKSBzdGFydHMgb24gb3IgYmVmb3JlDQogICAgZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiDQoNCmRlZmluZSAiUmlnaHQgTWFzdGVjdG9teSBQcm9jZWR1cmUiOg0KICAoICggU3RhdHVzLiJDb21wbGV0ZWQgUHJvY2VkdXJlIiAoIFtQcm9jZWR1cmU6ICJVbmlsYXRlcmFsIE1hc3RlY3RvbXkgUmlnaHQiXSApICkNCiAgICB1bmlvbiAoICggU3RhdHVzLiJDb21wbGV0ZWQgUHJvY2VkdXJlIiAoIFtQcm9jZWR1cmU6ICJVbmlsYXRlcmFsIE1hc3RlY3RvbXkiXSApICkgVW5pbGF0ZXJhbE1hc3RlY3RvbXlQcm9jZWR1cmUNCiAgICAgICAgd2hlcmUgVW5pbGF0ZXJhbE1hc3RlY3RvbXlQcm9jZWR1cmUuYm9keVNpdGUgaW4gIlJpZ2h0IE1vZGlmaWVyIg0KICAgICkNCiAgICB1bmlvbiAoICggU3RhdHVzLiJDb21wbGV0ZWQgUHJvY2VkdXJlIiAoIFtQcm9jZWR1cmU6ICJDbGluaWNhbCBVbmlsYXRlcmFsIE1hc3RlY3RvbXkiXSApICkgQ2xpbmljYWxVbmlsYXRlcmFsTWFzdGVjdG9teVByb2NlZHVyZQ0KICAgICAgICB3aGVyZSBDbGluaWNhbFVuaWxhdGVyYWxNYXN0ZWN0b215UHJvY2VkdXJlLmJvZHlTaXRlIGluICJDbGluaWNhbCBSaWdodCBNb2RpZmllciINCiAgICApICkgUmlnaHRNYXN0ZWN0b215UHJvY2VkdXJlDQogICAgd2hlcmUgRkhJUkJhc2UuIk5vcm1hbGl6ZSBJbnRlcnZhbCIgKCBSaWdodE1hc3RlY3RvbXlQcm9jZWR1cmUucGVyZm9ybWVkICkgZW5kcyBvbiBvciBiZWZvcmUNCiAgICBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCINCg0KZGVmaW5lICJMZWZ0IE1hc3RlY3RvbXkgRGlhZ25vc2lzIjoNCiAgKCBTdGF0dXMuIkFjdGl2ZSBDb25kaXRpb24iICggW0NvbmRpdGlvbjogIkFic2VuY2Ugb2YgTGVmdCBCcmVhc3QiXSApICkgTGVmdE1hc3RlY3RvbXlEaWFnbm9zaXMNCiAgICB3aGVyZSBGSElSQmFzZS4iUHJldmFsZW5jZSBQZXJpb2QiICggTGVmdE1hc3RlY3RvbXlEaWFnbm9zaXMgKSBzdGFydHMgb24gb3IgYmVmb3JlDQogICAgZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiDQoNCmRlZmluZSAiTGVmdCBNYXN0ZWN0b215IFByb2NlZHVyZSI6DQogICggKCBTdGF0dXMuIkNvbXBsZXRlZCBQcm9jZWR1cmUiICggW1Byb2NlZHVyZTogIlVuaWxhdGVyYWwgTWFzdGVjdG9teSBMZWZ0Il0gKSApDQogICAgdW5pb24gKCAoIFN0YXR1cy4iQ29tcGxldGVkIFByb2NlZHVyZSIgKCBbUHJvY2VkdXJlOiAiVW5pbGF0ZXJhbCBNYXN0ZWN0b215Il0gKSApIFVuaWxhdGVyYWxNYXN0ZWN0b215UHJvY2VkdXJlDQogICAgICAgIHdoZXJlIFVuaWxhdGVyYWxNYXN0ZWN0b215UHJvY2VkdXJlLmJvZHlTaXRlIGluICJMZWZ0IE1vZGlmaWVyIg0KICAgICkNCiAgICB1bmlvbiAoICggU3RhdHVzLiJDb21wbGV0ZWQgUHJvY2VkdXJlIiAoIFtQcm9jZWR1cmU6ICJDbGluaWNhbCBVbmlsYXRlcmFsIE1hc3RlY3RvbXkiXSApICkgQ2xpbmljYWxVbmlsYXRlcmFsTWFzdGVjdG9teVByb2NlZHVyZQ0KICAgICAgICB3aGVyZSBDbGluaWNhbFVuaWxhdGVyYWxNYXN0ZWN0b215UHJvY2VkdXJlLmJvZHlTaXRlIGluICJDbGluaWNhbCBMZWZ0IE1vZGlmaWVyIg0KICAgICkgKSBMZWZ0TWFzdGVjdG9teVByb2NlZHVyZQ0KICAgIHdoZXJlIEZISVJCYXNlLiJOb3JtYWxpemUgSW50ZXJ2YWwiICggTGVmdE1hc3RlY3RvbXlQcm9jZWR1cmUucGVyZm9ybWVkICkgZW5kcyBvbiBvciBiZWZvcmUNCiAgICBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCINCg0KZGVmaW5lICJCaWxhdGVyYWwgTWFzdGVjdG9teSBEaWFnbm9zaXMiOg0KICAoIFN0YXR1cy4iQWN0aXZlIENvbmRpdGlvbiIgKCBbQ29uZGl0aW9uOiAiSGlzdG9yeSBvZiBCaWxhdGVyYWwgTWFzdGVjdG9teSJdICkgKSBCaWxhdGVyYWxNYXN0ZWN0b215SGlzdG9yeQ0KICAgIHdoZXJlIEZISVJCYXNlLiJQcmV2YWxlbmNlIFBlcmlvZCIgKCBCaWxhdGVyYWxNYXN0ZWN0b215SGlzdG9yeSApIHN0YXJ0cyBvbiBvciBiZWZvcmUNCiAgICBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCINCg0KZGVmaW5lICJCaWxhdGVyYWwgTWFzdGVjdG9teSBQcm9jZWR1cmUiOg0KICAoICggU3RhdHVzLiJDb21wbGV0ZWQgUHJvY2VkdXJlIiAoIFtQcm9jZWR1cmU6ICJCaWxhdGVyYWwgTWFzdGVjdG9teSJdICkgKQ0KICAgIHVuaW9uICggKCBTdGF0dXMuIkNvbXBsZXRlZCBQcm9jZWR1cmUiICggW1Byb2NlZHVyZTogIlVuaWxhdGVyYWwgTWFzdGVjdG9teSJdICkgKSBVbmlsYXRlcmFsTWFzdGVjdG9teVByb2NlZHVyZQ0KICAgICAgICB3aGVyZSBVbmlsYXRlcmFsTWFzdGVjdG9teVByb2NlZHVyZS5ib2R5U2l0ZSBpbiAiQmlsYXRlcmFsIE1vZGlmaWVyIg0KICAgICkNCiAgICB1bmlvbiAoICggU3RhdHVzLiJDb21wbGV0ZWQgUHJvY2VkdXJlIiAoIFtQcm9jZWR1cmU6ICJDbGluaWNhbCBVbmlsYXRlcmFsIE1hc3RlY3RvbXkiXSApICkgQ2xpbmljYWxVbmlsYXRlcmFsTWFzdGVjdG9teVByb2NlZHVyZQ0KICAgICAgICB3aGVyZSBDbGluaWNhbFVuaWxhdGVyYWxNYXN0ZWN0b215UHJvY2VkdXJlLmJvZHlTaXRlIGluICJDbGluaWNhbCBCaWxhdGVyYWwgTW9kaWZpZXIiDQogICAgKSApIEJpbGF0ZXJhbE1hc3RlY3RvbXlQZXJmb3JtZWQNCiAgICB3aGVyZSBGSElSQmFzZS4iTm9ybWFsaXplIEludGVydmFsIiAoIEJpbGF0ZXJhbE1hc3RlY3RvbXlQZXJmb3JtZWQucGVyZm9ybWVkICkgZW5kcyBvbiBvciBiZWZvcmUNCiAgICBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCINCg0KZGVmaW5lICJOdW1lcmF0b3IiOg0KICBleGlzdHMgKCBbT2JzZXJ2YXRpb246ICJNYW1tb2dyYXBoeSJdIE1hbW1vZ3JhbQ0KICAgICAgd2hlcmUgRkhJUkJhc2UuIk5vcm1hbGl6ZSBJbnRlcnZhbCIgKCBNYW1tb2dyYW0uZWZmZWN0aXZlICkgZW5kcyBkdXJpbmcgIlBhcnRpY2lwYXRpb24gUGVyaW9kIg0KICApDQo="
    },
    {
      "id": "BCSEHEDISMY2022-1.0.0+dll",
      "contentType": "application/octet-stream",
      "data": "
    },
    {
      "id": "BCSEHEDISMY2022-1.0.0+csharp",
      "contentType": "text/plain",
      "data": ""
    }
  ]
}