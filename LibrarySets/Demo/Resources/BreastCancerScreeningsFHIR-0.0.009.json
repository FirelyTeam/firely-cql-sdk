{
  "resourceType": "Library",
  "id": "BreastCancerScreeningsFHIR-0.0.009",
  "version": "0.0.009",
  "name": "BreastCancerScreeningsFHIR",
  "status": "active",
  "type": {
    "coding": [
      {
        "system": "http://terminology.hl7.org/CodeSystem/library-type",
        "code": "logic-library"
      }
    ]
  },
  "date": "1970-01-01T00:00:00.0000000Z",
  "relatedArtifact": [
    {
      "type": "depends-on",
      "resource": "FHIRHelpers-4.0.001"
    },
    {
      "type": "depends-on",
      "resource": "SupplementalDataElementsFHIR4-2.0.000"
    },
    {
      "type": "depends-on",
      "resource": "MATGlobalCommonFunctionsFHIR4-6.1.000"
    },
    {
      "type": "depends-on",
      "resource": "AdultOutpatientEncountersFHIR4-2.2.000"
    },
    {
      "type": "depends-on",
      "resource": "AdvancedIllnessandFrailtyExclusionECQMFHIR4-5.17.000"
    },
    {
      "type": "depends-on",
      "resource": "PalliativeCareFHIR-0.6.000"
    },
    {
      "type": "depends-on",
      "resource": "CumulativeMedicationDurationFHIR4-1.0.000"
    },
    {
      "type": "depends-on",
      "resource": "HospiceFHIR4-2.3.000"
    }
  ],
  "parameter": [
    {
      "name": "Measurement Period",
      "use": "in",
      "min": 0,
      "max": "1",
      "type": "Period"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Coding"
        }
      ],
      "name": "SDE Ethnicity",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Basic"
        }
      ],
      "name": "SDE Payer",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Coding"
        }
      ],
      "name": "SDE Race",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "name": "SDE Sex",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "code"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Encounter"
        }
      ],
      "name": "Telehealth Services",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "name": "Age at start of Measurement Period",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "integer"
    },
    {
      "name": "Initial Population",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Denominator",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Condition"
        }
      ],
      "name": "Right Mastectomy Diagnosis",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Procedure"
        }
      ],
      "name": "Right Mastectomy Procedure",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Condition"
        }
      ],
      "name": "Left Mastectomy Diagnosis",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Procedure"
        }
      ],
      "name": "Left Mastectomy Procedure",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Condition"
        }
      ],
      "name": "Bilateral Mastectomy Diagnosis",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Procedure"
        }
      ],
      "name": "Bilateral Mastectomy Procedure",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "name": "Denominator Exclusions",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Observation with status",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Diagnostic Report with status",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Numerator",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Final Numerator Population",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Observation without appropriate status",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Diagnostic Report without appropriate status",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1005",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1068",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.122.12.1036",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.108.11.1047",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.101.12.1089",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.122.12.1035",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1069",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1070",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.101.12.1080",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1133",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1134",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.12.1071",
      "use": "in",
      "type": "ValueSet"
    }
  ],
  "content": [
    {
      "id": "BreastCancerScreeningsFHIR-0.0.009+elm",
      "contentType": "application/elm+json",
      "data": ""
    },
    {
      "id": "BreastCancerScreeningsFHIR-0.0.009+cql",
      "contentType": "text/cql",
      "data": ""
    },
    {
      "id": "BreastCancerScreeningsFHIR-0.0.009+dll",
      "contentType": "application/octet-stream",
      "data": "
    },
    {
      "id": "BreastCancerScreeningsFHIR-0.0.009+csharp",
      "contentType": "text/plain",
      "data": ""
    }
  ]
}