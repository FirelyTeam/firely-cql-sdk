{
  "resourceType": "Library",
  "id": "DRCommunicationWithPhysicianManagingDiabetesFHIR-0.0.004",
  "version": "0.0.004",
  "name": "DRCommunicationWithPhysicianManagingDiabetesFHIR",
  "status": "active",
  "type": {
    "coding": [
      {
        "system": "http://terminology.hl7.org/CodeSystem/library-type",
        "code": "logic-library"
      }
    ]
  },
  "date": "1970-01-01T00:00:00.0000000Z",
  "relatedArtifact": [
    {
      "type": "depends-on",
      "resource": "FHIRHelpers-4.0.001"
    },
    {
      "type": "depends-on",
      "resource": "SupplementalDataElementsFHIR4-2.0.000"
    },
    {
      "type": "depends-on",
      "resource": "MATGlobalCommonFunctionsFHIR4-6.1.000"
    }
  ],
  "parameter": [
    {
      "name": "Measurement Period",
      "use": "in",
      "min": 1,
      "max": "1",
      "type": "Period"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Coding"
        }
      ],
      "name": "SDE Ethnicity",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Basic"
        }
      ],
      "name": "SDE Payer",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Coding"
        }
      ],
      "name": "SDE Race",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "name": "SDE Sex",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "code"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Encounter"
        }
      ],
      "name": "Qualifying Encounter During Measurement Period",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Encounter"
        }
      ],
      "name": "Diabetic Retinopathy Encounter",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Communication"
        }
      ],
      "name": "Medical or Patient Reason for Not Communicating Level of Severity of Retinopathy",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Communication"
        }
      ],
      "name": "Medical or Patient Reason for Not Communicating Absence of Macular Edema",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Communication"
        }
      ],
      "name": "Medical or Patient Reason for Not Communicating Presence of Macular Edema",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "name": "Denominator Exceptions",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Initial Population",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Observation"
        }
      ],
      "name": "Macular Exam Performed",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "name": "Denominator",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Communication"
        }
      ],
      "name": "Level of Severity of Retinopathy Findings Communicated",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Communication"
        }
      ],
      "name": "Macular Edema Absence Communicated",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Communication"
        }
      ],
      "name": "Macular Edema Presence Communicated",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "name": "Results of Dilated Macular or Fundus Exam Communicated",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "Numerator",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "boolean"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.101.12.1014",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.327",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1283",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1320",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1251",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1007",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.101.12.1012",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.101.12.1001",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1285",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.101.12.1008",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1008",
      "use": "in",
      "type": "ValueSet"
    }
  ],
  "content": [
    {
      "id": "DRCommunicationWithPhysicianManagingDiabetesFHIR-0.0.004+elm",
      "contentType": "application/elm+json",
      "data": ""
    },
    {
      "id": "DRCommunicationWithPhysicianManagingDiabetesFHIR-0.0.004+cql",
      "contentType": "text/cql",
      "data": ""
    },
    {
      "id": "DRCommunicationWithPhysicianManagingDiabetesFHIR-0.0.004+dll",
      "contentType": "application/octet-stream",
      "data": "
    },
    {
      "id": "DRCommunicationWithPhysicianManagingDiabetesFHIR-0.0.004+csharp",
      "contentType": "text/plain",
      "data": ""
    }
  ]
}