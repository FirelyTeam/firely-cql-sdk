# Repo: FirelyTeam/azure-pipeline-templates
# File: build.yml

parameters:
  # Default values
  dotNetCoreVersion: '3.1.102' # can also be use with wildcards:  latest minor version of 3. , use '3.x'
  useVersionSuffix: true
  restoreDependencies: false
  nuGetServiceConnections: #required when restoreDependies = true
  nuGetSources: #required when restoreDependies = true
  packageArtifacts: false
  publishArtifacts: false
  packageArtifactName: 'NuGetPackages'
  publishWebProjects: false
  zipAfterPublish: false
  checkoutSubmodules: true
  pool: {}
  solutionFile: 'Cql-Sdk-All.sln' # also in build.yml and package.yml

jobs:
- job: Build
  pool: ${{ parameters.pool }}
  steps:
  - task: DotNetCoreInstaller@2
    inputs:
      version: ${{ parameters.dotNetCoreVersion }}

  - ${{ if eq(parameters.checkoutSubmodules, 'true') }}:
    # enable long paths, especially on submodules
    - task: CmdLine@2
      displayName: 'Enable long paths for git'
      inputs:
        script: |
            git config --system core.longpaths true
    - checkout: self
      displayName: 'Checking out repo'
      submodules: true

  - ${{ if eq(parameters.restoreDependencies, 'true') }}:
    - template: restore.yml@templates
      parameters:
        nuGetServiceConnections: ${{ parameters.nuGetServiceConnections }}
        nuGetSources: ${{ parameters.nuGetSources }}

  # To rebuild projects (and not just restore dependencies), use the --no-incremental flag)
  # Before this can be done, the java tooling needs to be included to rebuild the demo projects

  - script: dotnet build ${{ parameters.solutionFile }} --configuration $(buildConfiguration) --version-suffix $(build.buildNumber) --no-restore /p:ContinuousIntegrationBuild=true
    displayName: 'dotnet build $(buildConfiguration) with version suffix, no restorel'
    condition: and(succeeded(), and(eq('${{ parameters.useVersionSuffix }}', 'true'), eq('${{ parameters.restoreDependencies }}', 'true')))

  - script: dotnet build ${{ parameters.solutionFile }} --configuration $(buildConfiguration) --version-suffix $(build.buildNumber) /p:ContinuousIntegrationBuild=true
    displayName: 'dotnet build $(buildConfiguration) with version suffixl'
    condition: and(succeeded(), and(eq('${{ parameters.useVersionSuffix }}', 'true'), eq('${{ parameters.restoreDependencies }}', 'false')))

  - script: dotnet build ${{ parameters.solutionFile }} --configuration $(buildConfiguration) /p:ContinuousIntegrationBuild=true
    displayName: 'dotnet build $(buildConfiguration)'
    condition: and(succeeded(), eq('${{ parameters.useVersionSuffix }}', 'false'))

  - task: DotNetCoreCLI@2
    displayName: 'dotnet test UnitTests'
    inputs:
      command: test
      projects: '**/*Tests/*Tests.csproj;!**/Ncqa.HT.DeckTests.csproj'
      arguments: '--configuration $(buildConfiguration) --no-build --no-restore'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet test Integration Tests against CMS Meassures'
    inputs:
      command: test
      projects: 'submodules\Firely.Cql.Sdk.Integration.Runner\IntegrationRunner\IntegrationRunner.csproj'
      arguments: '--configuration $(buildConfiguration) --no-build --no-restore'

  - template: sign-dlls-template.yml

  - ${{ if eq(parameters.packageArtifacts, 'true') }}:
    - template: package.yml
      parameters:
        artifactName: ${{parameters.packageArtifactName}}
        useVersionSuffix: ${{ parameters.useVersionSuffix }}

  - ${{ if eq(parameters.publishArtifacts, 'true') }}:
    - template: publish.yml
      parameters:
        useVersionSuffix: ${{ parameters.useVersionSuffix }}
        publishWebProjects: ${{ parameters.publishWebProjects }}
        zipAfterPublish: ${{ parameters.zipAfterPublish }}
