{
  "resourceType": "Library",
  "id": "CQMCommon-2.0.000",
  "url": "https://fire.ly/fhir/Library/CQMCommon-2.0.000",
  "version": "2.0.000",
  "name": "CQMCommon",
  "status": "active",
  "type": {
    "coding": [
      {
        "system": "http://terminology.hl7.org/CodeSystem/library-type",
        "code": "logic-library"
      }
    ]
  },
  "date": "1970-01-01T00:00:00.0000000Z",
  "relatedArtifact": [
    {
      "type": "depends-on",
      "resource": "FHIRHelpers-4.3.000"
    },
    {
      "type": "depends-on",
      "resource": "QICoreCommon-2.0.000"
    }
  ],
  "parameter": [
    {
      "name": "Measurement Period",
      "use": "in",
      "min": 0,
      "max": "1",
      "type": "Period"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Encounter"
        }
      ],
      "name": "Inpatient Encounter",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.292",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.666.5.307",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1029.206",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1111.143",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1110.38",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1147.197",
      "use": "in",
      "type": "ValueSet"
    }
  ],
  "content": [
    {
      "id": "CQMCommon-2.0.000+elm",
      "contentType": "application/elm+json",
      "data": "{
   "library" : {
      "annotation" : [ {
         "translatorVersion" : "3.1.0",
         "translatorOptions" : "EnableLocators,EnableResultTypes",
         "type" : "CqlToElmInfo"
      }, {
         "type" : "Annotation",
         "t" : [ {
            "name" : "update",
            "value" : "JKR 2023-10-20 ->\nIncrement QICore version"
         } ]
      } ],
      "identifier" : {
         "id" : "CQMCommon",
         "version" : "2.0.000"
      },
      "schemaIdentifier" : {
         "id" : "urn:hl7-org:elm",
         "version" : "r1"
      },
      "usings" : {
         "def" : [ {
            "localIdentifier" : "System",
            "uri" : "urn:hl7-org:elm-types:r1"
         }, {
            "locator" : "8:1-8:28",
            "localIdentifier" : "QICore",
            "uri" : "http://hl7.org/fhir"
         } ]
      },
      "includes" : {
         "def" : [ {
            "locator" : "10:1-10:56",
            "localIdentifier" : "FHIRHelpers",
            "path" : "FHIRHelpers",
            "version" : "4.3.000"
         }, {
            "locator" : "11:1-11:58",
            "localIdentifier" : "QICoreCommon",
            "path" : "QICoreCommon",
            "version" : "2.0.000"
         } ]
      },
      "parameters" : {
         "def" : [ {
            "locator" : "20:1-21:66",
            "name" : "Measurement Period",
            "accessLevel" : "Public",
            "resultTypeSpecifier" : {
               "type" : "IntervalTypeSpecifier",
               "pointType" : {
                  "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "type" : "NamedTypeSpecifier"
               }
            },
            "default" : {
               "locator" : "21:11-21:66",
               "lowClosed" : true,
               "highClosed" : false,
               "type" : "Interval",
               "resultTypeSpecifier" : {
                  "type" : "IntervalTypeSpecifier",
                  "pointType" : {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               },
               "low" : {
                  "locator" : "21:20-21:41",
                  "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "type" : "DateTime",
                  "year" : {
                     "valueType" : "{urn:hl7-org:elm-types:r1}Integer",
                     "value" : "2025",
                     "type" : "Literal"
                  },
                  "month" : {
                     "valueType" : "{urn:hl7-org:elm-types:r1}Integer",
                     "value" : "1",
                     "type" : "Literal"
                  },
                  "day" : {
                     "valueType" : "{urn:hl7-org:elm-types:r1}Integer",
                     "value" : "1",
                     "type" : "Literal"
                  },
                  "hour" : {
                     "valueType" : "{urn:hl7-org:elm-types:r1}Integer",
                     "value" : "0",
                     "type" : "Literal"
                  },
                  "minute" : {
                     "valueType" : "{urn:hl7-org:elm-types:r1}Integer",
                     "value" : "0",
                     "type" : "Literal"
                  },
                  "second" : {
                     "valueType" : "{urn:hl7-org:elm-types:r1}Integer",
                     "value" : "0",
                     "type" : "Literal"
                  },
                  "millisecond" : {
                     "valueType" : "{urn:hl7-org:elm-types:r1}Integer",
                     "value" : "0",
                     "type" : "Literal"
                  }
               },
               "high" : {
                  "locator" : "21:44-21:65",
                  "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "type" : "DateTime",
                  "year" : {
                     "valueType" : "{urn:hl7-org:elm-types:r1}Integer",
                     "value" : "2026",
                     "type" : "Literal"
                  },
                  "month" : {
                     "valueType" : "{urn:hl7-org:elm-types:r1}Integer",
                     "value" : "1",
                     "type" : "Literal"
                  },
                  "day" : {
                     "valueType" : "{urn:hl7-org:elm-types:r1}Integer",
                     "value" : "1",
                     "type" : "Literal"
                  },
                  "hour" : {
                     "valueType" : "{urn:hl7-org:elm-types:r1}Integer",
                     "value" : "0",
                     "type" : "Literal"
                  },
                  "minute" : {
                     "valueType" : "{urn:hl7-org:elm-types:r1}Integer",
                     "value" : "0",
                     "type" : "Literal"
                  },
                  "second" : {
                     "valueType" : "{urn:hl7-org:elm-types:r1}Integer",
                     "value" : "0",
                     "type" : "Literal"
                  },
                  "millisecond" : {
                     "valueType" : "{urn:hl7-org:elm-types:r1}Integer",
                     "value" : "0",
                     "type" : "Literal"
                  }
               }
            },
            "parameterTypeSpecifier" : {
               "locator" : "20:32-20:49",
               "type" : "IntervalTypeSpecifier",
               "resultTypeSpecifier" : {
                  "type" : "IntervalTypeSpecifier",
                  "pointType" : {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               },
               "pointType" : {
                  "locator" : "20:41-20:48",
                  "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "type" : "NamedTypeSpecifier"
               }
            }
         } ]
      },
      "valueSets" : {
         "def" : [ {
            "locator" : "13:1-13:111",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}ValueSet",
            "name" : "Emergency Department Visit",
            "id" : "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.292",
            "accessLevel" : "Public"
         }, {
            "locator" : "14:1-14:100",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}ValueSet",
            "name" : "Encounter Inpatient",
            "id" : "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.666.5.307",
            "accessLevel" : "Public"
         }, {
            "locator" : "15:1-15:101",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}ValueSet",
            "name" : "Intensive Care Unit",
            "id" : "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1029.206",
            "accessLevel" : "Public"
         }, {
            "locator" : "16:1-16:102",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}ValueSet",
            "name" : "Observation Services",
            "id" : "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1111.143",
            "accessLevel" : "Public"
         }, {
            "locator" : "17:1-17:107",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}ValueSet",
            "name" : "Outpatient Surgery Service",
            "id" : "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1110.38",
            "accessLevel" : "Public"
         }, {
            "locator" : "18:1-18:129",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}ValueSet",
            "name" : "Present on Admission or Clinically Undetermined",
            "id" : "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1147.197",
            "accessLevel" : "Public"
         } ]
      },
      "contexts" : {
         "def" : [ {
            "locator" : "23:1-23:15",
            "name" : "Patient"
         } ]
      },
      "statements" : {
         "def" : [ {
            "locator" : "23:1-23:15",
            "name" : "Patient",
            "context" : "Patient",
            "expression" : {
               "type" : "SingletonFrom",
               "operand" : {
                  "locator" : "23:1-23:15",
                  "dataType" : "{http://hl7.org/fhir}Patient",
                  "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-patient",
                  "type" : "Retrieve"
               }
            }
         }, {
            "locator" : "25:1-28:71",
            "name" : "Inpatient Encounter",
            "context" : "Patient",
            "accessLevel" : "Public",
            "resultTypeSpecifier" : {
               "type" : "ListTypeSpecifier",
               "elementType" : {
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            },
            "expression" : {
               "locator" : "26:3-28:71",
               "type" : "Query",
               "resultTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Encounter",
                     "type" : "NamedTypeSpecifier"
                  }
               },
               "source" : [ {
                  "locator" : "26:3-26:55",
                  "alias" : "EncounterInpatient",
                  "resultTypeSpecifier" : {
                     "type" : "ListTypeSpecifier",
                     "elementType" : {
                        "name" : "{http://hl7.org/fhir}Encounter",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "expression" : {
                     "locator" : "26:3-26:36",
                     "dataType" : "{http://hl7.org/fhir}Encounter",
                     "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter",
                     "codeProperty" : "type",
                     "codeComparator" : "in",
                     "type" : "Retrieve",
                     "resultTypeSpecifier" : {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Encounter",
                           "type" : "NamedTypeSpecifier"
                        }
                     },
                     "codes" : {
                        "locator" : "26:15-26:35",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}ValueSet",
                        "name" : "Encounter Inpatient",
                        "preserve" : true,
                        "type" : "ValueSetRef"
                     }
                  }
               } ],
               "relationship" : [ ],
               "where" : {
                  "locator" : "27:3-28:71",
                  "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                  "type" : "And",
                  "signature" : [ {
                     "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                     "type" : "NamedTypeSpecifier"
                  }, {
                     "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                     "type" : "NamedTypeSpecifier"
                  } ],
                  "operand" : [ {
                     "locator" : "27:9-27:46",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                     "type" : "Equal",
                     "signature" : [ {
                        "name" : "{urn:hl7-org:elm-types:r1}String",
                        "type" : "NamedTypeSpecifier"
                     }, {
                        "name" : "{urn:hl7-org:elm-types:r1}String",
                        "type" : "NamedTypeSpecifier"
                     } ],
                     "operand" : [ {
                        "locator" : "27:9-27:33",
                        "resultTypeName" : "{http://hl7.org/fhir}EncounterStatus",
                        "path" : "value",
                        "type" : "Property",
                        "source" : {
                           "path" : "status",
                           "scope" : "EncounterInpatient",
                           "type" : "Property"
                        }
                     }, {
                        "locator" : "27:37-27:46",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                        "valueType" : "{urn:hl7-org:elm-types:r1}String",
                        "value" : "finished",
                        "type" : "Literal"
                     } ]
                  }, {
                     "locator" : "28:7-28:71",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                     "precision" : "Day",
                     "type" : "In",
                     "signature" : [ {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }, {
                        "type" : "IntervalTypeSpecifier",
                        "pointType" : {
                           "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "NamedTypeSpecifier"
                        }
                     } ],
                     "operand" : [ {
                        "locator" : "28:33-28:36",
                        "type" : "End",
                        "signature" : [ {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "operand" : {
                           "locator" : "28:7-28:31",
                           "name" : "ToInterval",
                           "libraryName" : "FHIRHelpers",
                           "type" : "FunctionRef",
                           "resultTypeSpecifier" : {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "operand" : [ {
                              "path" : "period",
                              "scope" : "EncounterInpatient",
                              "type" : "Property"
                           } ]
                        }
                     }, {
                        "locator" : "28:52-28:71",
                        "name" : "Measurement Period",
                        "type" : "ParameterRef",
                        "resultTypeSpecifier" : {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        }
                     } ]
                  } ]
               }
            }
         }, {
            "locator" : "37:1-38:62",
            "name" : "ToDateInterval",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns an interval of date values extracted from the input interval of date-time values"
               }, {
                  "name" : "comment",
                  "value" : "This function returns an interval constructed using the `date from` extractor on the start\nand end values of the input date-time interval. Note that using a precision specifier such as `day of`\nas part of a timing phrase is preferred to communicate intent to perform day-level comparison, as well\nas for general readability."
               } ]
            } ],
            "resultTypeSpecifier" : {
               "type" : "IntervalTypeSpecifier",
               "pointType" : {
                  "name" : "{urn:hl7-org:elm-types:r1}Date",
                  "type" : "NamedTypeSpecifier"
               }
            },
            "expression" : {
               "locator" : "38:3-38:62",
               "lowClosed" : true,
               "highClosed" : true,
               "type" : "Interval",
               "resultTypeSpecifier" : {
                  "type" : "IntervalTypeSpecifier",
                  "pointType" : {
                     "name" : "{urn:hl7-org:elm-types:r1}Date",
                     "type" : "NamedTypeSpecifier"
                  }
               },
               "low" : {
                  "locator" : "38:12-38:36",
                  "resultTypeName" : "{urn:hl7-org:elm-types:r1}Date",
                  "type" : "DateFrom",
                  "signature" : [ {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  } ],
                  "operand" : {
                     "locator" : "38:22-38:36",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "Start",
                     "signature" : [ {
                        "type" : "IntervalTypeSpecifier",
                        "pointType" : {
                           "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "NamedTypeSpecifier"
                        }
                     } ],
                     "operand" : {
                        "locator" : "38:31-38:36",
                        "name" : "period",
                        "type" : "OperandRef",
                        "resultTypeSpecifier" : {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        }
                     }
                  }
               },
               "high" : {
                  "locator" : "38:39-38:61",
                  "resultTypeName" : "{urn:hl7-org:elm-types:r1}Date",
                  "type" : "DateFrom",
                  "signature" : [ {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  } ],
                  "operand" : {
                     "locator" : "38:49-38:61",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "End",
                     "signature" : [ {
                        "type" : "IntervalTypeSpecifier",
                        "pointType" : {
                           "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "NamedTypeSpecifier"
                        }
                     } ],
                     "operand" : {
                        "locator" : "38:56-38:61",
                        "name" : "period",
                        "type" : "OperandRef",
                        "resultTypeSpecifier" : {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        }
                     }
                  }
               }
            },
            "operand" : [ {
               "name" : "period",
               "operandTypeSpecifier" : {
                  "locator" : "37:41-37:58",
                  "type" : "IntervalTypeSpecifier",
                  "resultTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "pointType" : {
                     "locator" : "37:50-37:57",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            } ]
         }, {
            "locator" : "44:1-45:60",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}Integer",
            "name" : "LengthInDays",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Calculates the difference in calendar days between the start and end of the given interval."
               }, {
                  "name" : "deprecated",
                  "value" : "This function in deprecated. Use the fluent function `lengthInDays()` instead."
               } ]
            } ],
            "expression" : {
               "locator" : "45:3-45:60",
               "resultTypeName" : "{urn:hl7-org:elm-types:r1}Integer",
               "precision" : "Day",
               "type" : "DifferenceBetween",
               "signature" : [ {
                  "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "type" : "NamedTypeSpecifier"
               }, {
                  "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "type" : "NamedTypeSpecifier"
               } ],
               "operand" : [ {
                  "locator" : "45:30-45:43",
                  "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "type" : "Start",
                  "signature" : [ {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  } ],
                  "operand" : {
                     "locator" : "45:39-45:43",
                     "name" : "Value",
                     "type" : "OperandRef",
                     "resultTypeSpecifier" : {
                        "type" : "IntervalTypeSpecifier",
                        "pointType" : {
                           "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "NamedTypeSpecifier"
                        }
                     }
                  }
               }, {
                  "locator" : "45:49-45:60",
                  "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "type" : "End",
                  "signature" : [ {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  } ],
                  "operand" : {
                     "locator" : "45:56-45:60",
                     "name" : "Value",
                     "type" : "OperandRef",
                     "resultTypeSpecifier" : {
                        "type" : "IntervalTypeSpecifier",
                        "pointType" : {
                           "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "NamedTypeSpecifier"
                        }
                     }
                  }
               } ]
            },
            "operand" : [ {
               "name" : "Value",
               "operandTypeSpecifier" : {
                  "locator" : "44:38-44:55",
                  "type" : "IntervalTypeSpecifier",
                  "resultTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "pointType" : {
                     "locator" : "44:47-44:54",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            } ]
         }, {
            "locator" : "50:1-51:60",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}Integer",
            "name" : "lengthInDays",
            "context" : "Patient",
            "accessLevel" : "Public",
            "fluent" : true,
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Calculates the difference in calendar days between the start and end of the given interval."
               } ]
            } ],
            "expression" : {
               "locator" : "51:3-51:60",
               "resultTypeName" : "{urn:hl7-org:elm-types:r1}Integer",
               "precision" : "Day",
               "type" : "DifferenceBetween",
               "signature" : [ {
                  "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "type" : "NamedTypeSpecifier"
               }, {
                  "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "type" : "NamedTypeSpecifier"
               } ],
               "operand" : [ {
                  "locator" : "51:30-51:43",
                  "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "type" : "Start",
                  "signature" : [ {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  } ],
                  "operand" : {
                     "locator" : "51:39-51:43",
                     "name" : "Value",
                     "type" : "OperandRef",
                     "resultTypeSpecifier" : {
                        "type" : "IntervalTypeSpecifier",
                        "pointType" : {
                           "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "NamedTypeSpecifier"
                        }
                     }
                  }
               }, {
                  "locator" : "51:49-51:60",
                  "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "type" : "End",
                  "signature" : [ {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  } ],
                  "operand" : {
                     "locator" : "51:56-51:60",
                     "name" : "Value",
                     "type" : "OperandRef",
                     "resultTypeSpecifier" : {
                        "type" : "IntervalTypeSpecifier",
                        "pointType" : {
                           "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "NamedTypeSpecifier"
                        }
                     }
                  }
               } ]
            },
            "operand" : [ {
               "name" : "Value",
               "operandTypeSpecifier" : {
                  "locator" : "50:43-50:60",
                  "type" : "IntervalTypeSpecifier",
                  "resultTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "pointType" : {
                     "locator" : "50:52-50:59",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               }
            } ]
         }, {
            "locator" : "57:1-63:5",
            "resultTypeName" : "{http://hl7.org/fhir}Encounter",
            "name" : "ED Visit",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns the most recent emergency department visit, if any, that occurs 1 hour or less prior to the given encounter."
               }, {
                  "name" : "deprecated",
                  "value" : "This function is deprecated. Use the fluent function `edVisit()` instead."
               } ]
            } ],
            "expression" : {
               "locator" : "58:3-63:5",
               "resultTypeName" : "{http://hl7.org/fhir}Encounter",
               "type" : "Last",
               "signature" : [ {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Encounter",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "source" : {
                  "locator" : "59:5-62:27",
                  "type" : "Query",
                  "resultTypeSpecifier" : {
                     "type" : "ListTypeSpecifier",
                     "elementType" : {
                        "name" : "{http://hl7.org/fhir}Encounter",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "source" : [ {
                     "locator" : "59:5-59:53",
                     "alias" : "EDVisit",
                     "resultTypeSpecifier" : {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Encounter",
                           "type" : "NamedTypeSpecifier"
                        }
                     },
                     "expression" : {
                        "locator" : "59:5-59:45",
                        "dataType" : "{http://hl7.org/fhir}Encounter",
                        "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter",
                        "codeProperty" : "type",
                        "codeComparator" : "in",
                        "type" : "Retrieve",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "codes" : {
                           "locator" : "59:17-59:44",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}ValueSet",
                           "name" : "Emergency Department Visit",
                           "preserve" : true,
                           "type" : "ValueSetRef"
                        }
                     }
                  } ],
                  "relationship" : [ ],
                  "where" : {
                     "locator" : "60:7-61:88",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                     "type" : "And",
                     "signature" : [ {
                        "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                        "type" : "NamedTypeSpecifier"
                     }, {
                        "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                        "type" : "NamedTypeSpecifier"
                     } ],
                     "operand" : [ {
                        "locator" : "60:13-60:39",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                        "type" : "Equal",
                        "signature" : [ {
                           "name" : "{urn:hl7-org:elm-types:r1}String",
                           "type" : "NamedTypeSpecifier"
                        }, {
                           "name" : "{urn:hl7-org:elm-types:r1}String",
                           "type" : "NamedTypeSpecifier"
                        } ],
                        "operand" : [ {
                           "locator" : "60:13-60:26",
                           "resultTypeName" : "{http://hl7.org/fhir}EncounterStatus",
                           "path" : "value",
                           "type" : "Property",
                           "source" : {
                              "path" : "status",
                              "scope" : "EDVisit",
                              "type" : "Property"
                           }
                        }, {
                           "locator" : "60:30-60:39",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                           "valueType" : "{urn:hl7-org:elm-types:r1}String",
                           "value" : "finished",
                           "type" : "Literal"
                        } ]
                     }, {
                        "locator" : "61:13-61:88",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                        "type" : "And",
                        "signature" : [ {
                           "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                           "type" : "NamedTypeSpecifier"
                        }, {
                           "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                           "type" : "NamedTypeSpecifier"
                        } ],
                        "operand" : [ {
                           "locator" : "61:33-61:46",
                           "type" : "In",
                           "signature" : [ {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }, {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           } ],
                           "operand" : [ {
                              "locator" : "61:28-61:31",
                              "type" : "End",
                              "signature" : [ {
                                 "type" : "IntervalTypeSpecifier",
                                 "pointType" : {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              } ],
                              "operand" : {
                                 "locator" : "61:13-61:26",
                                 "name" : "ToInterval",
                                 "libraryName" : "FHIRHelpers",
                                 "type" : "FunctionRef",
                                 "resultTypeSpecifier" : {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 },
                                 "operand" : [ {
                                    "path" : "period",
                                    "scope" : "EDVisit",
                                    "type" : "Property"
                                 } ]
                              }
                           }, {
                              "locator" : "61:33-61:46",
                              "lowClosed" : true,
                              "highClosed" : true,
                              "type" : "Interval",
                              "resultTypeSpecifier" : {
                                 "type" : "IntervalTypeSpecifier",
                                 "pointType" : {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "low" : {
                                 "locator" : "61:61-61:88",
                                 "type" : "Subtract",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }, {
                                    "name" : "{urn:hl7-org:elm-types:r1}Quantity",
                                    "type" : "NamedTypeSpecifier"
                                 } ],
                                 "operand" : [ {
                                    "locator" : "61:61-61:88",
                                    "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "Start",
                                    "signature" : [ {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    } ],
                                    "operand" : {
                                       "locator" : "61:70-61:88",
                                       "name" : "ToInterval",
                                       "libraryName" : "FHIRHelpers",
                                       "type" : "FunctionRef",
                                       "resultTypeSpecifier" : {
                                          "type" : "IntervalTypeSpecifier",
                                          "pointType" : {
                                             "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       },
                                       "operand" : [ {
                                          "path" : "period",
                                          "type" : "Property",
                                          "source" : {
                                             "locator" : "61:70-61:81",
                                             "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                             "name" : "TheEncounter",
                                             "type" : "OperandRef"
                                          }
                                       } ]
                                    }
                                 }, {
                                    "locator" : "61:33-61:38",
                                    "resultTypeName" : "{urn:hl7-org:elm-types:r1}Quantity",
                                    "value" : 1,
                                    "unit" : "hour",
                                    "type" : "Quantity"
                                 } ]
                              },
                              "high" : {
                                 "locator" : "61:61-61:88",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "Start",
                                 "signature" : [ {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : {
                                    "locator" : "61:70-61:88",
                                    "name" : "ToInterval",
                                    "libraryName" : "FHIRHelpers",
                                    "type" : "FunctionRef",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "operand" : [ {
                                       "path" : "period",
                                       "type" : "Property",
                                       "source" : {
                                          "locator" : "61:70-61:81",
                                          "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                          "name" : "TheEncounter",
                                          "type" : "OperandRef"
                                       }
                                    } ]
                                 }
                              }
                           } ]
                        }, {
                           "locator" : "61:33-61:46",
                           "type" : "Not",
                           "signature" : [ {
                              "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "NamedTypeSpecifier"
                           } ],
                           "operand" : {
                              "locator" : "61:33-61:46",
                              "type" : "IsNull",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}Any",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : {
                                 "locator" : "61:61-61:88",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "Start",
                                 "signature" : [ {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : {
                                    "locator" : "61:70-61:88",
                                    "name" : "ToInterval",
                                    "libraryName" : "FHIRHelpers",
                                    "type" : "FunctionRef",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "operand" : [ {
                                       "path" : "period",
                                       "type" : "Property",
                                       "source" : {
                                          "locator" : "61:70-61:81",
                                          "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                          "name" : "TheEncounter",
                                          "type" : "OperandRef"
                                       }
                                    } ]
                                 }
                              }
                           }
                        } ]
                     } ]
                  },
                  "sort" : {
                     "locator" : "62:7-62:27",
                     "by" : [ {
                        "locator" : "62:15-62:27",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "direction" : "asc",
                        "type" : "ByExpression",
                        "expression" : {
                           "locator" : "62:15-62:27",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "End",
                           "signature" : [ {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           } ],
                           "operand" : {
                              "locator" : "62:22-62:27",
                              "name" : "ToInterval",
                              "libraryName" : "FHIRHelpers",
                              "type" : "FunctionRef",
                              "resultTypeSpecifier" : {
                                 "type" : "IntervalTypeSpecifier",
                                 "pointType" : {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "operand" : [ {
                                 "name" : "period",
                                 "type" : "IdentifierRef"
                              } ]
                           }
                        }
                     } ]
                  }
               }
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "57:41-57:49",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "68:1-74:5",
            "resultTypeName" : "{http://hl7.org/fhir}Encounter",
            "name" : "edVisit",
            "context" : "Patient",
            "accessLevel" : "Public",
            "fluent" : true,
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns the most recent emergency department visit, if any, that occurs 1 hour or less prior to the given encounter."
               } ]
            } ],
            "expression" : {
               "locator" : "69:3-74:5",
               "resultTypeName" : "{http://hl7.org/fhir}Encounter",
               "type" : "Last",
               "signature" : [ {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Encounter",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "source" : {
                  "locator" : "70:5-73:27",
                  "type" : "Query",
                  "resultTypeSpecifier" : {
                     "type" : "ListTypeSpecifier",
                     "elementType" : {
                        "name" : "{http://hl7.org/fhir}Encounter",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "source" : [ {
                     "locator" : "70:5-70:53",
                     "alias" : "EDVisit",
                     "resultTypeSpecifier" : {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Encounter",
                           "type" : "NamedTypeSpecifier"
                        }
                     },
                     "expression" : {
                        "locator" : "70:5-70:45",
                        "dataType" : "{http://hl7.org/fhir}Encounter",
                        "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter",
                        "codeProperty" : "type",
                        "codeComparator" : "in",
                        "type" : "Retrieve",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "codes" : {
                           "locator" : "70:17-70:44",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}ValueSet",
                           "name" : "Emergency Department Visit",
                           "preserve" : true,
                           "type" : "ValueSetRef"
                        }
                     }
                  } ],
                  "relationship" : [ ],
                  "where" : {
                     "locator" : "71:7-72:88",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                     "type" : "And",
                     "signature" : [ {
                        "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                        "type" : "NamedTypeSpecifier"
                     }, {
                        "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                        "type" : "NamedTypeSpecifier"
                     } ],
                     "operand" : [ {
                        "locator" : "71:13-71:39",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                        "type" : "Equal",
                        "signature" : [ {
                           "name" : "{urn:hl7-org:elm-types:r1}String",
                           "type" : "NamedTypeSpecifier"
                        }, {
                           "name" : "{urn:hl7-org:elm-types:r1}String",
                           "type" : "NamedTypeSpecifier"
                        } ],
                        "operand" : [ {
                           "locator" : "71:13-71:26",
                           "resultTypeName" : "{http://hl7.org/fhir}EncounterStatus",
                           "path" : "value",
                           "type" : "Property",
                           "source" : {
                              "path" : "status",
                              "scope" : "EDVisit",
                              "type" : "Property"
                           }
                        }, {
                           "locator" : "71:30-71:39",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                           "valueType" : "{urn:hl7-org:elm-types:r1}String",
                           "value" : "finished",
                           "type" : "Literal"
                        } ]
                     }, {
                        "locator" : "72:13-72:88",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                        "type" : "And",
                        "signature" : [ {
                           "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                           "type" : "NamedTypeSpecifier"
                        }, {
                           "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                           "type" : "NamedTypeSpecifier"
                        } ],
                        "operand" : [ {
                           "locator" : "72:33-72:46",
                           "type" : "In",
                           "signature" : [ {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }, {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           } ],
                           "operand" : [ {
                              "locator" : "72:28-72:31",
                              "type" : "End",
                              "signature" : [ {
                                 "type" : "IntervalTypeSpecifier",
                                 "pointType" : {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              } ],
                              "operand" : {
                                 "locator" : "72:13-72:26",
                                 "name" : "ToInterval",
                                 "libraryName" : "FHIRHelpers",
                                 "type" : "FunctionRef",
                                 "resultTypeSpecifier" : {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 },
                                 "operand" : [ {
                                    "path" : "period",
                                    "scope" : "EDVisit",
                                    "type" : "Property"
                                 } ]
                              }
                           }, {
                              "locator" : "72:33-72:46",
                              "lowClosed" : true,
                              "highClosed" : true,
                              "type" : "Interval",
                              "resultTypeSpecifier" : {
                                 "type" : "IntervalTypeSpecifier",
                                 "pointType" : {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "low" : {
                                 "locator" : "72:61-72:88",
                                 "type" : "Subtract",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }, {
                                    "name" : "{urn:hl7-org:elm-types:r1}Quantity",
                                    "type" : "NamedTypeSpecifier"
                                 } ],
                                 "operand" : [ {
                                    "locator" : "72:61-72:88",
                                    "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "Start",
                                    "signature" : [ {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    } ],
                                    "operand" : {
                                       "locator" : "72:70-72:88",
                                       "name" : "ToInterval",
                                       "libraryName" : "FHIRHelpers",
                                       "type" : "FunctionRef",
                                       "resultTypeSpecifier" : {
                                          "type" : "IntervalTypeSpecifier",
                                          "pointType" : {
                                             "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       },
                                       "operand" : [ {
                                          "path" : "period",
                                          "type" : "Property",
                                          "source" : {
                                             "locator" : "72:70-72:81",
                                             "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                             "name" : "TheEncounter",
                                             "type" : "OperandRef"
                                          }
                                       } ]
                                    }
                                 }, {
                                    "locator" : "72:33-72:38",
                                    "resultTypeName" : "{urn:hl7-org:elm-types:r1}Quantity",
                                    "value" : 1,
                                    "unit" : "hour",
                                    "type" : "Quantity"
                                 } ]
                              },
                              "high" : {
                                 "locator" : "72:61-72:88",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "Start",
                                 "signature" : [ {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : {
                                    "locator" : "72:70-72:88",
                                    "name" : "ToInterval",
                                    "libraryName" : "FHIRHelpers",
                                    "type" : "FunctionRef",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "operand" : [ {
                                       "path" : "period",
                                       "type" : "Property",
                                       "source" : {
                                          "locator" : "72:70-72:81",
                                          "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                          "name" : "TheEncounter",
                                          "type" : "OperandRef"
                                       }
                                    } ]
                                 }
                              }
                           } ]
                        }, {
                           "locator" : "72:33-72:46",
                           "type" : "Not",
                           "signature" : [ {
                              "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "NamedTypeSpecifier"
                           } ],
                           "operand" : {
                              "locator" : "72:33-72:46",
                              "type" : "IsNull",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}Any",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : {
                                 "locator" : "72:61-72:88",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "Start",
                                 "signature" : [ {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : {
                                    "locator" : "72:70-72:88",
                                    "name" : "ToInterval",
                                    "libraryName" : "FHIRHelpers",
                                    "type" : "FunctionRef",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "operand" : [ {
                                       "path" : "period",
                                       "type" : "Property",
                                       "source" : {
                                          "locator" : "72:70-72:81",
                                          "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                          "name" : "TheEncounter",
                                          "type" : "OperandRef"
                                       }
                                    } ]
                                 }
                              }
                           }
                        } ]
                     } ]
                  },
                  "sort" : {
                     "locator" : "73:7-73:27",
                     "by" : [ {
                        "locator" : "73:15-73:27",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "direction" : "asc",
                        "type" : "ByExpression",
                        "expression" : {
                           "locator" : "73:15-73:27",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "End",
                           "signature" : [ {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           } ],
                           "operand" : {
                              "locator" : "73:22-73:27",
                              "name" : "ToInterval",
                              "libraryName" : "FHIRHelpers",
                              "type" : "FunctionRef",
                              "resultTypeSpecifier" : {
                                 "type" : "IntervalTypeSpecifier",
                                 "pointType" : {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "operand" : [ {
                                 "name" : "period",
                                 "type" : "IdentifierRef"
                              } ]
                           }
                        }
                     } ]
                  }
               }
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "68:45-68:53",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "80:1-84:68",
            "name" : "Hospitalization",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Hospitalization returns the total interval for admission to discharge for the given encounter, or for the admission of any immediately prior emergency department visit to the discharge of the given encounter."
               }, {
                  "name" : "deprecated",
                  "value" : "This function is deprecated. Use the fluent function `hospitalization()` instead."
               } ]
            } ],
            "resultTypeSpecifier" : {
               "type" : "IntervalTypeSpecifier",
               "pointType" : {
                  "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "type" : "NamedTypeSpecifier"
               }
            },
            "expression" : {
               "locator" : "81:3-84:68",
               "type" : "Query",
               "resultTypeSpecifier" : {
                  "type" : "IntervalTypeSpecifier",
                  "pointType" : {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               },
               "source" : [ {
                  "locator" : "81:3-81:32",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "alias" : "X",
                  "expression" : {
                     "locator" : "81:3-81:30",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "name" : "ED Visit",
                     "type" : "FunctionRef",
                     "signature" : [ {
                        "name" : "{http://hl7.org/fhir}Encounter",
                        "type" : "NamedTypeSpecifier"
                     } ],
                     "operand" : [ {
                        "locator" : "81:16-81:27",
                        "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                        "name" : "TheEncounter",
                        "type" : "OperandRef"
                     } ]
                  }
               } ],
               "relationship" : [ ],
               "return" : {
                  "locator" : "82:5-84:68",
                  "resultTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "expression" : {
                     "locator" : "83:9-84:68",
                     "type" : "If",
                     "resultTypeSpecifier" : {
                        "type" : "IntervalTypeSpecifier",
                        "pointType" : {
                           "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "NamedTypeSpecifier"
                        }
                     },
                     "condition" : {
                        "locator" : "83:12-83:20",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                        "type" : "IsNull",
                        "signature" : [ {
                           "name" : "{urn:hl7-org:elm-types:r1}Any",
                           "type" : "NamedTypeSpecifier"
                        } ],
                        "operand" : {
                           "locator" : "83:12",
                           "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                           "name" : "X",
                           "type" : "AliasRef"
                        }
                     },
                     "then" : {
                        "locator" : "83:27-83:45",
                        "name" : "ToInterval",
                        "libraryName" : "FHIRHelpers",
                        "type" : "FunctionRef",
                        "resultTypeSpecifier" : {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "operand" : [ {
                           "path" : "period",
                           "type" : "Property",
                           "source" : {
                              "locator" : "83:27-83:38",
                              "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                              "name" : "TheEncounter",
                              "type" : "OperandRef"
                           }
                        } ]
                     },
                     "else" : {
                        "locator" : "84:14-84:68",
                        "lowClosed" : true,
                        "highClosed" : false,
                        "type" : "Interval",
                        "resultTypeSpecifier" : {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "low" : {
                           "locator" : "84:23-84:39",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "Start",
                           "signature" : [ {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           } ],
                           "operand" : {
                              "locator" : "84:32-84:39",
                              "name" : "ToInterval",
                              "libraryName" : "FHIRHelpers",
                              "type" : "FunctionRef",
                              "resultTypeSpecifier" : {
                                 "type" : "IntervalTypeSpecifier",
                                 "pointType" : {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "operand" : [ {
                                 "path" : "period",
                                 "scope" : "X",
                                 "type" : "Property"
                              } ]
                           }
                        },
                        "high" : {
                           "locator" : "84:42-84:67",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "End",
                           "signature" : [ {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           } ],
                           "operand" : {
                              "locator" : "84:49-84:67",
                              "name" : "ToInterval",
                              "libraryName" : "FHIRHelpers",
                              "type" : "FunctionRef",
                              "resultTypeSpecifier" : {
                                 "type" : "IntervalTypeSpecifier",
                                 "pointType" : {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "operand" : [ {
                                 "path" : "period",
                                 "type" : "Property",
                                 "source" : {
                                    "locator" : "84:49-84:60",
                                    "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                    "name" : "TheEncounter",
                                    "type" : "OperandRef"
                                 }
                              } ]
                           }
                        }
                     }
                  }
               }
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "80:48-80:56",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "89:1-93:68",
            "name" : "hospitalization",
            "context" : "Patient",
            "accessLevel" : "Public",
            "fluent" : true,
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Hospitalization returns the total interval for admission to discharge for the given encounter, or for the admission of any immediately prior emergency department visit to the discharge of the given encounter."
               } ]
            } ],
            "resultTypeSpecifier" : {
               "type" : "IntervalTypeSpecifier",
               "pointType" : {
                  "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "type" : "NamedTypeSpecifier"
               }
            },
            "expression" : {
               "locator" : "90:3-93:68",
               "type" : "Query",
               "resultTypeSpecifier" : {
                  "type" : "IntervalTypeSpecifier",
                  "pointType" : {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               },
               "source" : [ {
                  "locator" : "90:3-90:30",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "alias" : "X",
                  "expression" : {
                     "locator" : "90:3-90:28",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "name" : "edVisit",
                     "type" : "FunctionRef",
                     "signature" : [ {
                        "name" : "{http://hl7.org/fhir}Encounter",
                        "type" : "NamedTypeSpecifier"
                     } ],
                     "operand" : [ {
                        "locator" : "90:4-90:15",
                        "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                        "name" : "TheEncounter",
                        "type" : "OperandRef"
                     } ]
                  }
               } ],
               "relationship" : [ ],
               "return" : {
                  "locator" : "91:5-93:68",
                  "resultTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "expression" : {
                     "locator" : "92:9-93:68",
                     "type" : "If",
                     "resultTypeSpecifier" : {
                        "type" : "IntervalTypeSpecifier",
                        "pointType" : {
                           "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "NamedTypeSpecifier"
                        }
                     },
                     "condition" : {
                        "locator" : "92:12-92:20",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                        "type" : "IsNull",
                        "signature" : [ {
                           "name" : "{urn:hl7-org:elm-types:r1}Any",
                           "type" : "NamedTypeSpecifier"
                        } ],
                        "operand" : {
                           "locator" : "92:12",
                           "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                           "name" : "X",
                           "type" : "AliasRef"
                        }
                     },
                     "then" : {
                        "locator" : "92:27-92:45",
                        "name" : "ToInterval",
                        "libraryName" : "FHIRHelpers",
                        "type" : "FunctionRef",
                        "resultTypeSpecifier" : {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "operand" : [ {
                           "path" : "period",
                           "type" : "Property",
                           "source" : {
                              "locator" : "92:27-92:38",
                              "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                              "name" : "TheEncounter",
                              "type" : "OperandRef"
                           }
                        } ]
                     },
                     "else" : {
                        "locator" : "93:14-93:68",
                        "lowClosed" : true,
                        "highClosed" : true,
                        "type" : "Interval",
                        "resultTypeSpecifier" : {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "low" : {
                           "locator" : "93:23-93:39",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "Start",
                           "signature" : [ {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           } ],
                           "operand" : {
                              "locator" : "93:32-93:39",
                              "name" : "ToInterval",
                              "libraryName" : "FHIRHelpers",
                              "type" : "FunctionRef",
                              "resultTypeSpecifier" : {
                                 "type" : "IntervalTypeSpecifier",
                                 "pointType" : {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "operand" : [ {
                                 "path" : "period",
                                 "scope" : "X",
                                 "type" : "Property"
                              } ]
                           }
                        },
                        "high" : {
                           "locator" : "93:42-93:67",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "End",
                           "signature" : [ {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           } ],
                           "operand" : {
                              "locator" : "93:49-93:67",
                              "name" : "ToInterval",
                              "libraryName" : "FHIRHelpers",
                              "type" : "FunctionRef",
                              "resultTypeSpecifier" : {
                                 "type" : "IntervalTypeSpecifier",
                                 "pointType" : {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "operand" : [ {
                                 "path" : "period",
                                 "type" : "Property",
                                 "source" : {
                                    "locator" : "93:49-93:60",
                                    "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                    "name" : "TheEncounter",
                                    "type" : "OperandRef"
                                 }
                              } ]
                           }
                        }
                     }
                  }
               }
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "89:53-89:61",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "99:1-103:68",
            "name" : "Hospitalization Locations",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns list of all locations within an encounter, including locations for immediately prior ED visit."
               }, {
                  "name" : "deprecated",
                  "value" : "This function is deprecated. Use the fluent function `hospitalizationLocations()` instead."
               } ]
            } ],
            "resultTypeSpecifier" : {
               "type" : "ListTypeSpecifier",
               "elementType" : {
                  "name" : "{http://hl7.org/fhir}Encounter.Location",
                  "type" : "NamedTypeSpecifier"
               }
            },
            "expression" : {
               "locator" : "100:3-103:68",
               "type" : "Query",
               "resultTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Encounter.Location",
                     "type" : "NamedTypeSpecifier"
                  }
               },
               "source" : [ {
                  "locator" : "100:3-100:42",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "alias" : "EDEncounter",
                  "expression" : {
                     "locator" : "100:3-100:30",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "name" : "ED Visit",
                     "type" : "FunctionRef",
                     "signature" : [ {
                        "name" : "{http://hl7.org/fhir}Encounter",
                        "type" : "NamedTypeSpecifier"
                     } ],
                     "operand" : [ {
                        "locator" : "100:16-100:27",
                        "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                        "name" : "TheEncounter",
                        "type" : "OperandRef"
                     } ]
                  }
               } ],
               "relationship" : [ ],
               "return" : {
                  "locator" : "101:5-103:68",
                  "resultTypeSpecifier" : {
                     "type" : "ListTypeSpecifier",
                     "elementType" : {
                        "name" : "{http://hl7.org/fhir}Encounter.Location",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "expression" : {
                     "locator" : "102:9-103:68",
                     "type" : "If",
                     "resultTypeSpecifier" : {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Encounter.Location",
                           "type" : "NamedTypeSpecifier"
                        }
                     },
                     "condition" : {
                        "locator" : "102:12-102:30",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                        "type" : "IsNull",
                        "signature" : [ {
                           "name" : "{urn:hl7-org:elm-types:r1}Any",
                           "type" : "NamedTypeSpecifier"
                        } ],
                        "operand" : {
                           "locator" : "102:12-102:22",
                           "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                           "name" : "EDEncounter",
                           "type" : "AliasRef"
                        }
                     },
                     "then" : {
                        "locator" : "102:37-102:57",
                        "path" : "location",
                        "type" : "Property",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter.Location",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "source" : {
                           "locator" : "102:37-102:48",
                           "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                           "name" : "TheEncounter",
                           "type" : "OperandRef"
                        }
                     },
                     "else" : {
                        "locator" : "103:14-103:68",
                        "type" : "Flatten",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter.Location",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "signature" : [ {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Encounter.Location",
                                 "type" : "NamedTypeSpecifier"
                              }
                           }
                        } ],
                        "operand" : {
                           "locator" : "103:22-103:68",
                           "type" : "List",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter.Location",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              }
                           },
                           "element" : [ {
                              "locator" : "103:24-103:43",
                              "path" : "location",
                              "scope" : "EDEncounter",
                              "type" : "Property",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter.Location",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              }
                           }, {
                              "locator" : "103:46-103:66",
                              "path" : "location",
                              "type" : "Property",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter.Location",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "source" : {
                                 "locator" : "103:46-103:57",
                                 "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                 "name" : "TheEncounter",
                                 "type" : "OperandRef"
                              }
                           } ]
                        }
                     }
                  }
               }
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "99:58-99:66",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "108:1-112:68",
            "name" : "hospitalizationLocations",
            "context" : "Patient",
            "accessLevel" : "Public",
            "fluent" : true,
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns list of all locations within an encounter, including locations for immediately prior ED visit."
               } ]
            } ],
            "resultTypeSpecifier" : {
               "type" : "ListTypeSpecifier",
               "elementType" : {
                  "name" : "{http://hl7.org/fhir}Encounter.Location",
                  "type" : "NamedTypeSpecifier"
               }
            },
            "expression" : {
               "locator" : "109:3-112:68",
               "type" : "Query",
               "resultTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Encounter.Location",
                     "type" : "NamedTypeSpecifier"
                  }
               },
               "source" : [ {
                  "locator" : "109:3-109:41",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "alias" : "EDEncounter",
                  "expression" : {
                     "locator" : "109:3-109:29",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "name" : "edVisit",
                     "type" : "FunctionRef",
                     "signature" : [ {
                        "name" : "{http://hl7.org/fhir}Encounter",
                        "type" : "NamedTypeSpecifier"
                     } ],
                     "operand" : [ {
                        "locator" : "109:5-109:16",
                        "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                        "name" : "TheEncounter",
                        "type" : "OperandRef"
                     } ]
                  }
               } ],
               "relationship" : [ ],
               "return" : {
                  "locator" : "110:5-112:68",
                  "resultTypeSpecifier" : {
                     "type" : "ListTypeSpecifier",
                     "elementType" : {
                        "name" : "{http://hl7.org/fhir}Encounter.Location",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "expression" : {
                     "locator" : "111:9-112:68",
                     "type" : "If",
                     "resultTypeSpecifier" : {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Encounter.Location",
                           "type" : "NamedTypeSpecifier"
                        }
                     },
                     "condition" : {
                        "locator" : "111:12-111:30",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                        "type" : "IsNull",
                        "signature" : [ {
                           "name" : "{urn:hl7-org:elm-types:r1}Any",
                           "type" : "NamedTypeSpecifier"
                        } ],
                        "operand" : {
                           "locator" : "111:12-111:22",
                           "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                           "name" : "EDEncounter",
                           "type" : "AliasRef"
                        }
                     },
                     "then" : {
                        "locator" : "111:37-111:57",
                        "path" : "location",
                        "type" : "Property",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter.Location",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "source" : {
                           "locator" : "111:37-111:48",
                           "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                           "name" : "TheEncounter",
                           "type" : "OperandRef"
                        }
                     },
                     "else" : {
                        "locator" : "112:14-112:68",
                        "type" : "Flatten",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter.Location",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "signature" : [ {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Encounter.Location",
                                 "type" : "NamedTypeSpecifier"
                              }
                           }
                        } ],
                        "operand" : {
                           "locator" : "112:22-112:68",
                           "type" : "List",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter.Location",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              }
                           },
                           "element" : [ {
                              "locator" : "112:24-112:43",
                              "path" : "location",
                              "scope" : "EDEncounter",
                              "type" : "Property",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter.Location",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              }
                           }, {
                              "locator" : "112:46-112:66",
                              "path" : "location",
                              "type" : "Property",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter.Location",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "source" : {
                                 "locator" : "112:46-112:57",
                                 "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                 "name" : "TheEncounter",
                                 "type" : "OperandRef"
                              }
                           } ]
                        }
                     }
                  }
               }
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "108:62-108:70",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "118:1-119:47",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}Integer",
            "name" : "Hospitalization Length of Stay",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns the length of stay in days (i.e. the number of days between admission and discharge) for the given encounter, or from the admission of any immediately prior emergency department visit to the discharge of the encounter"
               }, {
                  "name" : "deprecated",
                  "value" : "This function is deprecated. Use the fluent function `hospitalizationLengthOfStay()` instead."
               } ]
            } ],
            "expression" : {
               "locator" : "119:3-119:47",
               "resultTypeName" : "{urn:hl7-org:elm-types:r1}Integer",
               "name" : "LengthInDays",
               "type" : "FunctionRef",
               "signature" : [ {
                  "type" : "IntervalTypeSpecifier",
                  "pointType" : {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "operand" : [ {
                  "locator" : "119:16-119:46",
                  "name" : "Hospitalization",
                  "type" : "FunctionRef",
                  "resultTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "signature" : [ {
                     "name" : "{http://hl7.org/fhir}Encounter",
                     "type" : "NamedTypeSpecifier"
                  } ],
                  "operand" : [ {
                     "locator" : "119:34-119:45",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "name" : "TheEncounter",
                     "type" : "OperandRef"
                  } ]
               } ]
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "118:63-118:71",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "124:1-125:52",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}Integer",
            "name" : "hospitalizationLengthOfStay",
            "context" : "Patient",
            "accessLevel" : "Public",
            "fluent" : true,
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns the length of stay in days (i.e. the number of days between admission and discharge) for the given encounter, or from the admission of any immediately prior emergency department visit to the discharge of the encounter"
               } ]
            } ],
            "expression" : {
               "locator" : "125:4-125:52",
               "resultTypeName" : "{urn:hl7-org:elm-types:r1}Integer",
               "name" : "lengthInDays",
               "type" : "FunctionRef",
               "signature" : [ {
                  "type" : "IntervalTypeSpecifier",
                  "pointType" : {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "operand" : [ {
                  "locator" : "125:4-125:35",
                  "name" : "hospitalization",
                  "type" : "FunctionRef",
                  "resultTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "signature" : [ {
                     "name" : "{http://hl7.org/fhir}Encounter",
                     "type" : "NamedTypeSpecifier"
                  } ],
                  "operand" : [ {
                     "locator" : "125:4-125:15",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "name" : "TheEncounter",
                     "type" : "OperandRef"
                  } ]
               } ]
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "124:65-124:73",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "131:1-132:42",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
            "name" : "Hospital Admission Time",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns admission time for an encounter or for immediately prior emergency department visit."
               }, {
                  "name" : "deprecated",
                  "value" : "This function is deprecated. Use the fluent function `hospitalAdmissionTime()` instead."
               } ]
            } ],
            "expression" : {
               "locator" : "132:3-132:42",
               "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
               "type" : "Start",
               "signature" : [ {
                  "type" : "IntervalTypeSpecifier",
                  "pointType" : {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "operand" : {
                  "locator" : "132:12-132:42",
                  "name" : "Hospitalization",
                  "type" : "FunctionRef",
                  "resultTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "signature" : [ {
                     "name" : "{http://hl7.org/fhir}Encounter",
                     "type" : "NamedTypeSpecifier"
                  } ],
                  "operand" : [ {
                     "locator" : "132:30-132:41",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "name" : "TheEncounter",
                     "type" : "OperandRef"
                  } ]
               }
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "131:56-131:64",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "137:1-138:45",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
            "name" : "hospitalAdmissionTime",
            "context" : "Patient",
            "accessLevel" : "Public",
            "fluent" : true,
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns admission time for an encounter or for immediately prior emergency department visit."
               } ]
            } ],
            "expression" : {
               "locator" : "138:3-138:45",
               "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
               "type" : "Start",
               "signature" : [ {
                  "type" : "IntervalTypeSpecifier",
                  "pointType" : {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "operand" : {
                  "locator" : "138:12-138:45",
                  "name" : "hospitalization",
                  "type" : "FunctionRef",
                  "resultTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "signature" : [ {
                     "name" : "{http://hl7.org/fhir}Encounter",
                     "type" : "NamedTypeSpecifier"
                  } ],
                  "operand" : [ {
                     "locator" : "138:13-138:24",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "name" : "TheEncounter",
                     "type" : "OperandRef"
                  } ]
               }
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "137:59-137:67",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "144:1-145:28",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
            "name" : "Hospital Discharge Time",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Hospital Discharge Time returns the discharge time for an encounter"
               }, {
                  "name" : "deprecated",
                  "value" : "This function is deprecated. Use the fluent function `hospitalDischargeTime()` instead."
               } ]
            } ],
            "expression" : {
               "locator" : "145:3-145:28",
               "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
               "type" : "End",
               "signature" : [ {
                  "type" : "IntervalTypeSpecifier",
                  "pointType" : {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "operand" : {
                  "locator" : "145:10-145:28",
                  "name" : "ToInterval",
                  "libraryName" : "FHIRHelpers",
                  "type" : "FunctionRef",
                  "resultTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "operand" : [ {
                     "path" : "period",
                     "type" : "Property",
                     "source" : {
                        "locator" : "145:10-145:21",
                        "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                        "name" : "TheEncounter",
                        "type" : "OperandRef"
                     }
                  } ]
               }
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "144:56-144:64",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "150:1-151:28",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
            "name" : "hospitalDischargeTime",
            "context" : "Patient",
            "accessLevel" : "Public",
            "fluent" : true,
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Hospital Discharge Time returns the discharge time for an encounter"
               } ]
            } ],
            "expression" : {
               "locator" : "151:3-151:28",
               "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
               "type" : "End",
               "signature" : [ {
                  "type" : "IntervalTypeSpecifier",
                  "pointType" : {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "operand" : {
                  "locator" : "151:10-151:28",
                  "name" : "ToInterval",
                  "libraryName" : "FHIRHelpers",
                  "type" : "FunctionRef",
                  "resultTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "operand" : [ {
                     "path" : "period",
                     "type" : "Property",
                     "source" : {
                        "locator" : "151:10-151:21",
                        "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                        "name" : "TheEncounter",
                        "type" : "OperandRef"
                     }
                  } ]
               }
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "150:59-150:67",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "157:1-161:11",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
            "name" : "Hospital Arrival Time",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns earliest arrival time for an encounter including any prior ED visit."
               }, {
                  "name" : "deprecated",
                  "value" : "This function is deprecated. Use the fluent function `hospitalArrivalTime()` instead."
               } ]
            } ],
            "expression" : {
               "locator" : "158:3-161:11",
               "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
               "type" : "Start",
               "signature" : [ {
                  "type" : "IntervalTypeSpecifier",
                  "pointType" : {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "operand" : {
                  "locator" : "158:12-161:11",
                  "name" : "ToInterval",
                  "libraryName" : "FHIRHelpers",
                  "type" : "FunctionRef",
                  "resultTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "operand" : [ {
                     "path" : "period",
                     "type" : "Property",
                     "source" : {
                        "locator" : "158:12-161:4",
                        "resultTypeName" : "{http://hl7.org/fhir}Encounter.Location",
                        "type" : "First",
                        "signature" : [ {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter.Location",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "source" : {
                           "locator" : "159:8-160:28",
                           "type" : "Query",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Encounter.Location",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "source" : [ {
                              "locator" : "159:8-159:68",
                              "alias" : "HospitalLocation",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter.Location",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "expression" : {
                                 "locator" : "159:8-159:51",
                                 "name" : "Hospitalization Locations",
                                 "type" : "FunctionRef",
                                 "resultTypeSpecifier" : {
                                    "type" : "ListTypeSpecifier",
                                    "elementType" : {
                                       "name" : "{http://hl7.org/fhir}Encounter.Location",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 },
                                 "signature" : [ {
                                    "name" : "{http://hl7.org/fhir}Encounter",
                                    "type" : "NamedTypeSpecifier"
                                 } ],
                                 "operand" : [ {
                                    "locator" : "159:37-159:48",
                                    "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                    "name" : "TheEncounter",
                                    "type" : "OperandRef"
                                 } ]
                              }
                           } ],
                           "relationship" : [ ],
                           "sort" : {
                              "locator" : "160:6-160:28",
                              "by" : [ {
                                 "locator" : "160:14-160:28",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "direction" : "asc",
                                 "type" : "ByExpression",
                                 "expression" : {
                                    "locator" : "160:14-160:28",
                                    "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "Start",
                                    "signature" : [ {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    } ],
                                    "operand" : {
                                       "locator" : "160:23-160:28",
                                       "name" : "ToInterval",
                                       "libraryName" : "FHIRHelpers",
                                       "type" : "FunctionRef",
                                       "resultTypeSpecifier" : {
                                          "type" : "IntervalTypeSpecifier",
                                          "pointType" : {
                                             "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       },
                                       "operand" : [ {
                                          "name" : "period",
                                          "type" : "IdentifierRef"
                                       } ]
                                    }
                                 }
                              } ]
                           }
                        }
                     }
                  } ]
               }
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "157:54-157:62",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "166:1-170:11",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
            "name" : "hospitalArrivalTime",
            "context" : "Patient",
            "accessLevel" : "Public",
            "fluent" : true,
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns earliest arrival time for an encounter including any prior ED visit."
               } ]
            } ],
            "expression" : {
               "locator" : "167:3-170:11",
               "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
               "type" : "Start",
               "signature" : [ {
                  "type" : "IntervalTypeSpecifier",
                  "pointType" : {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "operand" : {
                  "locator" : "167:12-170:11",
                  "name" : "ToInterval",
                  "libraryName" : "FHIRHelpers",
                  "type" : "FunctionRef",
                  "resultTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "operand" : [ {
                     "path" : "period",
                     "type" : "Property",
                     "source" : {
                        "locator" : "167:12-170:4",
                        "resultTypeName" : "{http://hl7.org/fhir}Encounter.Location",
                        "type" : "First",
                        "signature" : [ {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter.Location",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "source" : {
                           "locator" : "168:8-169:28",
                           "type" : "Query",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Encounter.Location",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "source" : [ {
                              "locator" : "168:8-168:67",
                              "alias" : "HospitalLocation",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter.Location",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "expression" : {
                                 "locator" : "168:8-168:50",
                                 "name" : "hospitalizationLocations",
                                 "type" : "FunctionRef",
                                 "resultTypeSpecifier" : {
                                    "type" : "ListTypeSpecifier",
                                    "elementType" : {
                                       "name" : "{http://hl7.org/fhir}Encounter.Location",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 },
                                 "signature" : [ {
                                    "name" : "{http://hl7.org/fhir}Encounter",
                                    "type" : "NamedTypeSpecifier"
                                 } ],
                                 "operand" : [ {
                                    "locator" : "168:9-168:20",
                                    "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                    "name" : "TheEncounter",
                                    "type" : "OperandRef"
                                 } ]
                              }
                           } ],
                           "relationship" : [ ],
                           "sort" : {
                              "locator" : "169:6-169:28",
                              "by" : [ {
                                 "locator" : "169:14-169:28",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "direction" : "asc",
                                 "type" : "ByExpression",
                                 "expression" : {
                                    "locator" : "169:14-169:28",
                                    "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "Start",
                                    "signature" : [ {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    } ],
                                    "operand" : {
                                       "locator" : "169:23-169:28",
                                       "name" : "ToInterval",
                                       "libraryName" : "FHIRHelpers",
                                       "type" : "FunctionRef",
                                       "resultTypeSpecifier" : {
                                          "type" : "IntervalTypeSpecifier",
                                          "pointType" : {
                                             "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       },
                                       "operand" : [ {
                                          "name" : "period",
                                          "type" : "IdentifierRef"
                                       } ]
                                    }
                                 }
                              } ]
                           }
                        }
                     }
                  } ]
               }
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "166:57-166:65",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "176:1-180:9",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
            "name" : "Hospital Departure Time",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns the latest departure time for encounter including any prior ED visit."
               }, {
                  "name" : "deprecated",
                  "value" : "This function is deprecated. Use the fluent function `hospitalDepartureTime()` instead."
               } ]
            } ],
            "expression" : {
               "locator" : "177:2-180:9",
               "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
               "type" : "End",
               "signature" : [ {
                  "type" : "IntervalTypeSpecifier",
                  "pointType" : {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "operand" : {
                  "locator" : "177:9-180:9",
                  "name" : "ToInterval",
                  "libraryName" : "FHIRHelpers",
                  "type" : "FunctionRef",
                  "resultTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "operand" : [ {
                     "path" : "period",
                     "type" : "Property",
                     "source" : {
                        "locator" : "177:9-180:2",
                        "resultTypeName" : "{http://hl7.org/fhir}Encounter.Location",
                        "type" : "Last",
                        "signature" : [ {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter.Location",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "source" : {
                           "locator" : "178:6-179:26",
                           "type" : "Query",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Encounter.Location",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "source" : [ {
                              "locator" : "178:6-178:67",
                              "alias" : "HospitalLocation",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter.Location",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "expression" : {
                                 "locator" : "178:6-178:50",
                                 "name" : "Hospitalization Locations",
                                 "type" : "FunctionRef",
                                 "resultTypeSpecifier" : {
                                    "type" : "ListTypeSpecifier",
                                    "elementType" : {
                                       "name" : "{http://hl7.org/fhir}Encounter.Location",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 },
                                 "signature" : [ {
                                    "name" : "{http://hl7.org/fhir}Encounter",
                                    "type" : "NamedTypeSpecifier"
                                 } ],
                                 "operand" : [ {
                                    "locator" : "178:36-178:47",
                                    "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                    "name" : "TheEncounter",
                                    "type" : "OperandRef"
                                 } ]
                              }
                           } ],
                           "relationship" : [ ],
                           "sort" : {
                              "locator" : "179:4-179:26",
                              "by" : [ {
                                 "locator" : "179:12-179:26",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "direction" : "asc",
                                 "type" : "ByExpression",
                                 "expression" : {
                                    "locator" : "179:12-179:26",
                                    "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "Start",
                                    "signature" : [ {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    } ],
                                    "operand" : {
                                       "locator" : "179:21-179:26",
                                       "name" : "ToInterval",
                                       "libraryName" : "FHIRHelpers",
                                       "type" : "FunctionRef",
                                       "resultTypeSpecifier" : {
                                          "type" : "IntervalTypeSpecifier",
                                          "pointType" : {
                                             "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       },
                                       "operand" : [ {
                                          "name" : "period",
                                          "type" : "IdentifierRef"
                                       } ]
                                    }
                                 }
                              } ]
                           }
                        }
                     }
                  } ]
               }
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "176:56-176:64",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "185:1-189:9",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
            "name" : "hospitalDepartureTime",
            "context" : "Patient",
            "accessLevel" : "Public",
            "fluent" : true,
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns the latest departure time for encounter including any prior ED visit."
               } ]
            } ],
            "expression" : {
               "locator" : "186:2-189:9",
               "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
               "type" : "End",
               "signature" : [ {
                  "type" : "IntervalTypeSpecifier",
                  "pointType" : {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "operand" : {
                  "locator" : "186:9-189:9",
                  "name" : "ToInterval",
                  "libraryName" : "FHIRHelpers",
                  "type" : "FunctionRef",
                  "resultTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "operand" : [ {
                     "path" : "period",
                     "type" : "Property",
                     "source" : {
                        "locator" : "186:9-189:2",
                        "resultTypeName" : "{http://hl7.org/fhir}Encounter.Location",
                        "type" : "Last",
                        "signature" : [ {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter.Location",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "source" : {
                           "locator" : "187:6-188:26",
                           "type" : "Query",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Encounter.Location",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "source" : [ {
                              "locator" : "187:6-187:65",
                              "alias" : "HospitalLocation",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter.Location",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "expression" : {
                                 "locator" : "187:6-187:48",
                                 "name" : "hospitalizationLocations",
                                 "type" : "FunctionRef",
                                 "resultTypeSpecifier" : {
                                    "type" : "ListTypeSpecifier",
                                    "elementType" : {
                                       "name" : "{http://hl7.org/fhir}Encounter.Location",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 },
                                 "signature" : [ {
                                    "name" : "{http://hl7.org/fhir}Encounter",
                                    "type" : "NamedTypeSpecifier"
                                 } ],
                                 "operand" : [ {
                                    "locator" : "187:7-187:18",
                                    "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                    "name" : "TheEncounter",
                                    "type" : "OperandRef"
                                 } ]
                              }
                           } ],
                           "relationship" : [ ],
                           "sort" : {
                              "locator" : "188:4-188:26",
                              "by" : [ {
                                 "locator" : "188:12-188:26",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "direction" : "asc",
                                 "type" : "ByExpression",
                                 "expression" : {
                                    "locator" : "188:12-188:26",
                                    "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "Start",
                                    "signature" : [ {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    } ],
                                    "operand" : {
                                       "locator" : "188:21-188:26",
                                       "name" : "ToInterval",
                                       "libraryName" : "FHIRHelpers",
                                       "type" : "FunctionRef",
                                       "resultTypeSpecifier" : {
                                          "type" : "IntervalTypeSpecifier",
                                          "pointType" : {
                                             "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       },
                                       "operand" : [ {
                                          "name" : "period",
                                          "type" : "IdentifierRef"
                                       } ]
                                    }
                                 }
                              } ]
                           }
                        }
                     }
                  } ]
               }
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "185:59-185:67",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "381:1-384:3",
            "resultTypeName" : "{http://hl7.org/fhir}Location",
            "name" : "GetLocation",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns the Location resource specified by the given reference"
               }, {
                  "name" : "deprecated",
                  "value" : "This function is deprecated. Use the fluent function `getLocation()` instead."
               } ]
            } ],
            "expression" : {
               "locator" : "382:3-384:3",
               "resultTypeName" : "{http://hl7.org/fhir}Location",
               "type" : "SingletonFrom",
               "signature" : [ {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Location",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "operand" : {
                  "locator" : "382:18-384:3",
                  "type" : "Query",
                  "resultTypeSpecifier" : {
                     "type" : "ListTypeSpecifier",
                     "elementType" : {
                        "name" : "{http://hl7.org/fhir}Location",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "source" : [ {
                     "locator" : "383:5-383:16",
                     "alias" : "L",
                     "resultTypeSpecifier" : {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Location",
                           "type" : "NamedTypeSpecifier"
                        }
                     },
                     "expression" : {
                        "locator" : "383:5-383:14",
                        "dataType" : "{http://hl7.org/fhir}Location",
                        "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-location",
                        "type" : "Retrieve",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Location",
                              "type" : "NamedTypeSpecifier"
                           }
                        }
                     }
                  } ],
                  "relationship" : [ ],
                  "where" : {
                     "locator" : "383:18-383:57",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                     "type" : "Equal",
                     "signature" : [ {
                        "name" : "{urn:hl7-org:elm-types:r1}String",
                        "type" : "NamedTypeSpecifier"
                     }, {
                        "name" : "{urn:hl7-org:elm-types:r1}String",
                        "type" : "NamedTypeSpecifier"
                     } ],
                     "operand" : [ {
                        "locator" : "383:24-383:27",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                        "path" : "value",
                        "type" : "Property",
                        "source" : {
                           "path" : "id",
                           "scope" : "L",
                           "type" : "Property"
                        }
                     }, {
                        "locator" : "383:31-383:57",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                        "name" : "getId",
                        "libraryName" : "QICoreCommon",
                        "type" : "FunctionRef",
                        "signature" : [ {
                           "name" : "{urn:hl7-org:elm-types:r1}String",
                           "type" : "NamedTypeSpecifier"
                        } ],
                        "operand" : [ {
                           "locator" : "383:31-383:49",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                           "path" : "value",
                           "type" : "Property",
                           "source" : {
                              "path" : "reference",
                              "type" : "Property",
                              "source" : {
                                 "locator" : "383:31-383:39",
                                 "resultTypeName" : "{http://hl7.org/fhir}Reference",
                                 "name" : "reference",
                                 "type" : "OperandRef"
                              }
                           }
                        } ]
                     } ]
                  }
               }
            },
            "operand" : [ {
               "name" : "reference",
               "operandTypeSpecifier" : {
                  "locator" : "381:41-381:49",
                  "resultTypeName" : "{http://hl7.org/fhir}Reference",
                  "name" : "{http://hl7.org/fhir}Reference",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "195:1-201:9",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
            "name" : "Emergency Department Arrival Time",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns the emergency department arrival time for the encounter."
               } ]
            } ],
            "expression" : {
               "locator" : "196:2-201:9",
               "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
               "type" : "Start",
               "signature" : [ {
                  "type" : "IntervalTypeSpecifier",
                  "pointType" : {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "operand" : {
                  "locator" : "196:11-201:9",
                  "name" : "ToInterval",
                  "libraryName" : "FHIRHelpers",
                  "type" : "FunctionRef",
                  "resultTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "operand" : [ {
                     "path" : "period",
                     "type" : "Property",
                     "source" : {
                        "locator" : "196:11-201:2",
                        "resultTypeName" : "{http://hl7.org/fhir}Encounter.Location",
                        "type" : "SingletonFrom",
                        "signature" : [ {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter.Location",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "operand" : {
                           "locator" : "197:21-200:3",
                           "type" : "Query",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Encounter.Location",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "source" : [ {
                              "locator" : "198:10-198:71",
                              "alias" : "HospitalLocation",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter.Location",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "expression" : {
                                 "locator" : "198:10-198:54",
                                 "name" : "Hospitalization Locations",
                                 "type" : "FunctionRef",
                                 "resultTypeSpecifier" : {
                                    "type" : "ListTypeSpecifier",
                                    "elementType" : {
                                       "name" : "{http://hl7.org/fhir}Encounter.Location",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 },
                                 "signature" : [ {
                                    "name" : "{http://hl7.org/fhir}Encounter",
                                    "type" : "NamedTypeSpecifier"
                                 } ],
                                 "operand" : [ {
                                    "locator" : "198:40-198:51",
                                    "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                    "name" : "TheEncounter",
                                    "type" : "OperandRef"
                                 } ]
                              }
                           } ],
                           "relationship" : [ ],
                           "where" : {
                              "locator" : "199:5-199:85",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "AnyInValueSet",
                              "signature" : [ {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{urn:hl7-org:elm-types:r1}Concept",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              } ],
                              "codes" : {
                                 "locator" : "199:11-199:53",
                                 "type" : "Query",
                                 "resultTypeSpecifier" : {
                                    "type" : "ListTypeSpecifier",
                                    "elementType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}Concept",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 },
                                 "source" : [ {
                                    "alias" : "$this",
                                    "expression" : {
                                       "path" : "type",
                                       "type" : "Property",
                                       "source" : {
                                          "locator" : "199:11-199:48",
                                          "resultTypeName" : "{http://hl7.org/fhir}Location",
                                          "name" : "GetLocation",
                                          "type" : "FunctionRef",
                                          "signature" : [ {
                                             "name" : "{http://hl7.org/fhir}Reference",
                                             "type" : "NamedTypeSpecifier"
                                          } ],
                                          "operand" : [ {
                                             "locator" : "199:23-199:47",
                                             "resultTypeName" : "{http://hl7.org/fhir}Reference",
                                             "path" : "location",
                                             "scope" : "HospitalLocation",
                                             "type" : "Property"
                                          } ]
                                       }
                                    }
                                 } ],
                                 "return" : {
                                    "distinct" : false,
                                    "expression" : {
                                       "name" : "ToConcept",
                                       "libraryName" : "FHIRHelpers",
                                       "type" : "FunctionRef",
                                       "operand" : [ {
                                          "name" : "$this",
                                          "type" : "AliasRef"
                                       } ]
                                    }
                                 }
                              },
                              "valueset" : {
                                 "locator" : "199:58-199:85",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}ValueSet",
                                 "name" : "Emergency Department Visit",
                                 "preserve" : true
                              }
                           }
                        }
                     }
                  } ]
               }
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "195:66-195:74",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "206:1-212:9",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
            "name" : "emergencyDepartmentArrivalTime",
            "context" : "Patient",
            "accessLevel" : "Public",
            "fluent" : true,
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns the emergency department arrival time for the encounter."
               } ]
            } ],
            "expression" : {
               "locator" : "207:2-212:9",
               "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
               "type" : "Start",
               "signature" : [ {
                  "type" : "IntervalTypeSpecifier",
                  "pointType" : {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "operand" : {
                  "locator" : "207:11-212:9",
                  "name" : "ToInterval",
                  "libraryName" : "FHIRHelpers",
                  "type" : "FunctionRef",
                  "resultTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "operand" : [ {
                     "path" : "period",
                     "type" : "Property",
                     "source" : {
                        "locator" : "207:11-212:2",
                        "resultTypeName" : "{http://hl7.org/fhir}Encounter.Location",
                        "type" : "SingletonFrom",
                        "signature" : [ {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter.Location",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "operand" : {
                           "locator" : "208:21-211:3",
                           "type" : "Query",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Encounter.Location",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "source" : [ {
                              "locator" : "209:10-209:74",
                              "alias" : "HospitalLocation",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter.Location",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "expression" : {
                                 "locator" : "209:10-209:57",
                                 "name" : "hospitalizationLocations",
                                 "type" : "FunctionRef",
                                 "resultTypeSpecifier" : {
                                    "type" : "ListTypeSpecifier",
                                    "elementType" : {
                                       "name" : "{http://hl7.org/fhir}Encounter.Location",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 },
                                 "signature" : [ {
                                    "name" : "{http://hl7.org/fhir}Encounter",
                                    "type" : "NamedTypeSpecifier"
                                 } ],
                                 "operand" : [ {
                                    "locator" : "209:13-209:24",
                                    "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                    "name" : "TheEncounter",
                                    "type" : "OperandRef"
                                 } ]
                              }
                           } ],
                           "relationship" : [ ],
                           "where" : {
                              "locator" : "210:5-210:85",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "AnyInValueSet",
                              "signature" : [ {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{urn:hl7-org:elm-types:r1}Concept",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              } ],
                              "codes" : {
                                 "locator" : "210:11-210:53",
                                 "type" : "Query",
                                 "resultTypeSpecifier" : {
                                    "type" : "ListTypeSpecifier",
                                    "elementType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}Concept",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 },
                                 "source" : [ {
                                    "alias" : "$this",
                                    "expression" : {
                                       "path" : "type",
                                       "type" : "Property",
                                       "source" : {
                                          "locator" : "210:11-210:48",
                                          "resultTypeName" : "{http://hl7.org/fhir}Location",
                                          "name" : "GetLocation",
                                          "type" : "FunctionRef",
                                          "signature" : [ {
                                             "name" : "{http://hl7.org/fhir}Reference",
                                             "type" : "NamedTypeSpecifier"
                                          } ],
                                          "operand" : [ {
                                             "locator" : "210:23-210:47",
                                             "resultTypeName" : "{http://hl7.org/fhir}Reference",
                                             "path" : "location",
                                             "scope" : "HospitalLocation",
                                             "type" : "Property"
                                          } ]
                                       }
                                    }
                                 } ],
                                 "return" : {
                                    "distinct" : false,
                                    "expression" : {
                                       "name" : "ToConcept",
                                       "libraryName" : "FHIRHelpers",
                                       "type" : "FunctionRef",
                                       "operand" : [ {
                                          "name" : "$this",
                                          "type" : "AliasRef"
                                       } ]
                                    }
                                 }
                              },
                              "valueset" : {
                                 "locator" : "210:58-210:85",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}ValueSet",
                                 "name" : "Emergency Department Visit",
                                 "preserve" : true
                              }
                           }
                        }
                     }
                  } ]
               }
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "206:68-206:76",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "218:1-236:107",
            "name" : "HospitalizationWithObservationAndOutpatientSurgeryService",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Hospitalization with Observation and Outpatient Surgery Service returns the total interval from the start of any immediately prior emergency department visit, outpatient surgery visit or observation visit to the discharge of the given encounter."
               }, {
                  "name" : "deprecated",
                  "value" : "This function is deprecated. Use the fluent function `hospitalizationWithObservationAndOutpatientSurgeryService()` instead."
               } ]
            } ],
            "resultTypeSpecifier" : {
               "type" : "IntervalTypeSpecifier",
               "pointType" : {
                  "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "type" : "NamedTypeSpecifier"
               }
            },
            "expression" : {
               "locator" : "219:3-236:107",
               "type" : "Query",
               "resultTypeSpecifier" : {
                  "type" : "IntervalTypeSpecifier",
                  "pointType" : {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               },
               "source" : [ {
                  "locator" : "219:3-219:20",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "alias" : "Visit",
                  "expression" : {
                     "locator" : "219:3-219:14",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "name" : "TheEncounter",
                     "type" : "OperandRef"
                  }
               } ],
               "let" : [ {
                  "locator" : "220:8-224:6",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "identifier" : "ObsVisit",
                  "expression" : {
                     "locator" : "220:18-224:6",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "type" : "Last",
                     "signature" : [ {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Encounter",
                           "type" : "NamedTypeSpecifier"
                        }
                     } ],
                     "source" : {
                        "locator" : "220:23-223:26",
                        "type" : "Query",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "source" : [ {
                           "locator" : "220:23-220:65",
                           "alias" : "LastObs",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Encounter",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "expression" : {
                              "locator" : "220:23-220:57",
                              "dataType" : "{http://hl7.org/fhir}Encounter",
                              "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter",
                              "codeProperty" : "type",
                              "codeComparator" : "in",
                              "type" : "Retrieve",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "codes" : {
                                 "locator" : "220:35-220:56",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}ValueSet",
                                 "name" : "Observation Services",
                                 "preserve" : true,
                                 "type" : "ValueSetRef"
                              }
                           }
                        } ],
                        "relationship" : [ ],
                        "where" : {
                           "locator" : "221:6-222:83",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                           "type" : "And",
                           "signature" : [ {
                              "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "NamedTypeSpecifier"
                           }, {
                              "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "NamedTypeSpecifier"
                           } ],
                           "operand" : [ {
                              "locator" : "221:12-221:38",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "Equal",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              }, {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : [ {
                                 "locator" : "221:12-221:25",
                                 "resultTypeName" : "{http://hl7.org/fhir}EncounterStatus",
                                 "path" : "value",
                                 "type" : "Property",
                                 "source" : {
                                    "path" : "status",
                                    "scope" : "LastObs",
                                    "type" : "Property"
                                 }
                              }, {
                                 "locator" : "221:29-221:38",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                                 "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                 "value" : "finished",
                                 "type" : "Literal"
                              } ]
                           }, {
                              "locator" : "222:15-222:83",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "And",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                 "type" : "NamedTypeSpecifier"
                              }, {
                                 "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : [ {
                                 "locator" : "222:35-222:48",
                                 "type" : "In",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }, {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : [ {
                                    "locator" : "222:30-222:33",
                                    "type" : "End",
                                    "signature" : [ {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    } ],
                                    "operand" : {
                                       "locator" : "222:15-222:28",
                                       "name" : "ToInterval",
                                       "libraryName" : "FHIRHelpers",
                                       "type" : "FunctionRef",
                                       "resultTypeSpecifier" : {
                                          "type" : "IntervalTypeSpecifier",
                                          "pointType" : {
                                             "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       },
                                       "operand" : [ {
                                          "path" : "period",
                                          "scope" : "LastObs",
                                          "type" : "Property"
                                       } ]
                                    }
                                 }, {
                                    "locator" : "222:35-222:48",
                                    "lowClosed" : true,
                                    "highClosed" : true,
                                    "type" : "Interval",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "low" : {
                                       "locator" : "222:63-222:83",
                                       "type" : "Subtract",
                                       "signature" : [ {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }, {
                                          "name" : "{urn:hl7-org:elm-types:r1}Quantity",
                                          "type" : "NamedTypeSpecifier"
                                       } ],
                                       "operand" : [ {
                                          "locator" : "222:63-222:83",
                                          "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "Start",
                                          "signature" : [ {
                                             "type" : "IntervalTypeSpecifier",
                                             "pointType" : {
                                                "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                                "type" : "NamedTypeSpecifier"
                                             }
                                          } ],
                                          "operand" : {
                                             "locator" : "222:72-222:83",
                                             "name" : "ToInterval",
                                             "libraryName" : "FHIRHelpers",
                                             "type" : "FunctionRef",
                                             "resultTypeSpecifier" : {
                                                "type" : "IntervalTypeSpecifier",
                                                "pointType" : {
                                                   "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                                   "type" : "NamedTypeSpecifier"
                                                }
                                             },
                                             "operand" : [ {
                                                "path" : "period",
                                                "scope" : "Visit",
                                                "type" : "Property"
                                             } ]
                                          }
                                       }, {
                                          "locator" : "222:35-222:40",
                                          "resultTypeName" : "{urn:hl7-org:elm-types:r1}Quantity",
                                          "value" : 1,
                                          "unit" : "hour",
                                          "type" : "Quantity"
                                       } ]
                                    },
                                    "high" : {
                                       "locator" : "222:63-222:83",
                                       "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "Start",
                                       "signature" : [ {
                                          "type" : "IntervalTypeSpecifier",
                                          "pointType" : {
                                             "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       } ],
                                       "operand" : {
                                          "locator" : "222:72-222:83",
                                          "name" : "ToInterval",
                                          "libraryName" : "FHIRHelpers",
                                          "type" : "FunctionRef",
                                          "resultTypeSpecifier" : {
                                             "type" : "IntervalTypeSpecifier",
                                             "pointType" : {
                                                "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                                "type" : "NamedTypeSpecifier"
                                             }
                                          },
                                          "operand" : [ {
                                             "path" : "period",
                                             "scope" : "Visit",
                                             "type" : "Property"
                                          } ]
                                       }
                                    }
                                 } ]
                              }, {
                                 "locator" : "222:35-222:48",
                                 "type" : "Not",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                    "type" : "NamedTypeSpecifier"
                                 } ],
                                 "operand" : {
                                    "locator" : "222:35-222:48",
                                    "type" : "IsNull",
                                    "signature" : [ {
                                       "name" : "{urn:hl7-org:elm-types:r1}Any",
                                       "type" : "NamedTypeSpecifier"
                                    } ],
                                    "operand" : {
                                       "locator" : "222:63-222:83",
                                       "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "Start",
                                       "signature" : [ {
                                          "type" : "IntervalTypeSpecifier",
                                          "pointType" : {
                                             "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       } ],
                                       "operand" : {
                                          "locator" : "222:72-222:83",
                                          "name" : "ToInterval",
                                          "libraryName" : "FHIRHelpers",
                                          "type" : "FunctionRef",
                                          "resultTypeSpecifier" : {
                                             "type" : "IntervalTypeSpecifier",
                                             "pointType" : {
                                                "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                                "type" : "NamedTypeSpecifier"
                                             }
                                          },
                                          "operand" : [ {
                                             "path" : "period",
                                             "scope" : "Visit",
                                             "type" : "Property"
                                          } ]
                                       }
                                    }
                                 }
                              } ]
                           } ]
                        },
                        "sort" : {
                           "locator" : "223:6-223:26",
                           "by" : [ {
                              "locator" : "223:14-223:26",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "direction" : "asc",
                              "type" : "ByExpression",
                              "expression" : {
                                 "locator" : "223:14-223:26",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "End",
                                 "signature" : [ {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : {
                                    "locator" : "223:21-223:26",
                                    "name" : "ToInterval",
                                    "libraryName" : "FHIRHelpers",
                                    "type" : "FunctionRef",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "operand" : [ {
                                       "name" : "period",
                                       "type" : "IdentifierRef"
                                    } ]
                                 }
                              }
                           } ]
                        }
                     }
                  }
               }, {
                  "locator" : "225:6-225:74",
                  "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "identifier" : "VisitStart",
                  "expression" : {
                     "locator" : "225:18-225:74",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "Coalesce",
                     "signature" : [ {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }, {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     } ],
                     "operand" : [ {
                        "locator" : "225:27-225:50",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "Start",
                        "signature" : [ {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "operand" : {
                           "locator" : "225:36-225:50",
                           "name" : "ToInterval",
                           "libraryName" : "FHIRHelpers",
                           "type" : "FunctionRef",
                           "resultTypeSpecifier" : {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "operand" : [ {
                              "path" : "period",
                              "type" : "Property",
                              "source" : {
                                 "locator" : "225:36-225:43",
                                 "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                 "name" : "ObsVisit",
                                 "type" : "QueryLetRef"
                              }
                           } ]
                        }
                     }, {
                        "locator" : "225:53-225:73",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "Start",
                        "signature" : [ {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "operand" : {
                           "locator" : "225:62-225:73",
                           "name" : "ToInterval",
                           "libraryName" : "FHIRHelpers",
                           "type" : "FunctionRef",
                           "resultTypeSpecifier" : {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "operand" : [ {
                              "path" : "period",
                              "scope" : "Visit",
                              "type" : "Property"
                           } ]
                        }
                     } ]
                  }
               }, {
                  "locator" : "226:6-230:6",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "identifier" : "EDVisit",
                  "expression" : {
                     "locator" : "226:15-230:6",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "type" : "Last",
                     "signature" : [ {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Encounter",
                           "type" : "NamedTypeSpecifier"
                        }
                     } ],
                     "source" : {
                        "locator" : "226:20-229:26",
                        "type" : "Query",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "source" : [ {
                           "locator" : "226:20-226:67",
                           "alias" : "LastED",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Encounter",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "expression" : {
                              "locator" : "226:20-226:60",
                              "dataType" : "{http://hl7.org/fhir}Encounter",
                              "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter",
                              "codeProperty" : "type",
                              "codeComparator" : "in",
                              "type" : "Retrieve",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "codes" : {
                                 "locator" : "226:32-226:59",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}ValueSet",
                                 "name" : "Emergency Department Visit",
                                 "preserve" : true,
                                 "type" : "ValueSetRef"
                              }
                           }
                        } ],
                        "relationship" : [ ],
                        "where" : {
                           "locator" : "227:6-228:71",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                           "type" : "And",
                           "signature" : [ {
                              "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "NamedTypeSpecifier"
                           }, {
                              "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "NamedTypeSpecifier"
                           } ],
                           "operand" : [ {
                              "locator" : "227:12-227:37",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "Equal",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              }, {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : [ {
                                 "locator" : "227:12-227:24",
                                 "resultTypeName" : "{http://hl7.org/fhir}EncounterStatus",
                                 "path" : "value",
                                 "type" : "Property",
                                 "source" : {
                                    "path" : "status",
                                    "scope" : "LastED",
                                    "type" : "Property"
                                 }
                              }, {
                                 "locator" : "227:28-227:37",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                                 "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                 "value" : "finished",
                                 "type" : "Literal"
                              } ]
                           }, {
                              "locator" : "228:15-228:71",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "And",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                 "type" : "NamedTypeSpecifier"
                              }, {
                                 "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : [ {
                                 "locator" : "228:34-228:47",
                                 "type" : "In",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }, {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : [ {
                                    "locator" : "228:29-228:32",
                                    "type" : "End",
                                    "signature" : [ {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    } ],
                                    "operand" : {
                                       "locator" : "228:15-228:27",
                                       "name" : "ToInterval",
                                       "libraryName" : "FHIRHelpers",
                                       "type" : "FunctionRef",
                                       "resultTypeSpecifier" : {
                                          "type" : "IntervalTypeSpecifier",
                                          "pointType" : {
                                             "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       },
                                       "operand" : [ {
                                          "path" : "period",
                                          "scope" : "LastED",
                                          "type" : "Property"
                                       } ]
                                    }
                                 }, {
                                    "locator" : "228:34-228:47",
                                    "lowClosed" : true,
                                    "highClosed" : true,
                                    "type" : "Interval",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "low" : {
                                       "locator" : "228:62-228:71",
                                       "type" : "Subtract",
                                       "signature" : [ {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }, {
                                          "name" : "{urn:hl7-org:elm-types:r1}Quantity",
                                          "type" : "NamedTypeSpecifier"
                                       } ],
                                       "operand" : [ {
                                          "locator" : "228:62-228:71",
                                          "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "name" : "VisitStart",
                                          "type" : "QueryLetRef"
                                       }, {
                                          "locator" : "228:34-228:39",
                                          "resultTypeName" : "{urn:hl7-org:elm-types:r1}Quantity",
                                          "value" : 1,
                                          "unit" : "hour",
                                          "type" : "Quantity"
                                       } ]
                                    },
                                    "high" : {
                                       "locator" : "228:62-228:71",
                                       "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "name" : "VisitStart",
                                       "type" : "QueryLetRef"
                                    }
                                 } ]
                              }, {
                                 "locator" : "228:34-228:47",
                                 "type" : "Not",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                    "type" : "NamedTypeSpecifier"
                                 } ],
                                 "operand" : {
                                    "locator" : "228:34-228:47",
                                    "type" : "IsNull",
                                    "signature" : [ {
                                       "name" : "{urn:hl7-org:elm-types:r1}Any",
                                       "type" : "NamedTypeSpecifier"
                                    } ],
                                    "operand" : {
                                       "locator" : "228:62-228:71",
                                       "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "name" : "VisitStart",
                                       "type" : "QueryLetRef"
                                    }
                                 }
                              } ]
                           } ]
                        },
                        "sort" : {
                           "locator" : "229:6-229:26",
                           "by" : [ {
                              "locator" : "229:14-229:26",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "direction" : "asc",
                              "type" : "ByExpression",
                              "expression" : {
                                 "locator" : "229:14-229:26",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "End",
                                 "signature" : [ {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : {
                                    "locator" : "229:21-229:26",
                                    "name" : "ToInterval",
                                    "libraryName" : "FHIRHelpers",
                                    "type" : "FunctionRef",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "operand" : [ {
                                       "name" : "period",
                                       "type" : "IdentifierRef"
                                    } ]
                                 }
                              }
                           } ]
                        }
                     }
                  }
               }, {
                  "locator" : "231:6-231:68",
                  "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "identifier" : "VisitStartWithED",
                  "expression" : {
                     "locator" : "231:24-231:68",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "Coalesce",
                     "signature" : [ {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }, {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     } ],
                     "operand" : [ {
                        "locator" : "231:33-231:55",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "Start",
                        "signature" : [ {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "operand" : {
                           "locator" : "231:42-231:55",
                           "name" : "ToInterval",
                           "libraryName" : "FHIRHelpers",
                           "type" : "FunctionRef",
                           "resultTypeSpecifier" : {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "operand" : [ {
                              "path" : "period",
                              "type" : "Property",
                              "source" : {
                                 "locator" : "231:42-231:48",
                                 "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                 "name" : "EDVisit",
                                 "type" : "QueryLetRef"
                              }
                           } ]
                        }
                     }, {
                        "locator" : "231:58-231:67",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "name" : "VisitStart",
                        "type" : "QueryLetRef"
                     } ]
                  }
               }, {
                  "locator" : "232:6-235:6",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "identifier" : "OutpatientSurgeryVisit",
                  "expression" : {
                     "locator" : "232:30-235:6",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "type" : "Last",
                     "signature" : [ {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Encounter",
                           "type" : "NamedTypeSpecifier"
                        }
                     } ],
                     "source" : {
                        "locator" : "232:35-234:26",
                        "type" : "Query",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "source" : [ {
                           "locator" : "232:35-232:89",
                           "alias" : "LastSurgeryOP",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Encounter",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "expression" : {
                              "locator" : "232:35-232:75",
                              "dataType" : "{http://hl7.org/fhir}Encounter",
                              "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter",
                              "codeProperty" : "type",
                              "codeComparator" : "in",
                              "type" : "Retrieve",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "codes" : {
                                 "locator" : "232:47-232:74",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}ValueSet",
                                 "name" : "Outpatient Surgery Service",
                                 "preserve" : true,
                                 "type" : "ValueSetRef"
                              }
                           }
                        } ],
                        "relationship" : [ ],
                        "where" : {
                           "locator" : "233:6-233:81",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                           "type" : "And",
                           "signature" : [ {
                              "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "NamedTypeSpecifier"
                           }, {
                              "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "NamedTypeSpecifier"
                           } ],
                           "operand" : [ {
                              "locator" : "233:38-233:51",
                              "type" : "In",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }, {
                                 "type" : "IntervalTypeSpecifier",
                                 "pointType" : {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              } ],
                              "operand" : [ {
                                 "locator" : "233:33-233:36",
                                 "type" : "End",
                                 "signature" : [ {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : {
                                    "locator" : "233:12-233:31",
                                    "name" : "ToInterval",
                                    "libraryName" : "FHIRHelpers",
                                    "type" : "FunctionRef",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "operand" : [ {
                                       "path" : "period",
                                       "scope" : "LastSurgeryOP",
                                       "type" : "Property"
                                    } ]
                                 }
                              }, {
                                 "locator" : "233:38-233:51",
                                 "lowClosed" : true,
                                 "highClosed" : true,
                                 "type" : "Interval",
                                 "resultTypeSpecifier" : {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 },
                                 "low" : {
                                    "locator" : "233:66-233:81",
                                    "type" : "Subtract",
                                    "signature" : [ {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }, {
                                       "name" : "{urn:hl7-org:elm-types:r1}Quantity",
                                       "type" : "NamedTypeSpecifier"
                                    } ],
                                    "operand" : [ {
                                       "locator" : "233:66-233:81",
                                       "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "name" : "VisitStartWithED",
                                       "type" : "QueryLetRef"
                                    }, {
                                       "locator" : "233:38-233:43",
                                       "resultTypeName" : "{urn:hl7-org:elm-types:r1}Quantity",
                                       "value" : 1,
                                       "unit" : "hour",
                                       "type" : "Quantity"
                                    } ]
                                 },
                                 "high" : {
                                    "locator" : "233:66-233:81",
                                    "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "name" : "VisitStartWithED",
                                    "type" : "QueryLetRef"
                                 }
                              } ]
                           }, {
                              "locator" : "233:38-233:51",
                              "type" : "Not",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : {
                                 "locator" : "233:38-233:51",
                                 "type" : "IsNull",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}Any",
                                    "type" : "NamedTypeSpecifier"
                                 } ],
                                 "operand" : {
                                    "locator" : "233:66-233:81",
                                    "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "name" : "VisitStartWithED",
                                    "type" : "QueryLetRef"
                                 }
                              }
                           } ]
                        },
                        "sort" : {
                           "locator" : "234:6-234:26",
                           "by" : [ {
                              "locator" : "234:14-234:26",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "direction" : "asc",
                              "type" : "ByExpression",
                              "expression" : {
                                 "locator" : "234:14-234:26",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "End",
                                 "signature" : [ {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : {
                                    "locator" : "234:21-234:26",
                                    "name" : "ToInterval",
                                    "libraryName" : "FHIRHelpers",
                                    "type" : "FunctionRef",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "operand" : [ {
                                       "name" : "period",
                                       "type" : "IdentifierRef"
                                    } ]
                                 }
                              }
                           } ]
                        }
                     }
                  }
               } ],
               "relationship" : [ ],
               "return" : {
                  "locator" : "236:4-236:107",
                  "resultTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "expression" : {
                     "locator" : "236:11-236:107",
                     "lowClosed" : true,
                     "highClosed" : true,
                     "type" : "Interval",
                     "resultTypeSpecifier" : {
                        "type" : "IntervalTypeSpecifier",
                        "pointType" : {
                           "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "NamedTypeSpecifier"
                        }
                     },
                     "low" : {
                        "locator" : "236:20-236:85",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "Coalesce",
                        "signature" : [ {
                           "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "NamedTypeSpecifier"
                        }, {
                           "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "NamedTypeSpecifier"
                        } ],
                        "operand" : [ {
                           "locator" : "236:29-236:66",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "Start",
                           "signature" : [ {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           } ],
                           "operand" : {
                              "locator" : "236:38-236:66",
                              "name" : "ToInterval",
                              "libraryName" : "FHIRHelpers",
                              "type" : "FunctionRef",
                              "resultTypeSpecifier" : {
                                 "type" : "IntervalTypeSpecifier",
                                 "pointType" : {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "operand" : [ {
                                 "path" : "period",
                                 "type" : "Property",
                                 "source" : {
                                    "locator" : "236:38-236:59",
                                    "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                    "name" : "OutpatientSurgeryVisit",
                                    "type" : "QueryLetRef"
                                 }
                              } ]
                           }
                        }, {
                           "locator" : "236:69-236:84",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "name" : "VisitStartWithED",
                           "type" : "QueryLetRef"
                        } ]
                     },
                     "high" : {
                        "locator" : "236:88-236:106",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "End",
                        "signature" : [ {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "operand" : {
                           "locator" : "236:95-236:106",
                           "name" : "ToInterval",
                           "libraryName" : "FHIRHelpers",
                           "type" : "FunctionRef",
                           "resultTypeSpecifier" : {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "operand" : [ {
                              "path" : "period",
                              "scope" : "Visit",
                              "type" : "Property"
                           } ]
                        }
                     }
                  }
               }
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "218:90-218:100",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "241:1-259:107",
            "name" : "hospitalizationWithObservationAndOutpatientSurgeryService",
            "context" : "Patient",
            "accessLevel" : "Public",
            "fluent" : true,
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Hospitalization with Observation and Outpatient Surgery Service returns the total interval from the start of any immediately prior emergency department visit, outpatient surgery visit or observation visit to the discharge of the given encounter."
               } ]
            } ],
            "resultTypeSpecifier" : {
               "type" : "IntervalTypeSpecifier",
               "pointType" : {
                  "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "type" : "NamedTypeSpecifier"
               }
            },
            "expression" : {
               "locator" : "242:3-259:107",
               "type" : "Query",
               "resultTypeSpecifier" : {
                  "type" : "IntervalTypeSpecifier",
                  "pointType" : {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               },
               "source" : [ {
                  "locator" : "242:3-242:20",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "alias" : "Visit",
                  "expression" : {
                     "locator" : "242:3-242:14",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "name" : "TheEncounter",
                     "type" : "OperandRef"
                  }
               } ],
               "let" : [ {
                  "locator" : "243:8-247:6",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "identifier" : "ObsVisit",
                  "expression" : {
                     "locator" : "243:18-247:6",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "type" : "Last",
                     "signature" : [ {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Encounter",
                           "type" : "NamedTypeSpecifier"
                        }
                     } ],
                     "source" : {
                        "locator" : "243:23-246:26",
                        "type" : "Query",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "source" : [ {
                           "locator" : "243:23-243:65",
                           "alias" : "LastObs",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Encounter",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "expression" : {
                              "locator" : "243:23-243:57",
                              "dataType" : "{http://hl7.org/fhir}Encounter",
                              "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter",
                              "codeProperty" : "type",
                              "codeComparator" : "in",
                              "type" : "Retrieve",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "codes" : {
                                 "locator" : "243:35-243:56",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}ValueSet",
                                 "name" : "Observation Services",
                                 "preserve" : true,
                                 "type" : "ValueSetRef"
                              }
                           }
                        } ],
                        "relationship" : [ ],
                        "where" : {
                           "locator" : "244:6-245:83",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                           "type" : "And",
                           "signature" : [ {
                              "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "NamedTypeSpecifier"
                           }, {
                              "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "NamedTypeSpecifier"
                           } ],
                           "operand" : [ {
                              "locator" : "244:12-244:38",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "Equal",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              }, {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : [ {
                                 "locator" : "244:12-244:25",
                                 "resultTypeName" : "{http://hl7.org/fhir}EncounterStatus",
                                 "path" : "value",
                                 "type" : "Property",
                                 "source" : {
                                    "path" : "status",
                                    "scope" : "LastObs",
                                    "type" : "Property"
                                 }
                              }, {
                                 "locator" : "244:29-244:38",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                                 "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                 "value" : "finished",
                                 "type" : "Literal"
                              } ]
                           }, {
                              "locator" : "245:15-245:83",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "And",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                 "type" : "NamedTypeSpecifier"
                              }, {
                                 "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : [ {
                                 "locator" : "245:35-245:48",
                                 "type" : "In",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }, {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : [ {
                                    "locator" : "245:30-245:33",
                                    "type" : "End",
                                    "signature" : [ {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    } ],
                                    "operand" : {
                                       "locator" : "245:15-245:28",
                                       "name" : "ToInterval",
                                       "libraryName" : "FHIRHelpers",
                                       "type" : "FunctionRef",
                                       "resultTypeSpecifier" : {
                                          "type" : "IntervalTypeSpecifier",
                                          "pointType" : {
                                             "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       },
                                       "operand" : [ {
                                          "path" : "period",
                                          "scope" : "LastObs",
                                          "type" : "Property"
                                       } ]
                                    }
                                 }, {
                                    "locator" : "245:35-245:48",
                                    "lowClosed" : true,
                                    "highClosed" : true,
                                    "type" : "Interval",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "low" : {
                                       "locator" : "245:63-245:83",
                                       "type" : "Subtract",
                                       "signature" : [ {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }, {
                                          "name" : "{urn:hl7-org:elm-types:r1}Quantity",
                                          "type" : "NamedTypeSpecifier"
                                       } ],
                                       "operand" : [ {
                                          "locator" : "245:63-245:83",
                                          "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "Start",
                                          "signature" : [ {
                                             "type" : "IntervalTypeSpecifier",
                                             "pointType" : {
                                                "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                                "type" : "NamedTypeSpecifier"
                                             }
                                          } ],
                                          "operand" : {
                                             "locator" : "245:72-245:83",
                                             "name" : "ToInterval",
                                             "libraryName" : "FHIRHelpers",
                                             "type" : "FunctionRef",
                                             "resultTypeSpecifier" : {
                                                "type" : "IntervalTypeSpecifier",
                                                "pointType" : {
                                                   "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                                   "type" : "NamedTypeSpecifier"
                                                }
                                             },
                                             "operand" : [ {
                                                "path" : "period",
                                                "scope" : "Visit",
                                                "type" : "Property"
                                             } ]
                                          }
                                       }, {
                                          "locator" : "245:35-245:40",
                                          "resultTypeName" : "{urn:hl7-org:elm-types:r1}Quantity",
                                          "value" : 1,
                                          "unit" : "hour",
                                          "type" : "Quantity"
                                       } ]
                                    },
                                    "high" : {
                                       "locator" : "245:63-245:83",
                                       "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "Start",
                                       "signature" : [ {
                                          "type" : "IntervalTypeSpecifier",
                                          "pointType" : {
                                             "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       } ],
                                       "operand" : {
                                          "locator" : "245:72-245:83",
                                          "name" : "ToInterval",
                                          "libraryName" : "FHIRHelpers",
                                          "type" : "FunctionRef",
                                          "resultTypeSpecifier" : {
                                             "type" : "IntervalTypeSpecifier",
                                             "pointType" : {
                                                "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                                "type" : "NamedTypeSpecifier"
                                             }
                                          },
                                          "operand" : [ {
                                             "path" : "period",
                                             "scope" : "Visit",
                                             "type" : "Property"
                                          } ]
                                       }
                                    }
                                 } ]
                              }, {
                                 "locator" : "245:35-245:48",
                                 "type" : "Not",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                    "type" : "NamedTypeSpecifier"
                                 } ],
                                 "operand" : {
                                    "locator" : "245:35-245:48",
                                    "type" : "IsNull",
                                    "signature" : [ {
                                       "name" : "{urn:hl7-org:elm-types:r1}Any",
                                       "type" : "NamedTypeSpecifier"
                                    } ],
                                    "operand" : {
                                       "locator" : "245:63-245:83",
                                       "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "Start",
                                       "signature" : [ {
                                          "type" : "IntervalTypeSpecifier",
                                          "pointType" : {
                                             "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       } ],
                                       "operand" : {
                                          "locator" : "245:72-245:83",
                                          "name" : "ToInterval",
                                          "libraryName" : "FHIRHelpers",
                                          "type" : "FunctionRef",
                                          "resultTypeSpecifier" : {
                                             "type" : "IntervalTypeSpecifier",
                                             "pointType" : {
                                                "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                                "type" : "NamedTypeSpecifier"
                                             }
                                          },
                                          "operand" : [ {
                                             "path" : "period",
                                             "scope" : "Visit",
                                             "type" : "Property"
                                          } ]
                                       }
                                    }
                                 }
                              } ]
                           } ]
                        },
                        "sort" : {
                           "locator" : "246:6-246:26",
                           "by" : [ {
                              "locator" : "246:14-246:26",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "direction" : "asc",
                              "type" : "ByExpression",
                              "expression" : {
                                 "locator" : "246:14-246:26",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "End",
                                 "signature" : [ {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : {
                                    "locator" : "246:21-246:26",
                                    "name" : "ToInterval",
                                    "libraryName" : "FHIRHelpers",
                                    "type" : "FunctionRef",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "operand" : [ {
                                       "name" : "period",
                                       "type" : "IdentifierRef"
                                    } ]
                                 }
                              }
                           } ]
                        }
                     }
                  }
               }, {
                  "locator" : "248:6-248:74",
                  "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "identifier" : "VisitStart",
                  "expression" : {
                     "locator" : "248:18-248:74",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "Coalesce",
                     "signature" : [ {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }, {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     } ],
                     "operand" : [ {
                        "locator" : "248:27-248:50",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "Start",
                        "signature" : [ {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "operand" : {
                           "locator" : "248:36-248:50",
                           "name" : "ToInterval",
                           "libraryName" : "FHIRHelpers",
                           "type" : "FunctionRef",
                           "resultTypeSpecifier" : {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "operand" : [ {
                              "path" : "period",
                              "type" : "Property",
                              "source" : {
                                 "locator" : "248:36-248:43",
                                 "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                 "name" : "ObsVisit",
                                 "type" : "QueryLetRef"
                              }
                           } ]
                        }
                     }, {
                        "locator" : "248:53-248:73",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "Start",
                        "signature" : [ {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "operand" : {
                           "locator" : "248:62-248:73",
                           "name" : "ToInterval",
                           "libraryName" : "FHIRHelpers",
                           "type" : "FunctionRef",
                           "resultTypeSpecifier" : {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "operand" : [ {
                              "path" : "period",
                              "scope" : "Visit",
                              "type" : "Property"
                           } ]
                        }
                     } ]
                  }
               }, {
                  "locator" : "249:6-253:6",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "identifier" : "EDVisit",
                  "expression" : {
                     "locator" : "249:15-253:6",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "type" : "Last",
                     "signature" : [ {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Encounter",
                           "type" : "NamedTypeSpecifier"
                        }
                     } ],
                     "source" : {
                        "locator" : "249:20-252:26",
                        "type" : "Query",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "source" : [ {
                           "locator" : "249:20-249:67",
                           "alias" : "LastED",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Encounter",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "expression" : {
                              "locator" : "249:20-249:60",
                              "dataType" : "{http://hl7.org/fhir}Encounter",
                              "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter",
                              "codeProperty" : "type",
                              "codeComparator" : "in",
                              "type" : "Retrieve",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "codes" : {
                                 "locator" : "249:32-249:59",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}ValueSet",
                                 "name" : "Emergency Department Visit",
                                 "preserve" : true,
                                 "type" : "ValueSetRef"
                              }
                           }
                        } ],
                        "relationship" : [ ],
                        "where" : {
                           "locator" : "250:6-251:71",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                           "type" : "And",
                           "signature" : [ {
                              "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "NamedTypeSpecifier"
                           }, {
                              "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "NamedTypeSpecifier"
                           } ],
                           "operand" : [ {
                              "locator" : "250:12-250:37",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "Equal",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              }, {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : [ {
                                 "locator" : "250:12-250:24",
                                 "resultTypeName" : "{http://hl7.org/fhir}EncounterStatus",
                                 "path" : "value",
                                 "type" : "Property",
                                 "source" : {
                                    "path" : "status",
                                    "scope" : "LastED",
                                    "type" : "Property"
                                 }
                              }, {
                                 "locator" : "250:28-250:37",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                                 "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                 "value" : "finished",
                                 "type" : "Literal"
                              } ]
                           }, {
                              "locator" : "251:15-251:71",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "And",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                 "type" : "NamedTypeSpecifier"
                              }, {
                                 "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : [ {
                                 "locator" : "251:34-251:47",
                                 "type" : "In",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }, {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : [ {
                                    "locator" : "251:29-251:32",
                                    "type" : "End",
                                    "signature" : [ {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    } ],
                                    "operand" : {
                                       "locator" : "251:15-251:27",
                                       "name" : "ToInterval",
                                       "libraryName" : "FHIRHelpers",
                                       "type" : "FunctionRef",
                                       "resultTypeSpecifier" : {
                                          "type" : "IntervalTypeSpecifier",
                                          "pointType" : {
                                             "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       },
                                       "operand" : [ {
                                          "path" : "period",
                                          "scope" : "LastED",
                                          "type" : "Property"
                                       } ]
                                    }
                                 }, {
                                    "locator" : "251:34-251:47",
                                    "lowClosed" : true,
                                    "highClosed" : true,
                                    "type" : "Interval",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "low" : {
                                       "locator" : "251:62-251:71",
                                       "type" : "Subtract",
                                       "signature" : [ {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }, {
                                          "name" : "{urn:hl7-org:elm-types:r1}Quantity",
                                          "type" : "NamedTypeSpecifier"
                                       } ],
                                       "operand" : [ {
                                          "locator" : "251:62-251:71",
                                          "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "name" : "VisitStart",
                                          "type" : "QueryLetRef"
                                       }, {
                                          "locator" : "251:34-251:39",
                                          "resultTypeName" : "{urn:hl7-org:elm-types:r1}Quantity",
                                          "value" : 1,
                                          "unit" : "hour",
                                          "type" : "Quantity"
                                       } ]
                                    },
                                    "high" : {
                                       "locator" : "251:62-251:71",
                                       "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "name" : "VisitStart",
                                       "type" : "QueryLetRef"
                                    }
                                 } ]
                              }, {
                                 "locator" : "251:34-251:47",
                                 "type" : "Not",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                    "type" : "NamedTypeSpecifier"
                                 } ],
                                 "operand" : {
                                    "locator" : "251:34-251:47",
                                    "type" : "IsNull",
                                    "signature" : [ {
                                       "name" : "{urn:hl7-org:elm-types:r1}Any",
                                       "type" : "NamedTypeSpecifier"
                                    } ],
                                    "operand" : {
                                       "locator" : "251:62-251:71",
                                       "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "name" : "VisitStart",
                                       "type" : "QueryLetRef"
                                    }
                                 }
                              } ]
                           } ]
                        },
                        "sort" : {
                           "locator" : "252:6-252:26",
                           "by" : [ {
                              "locator" : "252:14-252:26",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "direction" : "asc",
                              "type" : "ByExpression",
                              "expression" : {
                                 "locator" : "252:14-252:26",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "End",
                                 "signature" : [ {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : {
                                    "locator" : "252:21-252:26",
                                    "name" : "ToInterval",
                                    "libraryName" : "FHIRHelpers",
                                    "type" : "FunctionRef",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "operand" : [ {
                                       "name" : "period",
                                       "type" : "IdentifierRef"
                                    } ]
                                 }
                              }
                           } ]
                        }
                     }
                  }
               }, {
                  "locator" : "254:6-254:68",
                  "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "identifier" : "VisitStartWithED",
                  "expression" : {
                     "locator" : "254:24-254:68",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "Coalesce",
                     "signature" : [ {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }, {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     } ],
                     "operand" : [ {
                        "locator" : "254:33-254:55",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "Start",
                        "signature" : [ {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "operand" : {
                           "locator" : "254:42-254:55",
                           "name" : "ToInterval",
                           "libraryName" : "FHIRHelpers",
                           "type" : "FunctionRef",
                           "resultTypeSpecifier" : {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "operand" : [ {
                              "path" : "period",
                              "type" : "Property",
                              "source" : {
                                 "locator" : "254:42-254:48",
                                 "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                 "name" : "EDVisit",
                                 "type" : "QueryLetRef"
                              }
                           } ]
                        }
                     }, {
                        "locator" : "254:58-254:67",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "name" : "VisitStart",
                        "type" : "QueryLetRef"
                     } ]
                  }
               }, {
                  "locator" : "255:6-258:6",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "identifier" : "OutpatientSurgeryVisit",
                  "expression" : {
                     "locator" : "255:30-258:6",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "type" : "Last",
                     "signature" : [ {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Encounter",
                           "type" : "NamedTypeSpecifier"
                        }
                     } ],
                     "source" : {
                        "locator" : "255:35-257:26",
                        "type" : "Query",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "source" : [ {
                           "locator" : "255:35-255:89",
                           "alias" : "LastSurgeryOP",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Encounter",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "expression" : {
                              "locator" : "255:35-255:75",
                              "dataType" : "{http://hl7.org/fhir}Encounter",
                              "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter",
                              "codeProperty" : "type",
                              "codeComparator" : "in",
                              "type" : "Retrieve",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "codes" : {
                                 "locator" : "255:47-255:74",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}ValueSet",
                                 "name" : "Outpatient Surgery Service",
                                 "preserve" : true,
                                 "type" : "ValueSetRef"
                              }
                           }
                        } ],
                        "relationship" : [ ],
                        "where" : {
                           "locator" : "256:6-256:81",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                           "type" : "And",
                           "signature" : [ {
                              "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "NamedTypeSpecifier"
                           }, {
                              "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "NamedTypeSpecifier"
                           } ],
                           "operand" : [ {
                              "locator" : "256:38-256:51",
                              "type" : "In",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }, {
                                 "type" : "IntervalTypeSpecifier",
                                 "pointType" : {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              } ],
                              "operand" : [ {
                                 "locator" : "256:33-256:36",
                                 "type" : "End",
                                 "signature" : [ {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : {
                                    "locator" : "256:12-256:31",
                                    "name" : "ToInterval",
                                    "libraryName" : "FHIRHelpers",
                                    "type" : "FunctionRef",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "operand" : [ {
                                       "path" : "period",
                                       "scope" : "LastSurgeryOP",
                                       "type" : "Property"
                                    } ]
                                 }
                              }, {
                                 "locator" : "256:38-256:51",
                                 "lowClosed" : true,
                                 "highClosed" : true,
                                 "type" : "Interval",
                                 "resultTypeSpecifier" : {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 },
                                 "low" : {
                                    "locator" : "256:66-256:81",
                                    "type" : "Subtract",
                                    "signature" : [ {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }, {
                                       "name" : "{urn:hl7-org:elm-types:r1}Quantity",
                                       "type" : "NamedTypeSpecifier"
                                    } ],
                                    "operand" : [ {
                                       "locator" : "256:66-256:81",
                                       "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "name" : "VisitStartWithED",
                                       "type" : "QueryLetRef"
                                    }, {
                                       "locator" : "256:38-256:43",
                                       "resultTypeName" : "{urn:hl7-org:elm-types:r1}Quantity",
                                       "value" : 1,
                                       "unit" : "hour",
                                       "type" : "Quantity"
                                    } ]
                                 },
                                 "high" : {
                                    "locator" : "256:66-256:81",
                                    "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "name" : "VisitStartWithED",
                                    "type" : "QueryLetRef"
                                 }
                              } ]
                           }, {
                              "locator" : "256:38-256:51",
                              "type" : "Not",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : {
                                 "locator" : "256:38-256:51",
                                 "type" : "IsNull",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}Any",
                                    "type" : "NamedTypeSpecifier"
                                 } ],
                                 "operand" : {
                                    "locator" : "256:66-256:81",
                                    "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "name" : "VisitStartWithED",
                                    "type" : "QueryLetRef"
                                 }
                              }
                           } ]
                        },
                        "sort" : {
                           "locator" : "257:6-257:26",
                           "by" : [ {
                              "locator" : "257:14-257:26",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "direction" : "asc",
                              "type" : "ByExpression",
                              "expression" : {
                                 "locator" : "257:14-257:26",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "End",
                                 "signature" : [ {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : {
                                    "locator" : "257:21-257:26",
                                    "name" : "ToInterval",
                                    "libraryName" : "FHIRHelpers",
                                    "type" : "FunctionRef",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "operand" : [ {
                                       "name" : "period",
                                       "type" : "IdentifierRef"
                                    } ]
                                 }
                              }
                           } ]
                        }
                     }
                  }
               } ],
               "relationship" : [ ],
               "return" : {
                  "locator" : "259:4-259:107",
                  "resultTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "expression" : {
                     "locator" : "259:11-259:107",
                     "lowClosed" : true,
                     "highClosed" : true,
                     "type" : "Interval",
                     "resultTypeSpecifier" : {
                        "type" : "IntervalTypeSpecifier",
                        "pointType" : {
                           "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "NamedTypeSpecifier"
                        }
                     },
                     "low" : {
                        "locator" : "259:20-259:85",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "Coalesce",
                        "signature" : [ {
                           "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "NamedTypeSpecifier"
                        }, {
                           "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "NamedTypeSpecifier"
                        } ],
                        "operand" : [ {
                           "locator" : "259:29-259:66",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "Start",
                           "signature" : [ {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           } ],
                           "operand" : {
                              "locator" : "259:38-259:66",
                              "name" : "ToInterval",
                              "libraryName" : "FHIRHelpers",
                              "type" : "FunctionRef",
                              "resultTypeSpecifier" : {
                                 "type" : "IntervalTypeSpecifier",
                                 "pointType" : {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "operand" : [ {
                                 "path" : "period",
                                 "type" : "Property",
                                 "source" : {
                                    "locator" : "259:38-259:59",
                                    "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                    "name" : "OutpatientSurgeryVisit",
                                    "type" : "QueryLetRef"
                                 }
                              } ]
                           }
                        }, {
                           "locator" : "259:69-259:84",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "name" : "VisitStartWithED",
                           "type" : "QueryLetRef"
                        } ]
                     },
                     "high" : {
                        "locator" : "259:88-259:106",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "End",
                        "signature" : [ {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "operand" : {
                           "locator" : "259:95-259:106",
                           "name" : "ToInterval",
                           "libraryName" : "FHIRHelpers",
                           "type" : "FunctionRef",
                           "resultTypeSpecifier" : {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "operand" : [ {
                              "path" : "period",
                              "scope" : "Visit",
                              "type" : "Property"
                           } ]
                        }
                     }
                  }
               }
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "241:95-241:105",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "265:1-278:87",
            "name" : "HospitalizationWithObservation",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Hospitalization with Observation returns the total interval from the start of any immediately prior emergency department visit through the observation visit to the discharge of the given encounter"
               }, {
                  "name" : "deprecated",
                  "value" : "This function is deprecated. Use the fluent function `hospitalizationWithObservation()` instead."
               } ]
            } ],
            "resultTypeSpecifier" : {
               "type" : "IntervalTypeSpecifier",
               "pointType" : {
                  "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "type" : "NamedTypeSpecifier"
               }
            },
            "expression" : {
               "locator" : "266:3-278:87",
               "type" : "Query",
               "resultTypeSpecifier" : {
                  "type" : "IntervalTypeSpecifier",
                  "pointType" : {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               },
               "source" : [ {
                  "locator" : "266:3-266:20",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "alias" : "Visit",
                  "expression" : {
                     "locator" : "266:3-266:14",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "name" : "TheEncounter",
                     "type" : "OperandRef"
                  }
               } ],
               "let" : [ {
                  "locator" : "267:9-271:6",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "identifier" : "ObsVisit",
                  "expression" : {
                     "locator" : "267:19-271:6",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "type" : "Last",
                     "signature" : [ {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Encounter",
                           "type" : "NamedTypeSpecifier"
                        }
                     } ],
                     "source" : {
                        "locator" : "267:24-270:27",
                        "type" : "Query",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "source" : [ {
                           "locator" : "267:24-267:66",
                           "alias" : "LastObs",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Encounter",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "expression" : {
                              "locator" : "267:24-267:58",
                              "dataType" : "{http://hl7.org/fhir}Encounter",
                              "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter",
                              "codeProperty" : "type",
                              "codeComparator" : "in",
                              "type" : "Retrieve",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "codes" : {
                                 "locator" : "267:36-267:57",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}ValueSet",
                                 "name" : "Observation Services",
                                 "preserve" : true,
                                 "type" : "ValueSetRef"
                              }
                           }
                        } ],
                        "relationship" : [ ],
                        "where" : {
                           "locator" : "268:7-269:85",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                           "type" : "And",
                           "signature" : [ {
                              "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "NamedTypeSpecifier"
                           }, {
                              "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "NamedTypeSpecifier"
                           } ],
                           "operand" : [ {
                              "locator" : "268:13-268:39",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "Equal",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              }, {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : [ {
                                 "locator" : "268:13-268:26",
                                 "resultTypeName" : "{http://hl7.org/fhir}EncounterStatus",
                                 "path" : "value",
                                 "type" : "Property",
                                 "source" : {
                                    "path" : "status",
                                    "scope" : "LastObs",
                                    "type" : "Property"
                                 }
                              }, {
                                 "locator" : "268:30-268:39",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                                 "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                 "value" : "finished",
                                 "type" : "Literal"
                              } ]
                           }, {
                              "locator" : "269:17-269:85",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "And",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                 "type" : "NamedTypeSpecifier"
                              }, {
                                 "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : [ {
                                 "locator" : "269:37-269:50",
                                 "type" : "In",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }, {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : [ {
                                    "locator" : "269:32-269:35",
                                    "type" : "End",
                                    "signature" : [ {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    } ],
                                    "operand" : {
                                       "locator" : "269:17-269:30",
                                       "name" : "ToInterval",
                                       "libraryName" : "FHIRHelpers",
                                       "type" : "FunctionRef",
                                       "resultTypeSpecifier" : {
                                          "type" : "IntervalTypeSpecifier",
                                          "pointType" : {
                                             "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       },
                                       "operand" : [ {
                                          "path" : "period",
                                          "scope" : "LastObs",
                                          "type" : "Property"
                                       } ]
                                    }
                                 }, {
                                    "locator" : "269:37-269:50",
                                    "lowClosed" : true,
                                    "highClosed" : true,
                                    "type" : "Interval",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "low" : {
                                       "locator" : "269:65-269:85",
                                       "type" : "Subtract",
                                       "signature" : [ {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }, {
                                          "name" : "{urn:hl7-org:elm-types:r1}Quantity",
                                          "type" : "NamedTypeSpecifier"
                                       } ],
                                       "operand" : [ {
                                          "locator" : "269:65-269:85",
                                          "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "Start",
                                          "signature" : [ {
                                             "type" : "IntervalTypeSpecifier",
                                             "pointType" : {
                                                "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                                "type" : "NamedTypeSpecifier"
                                             }
                                          } ],
                                          "operand" : {
                                             "locator" : "269:74-269:85",
                                             "name" : "ToInterval",
                                             "libraryName" : "FHIRHelpers",
                                             "type" : "FunctionRef",
                                             "resultTypeSpecifier" : {
                                                "type" : "IntervalTypeSpecifier",
                                                "pointType" : {
                                                   "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                                   "type" : "NamedTypeSpecifier"
                                                }
                                             },
                                             "operand" : [ {
                                                "path" : "period",
                                                "scope" : "Visit",
                                                "type" : "Property"
                                             } ]
                                          }
                                       }, {
                                          "locator" : "269:37-269:42",
                                          "resultTypeName" : "{urn:hl7-org:elm-types:r1}Quantity",
                                          "value" : 1,
                                          "unit" : "hour",
                                          "type" : "Quantity"
                                       } ]
                                    },
                                    "high" : {
                                       "locator" : "269:65-269:85",
                                       "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "Start",
                                       "signature" : [ {
                                          "type" : "IntervalTypeSpecifier",
                                          "pointType" : {
                                             "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       } ],
                                       "operand" : {
                                          "locator" : "269:74-269:85",
                                          "name" : "ToInterval",
                                          "libraryName" : "FHIRHelpers",
                                          "type" : "FunctionRef",
                                          "resultTypeSpecifier" : {
                                             "type" : "IntervalTypeSpecifier",
                                             "pointType" : {
                                                "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                                "type" : "NamedTypeSpecifier"
                                             }
                                          },
                                          "operand" : [ {
                                             "path" : "period",
                                             "scope" : "Visit",
                                             "type" : "Property"
                                          } ]
                                       }
                                    }
                                 } ]
                              }, {
                                 "locator" : "269:37-269:50",
                                 "type" : "Not",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                    "type" : "NamedTypeSpecifier"
                                 } ],
                                 "operand" : {
                                    "locator" : "269:37-269:50",
                                    "type" : "IsNull",
                                    "signature" : [ {
                                       "name" : "{urn:hl7-org:elm-types:r1}Any",
                                       "type" : "NamedTypeSpecifier"
                                    } ],
                                    "operand" : {
                                       "locator" : "269:65-269:85",
                                       "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "Start",
                                       "signature" : [ {
                                          "type" : "IntervalTypeSpecifier",
                                          "pointType" : {
                                             "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       } ],
                                       "operand" : {
                                          "locator" : "269:74-269:85",
                                          "name" : "ToInterval",
                                          "libraryName" : "FHIRHelpers",
                                          "type" : "FunctionRef",
                                          "resultTypeSpecifier" : {
                                             "type" : "IntervalTypeSpecifier",
                                             "pointType" : {
                                                "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                                "type" : "NamedTypeSpecifier"
                                             }
                                          },
                                          "operand" : [ {
                                             "path" : "period",
                                             "scope" : "Visit",
                                             "type" : "Property"
                                          } ]
                                       }
                                    }
                                 }
                              } ]
                           } ]
                        },
                        "sort" : {
                           "locator" : "270:7-270:27",
                           "by" : [ {
                              "locator" : "270:15-270:27",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "direction" : "asc",
                              "type" : "ByExpression",
                              "expression" : {
                                 "locator" : "270:15-270:27",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "End",
                                 "signature" : [ {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : {
                                    "locator" : "270:22-270:27",
                                    "name" : "ToInterval",
                                    "libraryName" : "FHIRHelpers",
                                    "type" : "FunctionRef",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "operand" : [ {
                                       "name" : "period",
                                       "type" : "IdentifierRef"
                                    } ]
                                 }
                              }
                           } ]
                        }
                     }
                  }
               }, {
                  "locator" : "272:6-272:74",
                  "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "identifier" : "VisitStart",
                  "expression" : {
                     "locator" : "272:18-272:74",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "Coalesce",
                     "signature" : [ {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }, {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     } ],
                     "operand" : [ {
                        "locator" : "272:27-272:50",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "Start",
                        "signature" : [ {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "operand" : {
                           "locator" : "272:36-272:50",
                           "name" : "ToInterval",
                           "libraryName" : "FHIRHelpers",
                           "type" : "FunctionRef",
                           "resultTypeSpecifier" : {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "operand" : [ {
                              "path" : "period",
                              "type" : "Property",
                              "source" : {
                                 "locator" : "272:36-272:43",
                                 "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                 "name" : "ObsVisit",
                                 "type" : "QueryLetRef"
                              }
                           } ]
                        }
                     }, {
                        "locator" : "272:53-272:73",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "Start",
                        "signature" : [ {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "operand" : {
                           "locator" : "272:62-272:73",
                           "name" : "ToInterval",
                           "libraryName" : "FHIRHelpers",
                           "type" : "FunctionRef",
                           "resultTypeSpecifier" : {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "operand" : [ {
                              "path" : "period",
                              "scope" : "Visit",
                              "type" : "Property"
                           } ]
                        }
                     } ]
                  }
               }, {
                  "locator" : "273:6-277:6",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "identifier" : "EDVisit",
                  "expression" : {
                     "locator" : "273:15-277:6",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "type" : "Last",
                     "signature" : [ {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Encounter",
                           "type" : "NamedTypeSpecifier"
                        }
                     } ],
                     "source" : {
                        "locator" : "273:20-276:27",
                        "type" : "Query",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "source" : [ {
                           "locator" : "273:20-273:67",
                           "alias" : "LastED",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Encounter",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "expression" : {
                              "locator" : "273:20-273:60",
                              "dataType" : "{http://hl7.org/fhir}Encounter",
                              "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter",
                              "codeProperty" : "type",
                              "codeComparator" : "in",
                              "type" : "Retrieve",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "codes" : {
                                 "locator" : "273:32-273:59",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}ValueSet",
                                 "name" : "Emergency Department Visit",
                                 "preserve" : true,
                                 "type" : "ValueSetRef"
                              }
                           }
                        } ],
                        "relationship" : [ ],
                        "where" : {
                           "locator" : "274:7-275:73",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                           "type" : "And",
                           "signature" : [ {
                              "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "NamedTypeSpecifier"
                           }, {
                              "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "NamedTypeSpecifier"
                           } ],
                           "operand" : [ {
                              "locator" : "274:13-274:38",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "Equal",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              }, {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : [ {
                                 "locator" : "274:13-274:25",
                                 "resultTypeName" : "{http://hl7.org/fhir}EncounterStatus",
                                 "path" : "value",
                                 "type" : "Property",
                                 "source" : {
                                    "path" : "status",
                                    "scope" : "LastED",
                                    "type" : "Property"
                                 }
                              }, {
                                 "locator" : "274:29-274:38",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                                 "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                 "value" : "finished",
                                 "type" : "Literal"
                              } ]
                           }, {
                              "locator" : "275:17-275:73",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "And",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                 "type" : "NamedTypeSpecifier"
                              }, {
                                 "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : [ {
                                 "locator" : "275:36-275:49",
                                 "type" : "In",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }, {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : [ {
                                    "locator" : "275:31-275:34",
                                    "type" : "End",
                                    "signature" : [ {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    } ],
                                    "operand" : {
                                       "locator" : "275:17-275:29",
                                       "name" : "ToInterval",
                                       "libraryName" : "FHIRHelpers",
                                       "type" : "FunctionRef",
                                       "resultTypeSpecifier" : {
                                          "type" : "IntervalTypeSpecifier",
                                          "pointType" : {
                                             "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       },
                                       "operand" : [ {
                                          "path" : "period",
                                          "scope" : "LastED",
                                          "type" : "Property"
                                       } ]
                                    }
                                 }, {
                                    "locator" : "275:36-275:49",
                                    "lowClosed" : true,
                                    "highClosed" : true,
                                    "type" : "Interval",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "low" : {
                                       "locator" : "275:64-275:73",
                                       "type" : "Subtract",
                                       "signature" : [ {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }, {
                                          "name" : "{urn:hl7-org:elm-types:r1}Quantity",
                                          "type" : "NamedTypeSpecifier"
                                       } ],
                                       "operand" : [ {
                                          "locator" : "275:64-275:73",
                                          "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "name" : "VisitStart",
                                          "type" : "QueryLetRef"
                                       }, {
                                          "locator" : "275:36-275:41",
                                          "resultTypeName" : "{urn:hl7-org:elm-types:r1}Quantity",
                                          "value" : 1,
                                          "unit" : "hour",
                                          "type" : "Quantity"
                                       } ]
                                    },
                                    "high" : {
                                       "locator" : "275:64-275:73",
                                       "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "name" : "VisitStart",
                                       "type" : "QueryLetRef"
                                    }
                                 } ]
                              }, {
                                 "locator" : "275:36-275:49",
                                 "type" : "Not",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                    "type" : "NamedTypeSpecifier"
                                 } ],
                                 "operand" : {
                                    "locator" : "275:36-275:49",
                                    "type" : "IsNull",
                                    "signature" : [ {
                                       "name" : "{urn:hl7-org:elm-types:r1}Any",
                                       "type" : "NamedTypeSpecifier"
                                    } ],
                                    "operand" : {
                                       "locator" : "275:64-275:73",
                                       "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "name" : "VisitStart",
                                       "type" : "QueryLetRef"
                                    }
                                 }
                              } ]
                           } ]
                        },
                        "sort" : {
                           "locator" : "276:7-276:27",
                           "by" : [ {
                              "locator" : "276:15-276:27",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "direction" : "asc",
                              "type" : "ByExpression",
                              "expression" : {
                                 "locator" : "276:15-276:27",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "End",
                                 "signature" : [ {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : {
                                    "locator" : "276:22-276:27",
                                    "name" : "ToInterval",
                                    "libraryName" : "FHIRHelpers",
                                    "type" : "FunctionRef",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "operand" : [ {
                                       "name" : "period",
                                       "type" : "IdentifierRef"
                                    } ]
                                 }
                              }
                           } ]
                        }
                     }
                  }
               } ],
               "relationship" : [ ],
               "return" : {
                  "locator" : "278:5-278:87",
                  "resultTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "expression" : {
                     "locator" : "278:12-278:87",
                     "lowClosed" : true,
                     "highClosed" : true,
                     "type" : "Interval",
                     "resultTypeSpecifier" : {
                        "type" : "IntervalTypeSpecifier",
                        "pointType" : {
                           "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "NamedTypeSpecifier"
                        }
                     },
                     "low" : {
                        "locator" : "278:21-278:65",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "Coalesce",
                        "signature" : [ {
                           "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "NamedTypeSpecifier"
                        }, {
                           "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "NamedTypeSpecifier"
                        } ],
                        "operand" : [ {
                           "locator" : "278:30-278:52",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "Start",
                           "signature" : [ {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           } ],
                           "operand" : {
                              "locator" : "278:39-278:52",
                              "name" : "ToInterval",
                              "libraryName" : "FHIRHelpers",
                              "type" : "FunctionRef",
                              "resultTypeSpecifier" : {
                                 "type" : "IntervalTypeSpecifier",
                                 "pointType" : {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "operand" : [ {
                                 "path" : "period",
                                 "type" : "Property",
                                 "source" : {
                                    "locator" : "278:39-278:45",
                                    "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                    "name" : "EDVisit",
                                    "type" : "QueryLetRef"
                                 }
                              } ]
                           }
                        }, {
                           "locator" : "278:55-278:64",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "name" : "VisitStart",
                           "type" : "QueryLetRef"
                        } ]
                     },
                     "high" : {
                        "locator" : "278:68-278:86",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "End",
                        "signature" : [ {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "operand" : {
                           "locator" : "278:75-278:86",
                           "name" : "ToInterval",
                           "libraryName" : "FHIRHelpers",
                           "type" : "FunctionRef",
                           "resultTypeSpecifier" : {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "operand" : [ {
                              "path" : "period",
                              "scope" : "Visit",
                              "type" : "Property"
                           } ]
                        }
                     }
                  }
               }
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "265:63-265:71",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "283:1-296:87",
            "name" : "hospitalizationWithObservation",
            "context" : "Patient",
            "accessLevel" : "Public",
            "fluent" : true,
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Hospitalization with Observation returns the total interval from the start of any immediately prior emergency department visit through the observation visit to the discharge of the given encounter"
               } ]
            } ],
            "resultTypeSpecifier" : {
               "type" : "IntervalTypeSpecifier",
               "pointType" : {
                  "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "type" : "NamedTypeSpecifier"
               }
            },
            "expression" : {
               "locator" : "284:3-296:87",
               "type" : "Query",
               "resultTypeSpecifier" : {
                  "type" : "IntervalTypeSpecifier",
                  "pointType" : {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               },
               "source" : [ {
                  "locator" : "284:3-284:20",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "alias" : "Visit",
                  "expression" : {
                     "locator" : "284:3-284:14",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "name" : "TheEncounter",
                     "type" : "OperandRef"
                  }
               } ],
               "let" : [ {
                  "locator" : "285:9-289:6",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "identifier" : "ObsVisit",
                  "expression" : {
                     "locator" : "285:19-289:6",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "type" : "Last",
                     "signature" : [ {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Encounter",
                           "type" : "NamedTypeSpecifier"
                        }
                     } ],
                     "source" : {
                        "locator" : "285:24-288:27",
                        "type" : "Query",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "source" : [ {
                           "locator" : "285:24-285:66",
                           "alias" : "LastObs",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Encounter",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "expression" : {
                              "locator" : "285:24-285:58",
                              "dataType" : "{http://hl7.org/fhir}Encounter",
                              "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter",
                              "codeProperty" : "type",
                              "codeComparator" : "in",
                              "type" : "Retrieve",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "codes" : {
                                 "locator" : "285:36-285:57",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}ValueSet",
                                 "name" : "Observation Services",
                                 "preserve" : true,
                                 "type" : "ValueSetRef"
                              }
                           }
                        } ],
                        "relationship" : [ ],
                        "where" : {
                           "locator" : "286:7-287:85",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                           "type" : "And",
                           "signature" : [ {
                              "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "NamedTypeSpecifier"
                           }, {
                              "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "NamedTypeSpecifier"
                           } ],
                           "operand" : [ {
                              "locator" : "286:13-286:39",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "Equal",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              }, {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : [ {
                                 "locator" : "286:13-286:26",
                                 "resultTypeName" : "{http://hl7.org/fhir}EncounterStatus",
                                 "path" : "value",
                                 "type" : "Property",
                                 "source" : {
                                    "path" : "status",
                                    "scope" : "LastObs",
                                    "type" : "Property"
                                 }
                              }, {
                                 "locator" : "286:30-286:39",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                                 "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                 "value" : "finished",
                                 "type" : "Literal"
                              } ]
                           }, {
                              "locator" : "287:17-287:85",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "And",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                 "type" : "NamedTypeSpecifier"
                              }, {
                                 "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : [ {
                                 "locator" : "287:37-287:50",
                                 "type" : "In",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }, {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : [ {
                                    "locator" : "287:32-287:35",
                                    "type" : "End",
                                    "signature" : [ {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    } ],
                                    "operand" : {
                                       "locator" : "287:17-287:30",
                                       "name" : "ToInterval",
                                       "libraryName" : "FHIRHelpers",
                                       "type" : "FunctionRef",
                                       "resultTypeSpecifier" : {
                                          "type" : "IntervalTypeSpecifier",
                                          "pointType" : {
                                             "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       },
                                       "operand" : [ {
                                          "path" : "period",
                                          "scope" : "LastObs",
                                          "type" : "Property"
                                       } ]
                                    }
                                 }, {
                                    "locator" : "287:37-287:50",
                                    "lowClosed" : true,
                                    "highClosed" : true,
                                    "type" : "Interval",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "low" : {
                                       "locator" : "287:65-287:85",
                                       "type" : "Subtract",
                                       "signature" : [ {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }, {
                                          "name" : "{urn:hl7-org:elm-types:r1}Quantity",
                                          "type" : "NamedTypeSpecifier"
                                       } ],
                                       "operand" : [ {
                                          "locator" : "287:65-287:85",
                                          "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "Start",
                                          "signature" : [ {
                                             "type" : "IntervalTypeSpecifier",
                                             "pointType" : {
                                                "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                                "type" : "NamedTypeSpecifier"
                                             }
                                          } ],
                                          "operand" : {
                                             "locator" : "287:74-287:85",
                                             "name" : "ToInterval",
                                             "libraryName" : "FHIRHelpers",
                                             "type" : "FunctionRef",
                                             "resultTypeSpecifier" : {
                                                "type" : "IntervalTypeSpecifier",
                                                "pointType" : {
                                                   "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                                   "type" : "NamedTypeSpecifier"
                                                }
                                             },
                                             "operand" : [ {
                                                "path" : "period",
                                                "scope" : "Visit",
                                                "type" : "Property"
                                             } ]
                                          }
                                       }, {
                                          "locator" : "287:37-287:42",
                                          "resultTypeName" : "{urn:hl7-org:elm-types:r1}Quantity",
                                          "value" : 1,
                                          "unit" : "hour",
                                          "type" : "Quantity"
                                       } ]
                                    },
                                    "high" : {
                                       "locator" : "287:65-287:85",
                                       "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "Start",
                                       "signature" : [ {
                                          "type" : "IntervalTypeSpecifier",
                                          "pointType" : {
                                             "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       } ],
                                       "operand" : {
                                          "locator" : "287:74-287:85",
                                          "name" : "ToInterval",
                                          "libraryName" : "FHIRHelpers",
                                          "type" : "FunctionRef",
                                          "resultTypeSpecifier" : {
                                             "type" : "IntervalTypeSpecifier",
                                             "pointType" : {
                                                "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                                "type" : "NamedTypeSpecifier"
                                             }
                                          },
                                          "operand" : [ {
                                             "path" : "period",
                                             "scope" : "Visit",
                                             "type" : "Property"
                                          } ]
                                       }
                                    }
                                 } ]
                              }, {
                                 "locator" : "287:37-287:50",
                                 "type" : "Not",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                    "type" : "NamedTypeSpecifier"
                                 } ],
                                 "operand" : {
                                    "locator" : "287:37-287:50",
                                    "type" : "IsNull",
                                    "signature" : [ {
                                       "name" : "{urn:hl7-org:elm-types:r1}Any",
                                       "type" : "NamedTypeSpecifier"
                                    } ],
                                    "operand" : {
                                       "locator" : "287:65-287:85",
                                       "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "Start",
                                       "signature" : [ {
                                          "type" : "IntervalTypeSpecifier",
                                          "pointType" : {
                                             "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       } ],
                                       "operand" : {
                                          "locator" : "287:74-287:85",
                                          "name" : "ToInterval",
                                          "libraryName" : "FHIRHelpers",
                                          "type" : "FunctionRef",
                                          "resultTypeSpecifier" : {
                                             "type" : "IntervalTypeSpecifier",
                                             "pointType" : {
                                                "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                                "type" : "NamedTypeSpecifier"
                                             }
                                          },
                                          "operand" : [ {
                                             "path" : "period",
                                             "scope" : "Visit",
                                             "type" : "Property"
                                          } ]
                                       }
                                    }
                                 }
                              } ]
                           } ]
                        },
                        "sort" : {
                           "locator" : "288:7-288:27",
                           "by" : [ {
                              "locator" : "288:15-288:27",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "direction" : "asc",
                              "type" : "ByExpression",
                              "expression" : {
                                 "locator" : "288:15-288:27",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "End",
                                 "signature" : [ {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : {
                                    "locator" : "288:22-288:27",
                                    "name" : "ToInterval",
                                    "libraryName" : "FHIRHelpers",
                                    "type" : "FunctionRef",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "operand" : [ {
                                       "name" : "period",
                                       "type" : "IdentifierRef"
                                    } ]
                                 }
                              }
                           } ]
                        }
                     }
                  }
               }, {
                  "locator" : "290:6-290:74",
                  "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                  "identifier" : "VisitStart",
                  "expression" : {
                     "locator" : "290:18-290:74",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "Coalesce",
                     "signature" : [ {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }, {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     } ],
                     "operand" : [ {
                        "locator" : "290:27-290:50",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "Start",
                        "signature" : [ {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "operand" : {
                           "locator" : "290:36-290:50",
                           "name" : "ToInterval",
                           "libraryName" : "FHIRHelpers",
                           "type" : "FunctionRef",
                           "resultTypeSpecifier" : {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "operand" : [ {
                              "path" : "period",
                              "type" : "Property",
                              "source" : {
                                 "locator" : "290:36-290:43",
                                 "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                 "name" : "ObsVisit",
                                 "type" : "QueryLetRef"
                              }
                           } ]
                        }
                     }, {
                        "locator" : "290:53-290:73",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "Start",
                        "signature" : [ {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "operand" : {
                           "locator" : "290:62-290:73",
                           "name" : "ToInterval",
                           "libraryName" : "FHIRHelpers",
                           "type" : "FunctionRef",
                           "resultTypeSpecifier" : {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "operand" : [ {
                              "path" : "period",
                              "scope" : "Visit",
                              "type" : "Property"
                           } ]
                        }
                     } ]
                  }
               }, {
                  "locator" : "291:6-295:6",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "identifier" : "EDVisit",
                  "expression" : {
                     "locator" : "291:15-295:6",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "type" : "Last",
                     "signature" : [ {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Encounter",
                           "type" : "NamedTypeSpecifier"
                        }
                     } ],
                     "source" : {
                        "locator" : "291:20-294:27",
                        "type" : "Query",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "source" : [ {
                           "locator" : "291:20-291:67",
                           "alias" : "LastED",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Encounter",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "expression" : {
                              "locator" : "291:20-291:60",
                              "dataType" : "{http://hl7.org/fhir}Encounter",
                              "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter",
                              "codeProperty" : "type",
                              "codeComparator" : "in",
                              "type" : "Retrieve",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "codes" : {
                                 "locator" : "291:32-291:59",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}ValueSet",
                                 "name" : "Emergency Department Visit",
                                 "preserve" : true,
                                 "type" : "ValueSetRef"
                              }
                           }
                        } ],
                        "relationship" : [ ],
                        "where" : {
                           "locator" : "292:7-293:73",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                           "type" : "And",
                           "signature" : [ {
                              "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "NamedTypeSpecifier"
                           }, {
                              "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "NamedTypeSpecifier"
                           } ],
                           "operand" : [ {
                              "locator" : "292:13-292:38",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "Equal",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              }, {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : [ {
                                 "locator" : "292:13-292:25",
                                 "resultTypeName" : "{http://hl7.org/fhir}EncounterStatus",
                                 "path" : "value",
                                 "type" : "Property",
                                 "source" : {
                                    "path" : "status",
                                    "scope" : "LastED",
                                    "type" : "Property"
                                 }
                              }, {
                                 "locator" : "292:29-292:38",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                                 "valueType" : "{urn:hl7-org:elm-types:r1}String",
                                 "value" : "finished",
                                 "type" : "Literal"
                              } ]
                           }, {
                              "locator" : "293:17-293:73",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "And",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                 "type" : "NamedTypeSpecifier"
                              }, {
                                 "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : [ {
                                 "locator" : "293:36-293:49",
                                 "type" : "In",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }, {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : [ {
                                    "locator" : "293:31-293:34",
                                    "type" : "End",
                                    "signature" : [ {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    } ],
                                    "operand" : {
                                       "locator" : "293:17-293:29",
                                       "name" : "ToInterval",
                                       "libraryName" : "FHIRHelpers",
                                       "type" : "FunctionRef",
                                       "resultTypeSpecifier" : {
                                          "type" : "IntervalTypeSpecifier",
                                          "pointType" : {
                                             "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       },
                                       "operand" : [ {
                                          "path" : "period",
                                          "scope" : "LastED",
                                          "type" : "Property"
                                       } ]
                                    }
                                 }, {
                                    "locator" : "293:36-293:49",
                                    "lowClosed" : true,
                                    "highClosed" : true,
                                    "type" : "Interval",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "low" : {
                                       "locator" : "293:64-293:73",
                                       "type" : "Subtract",
                                       "signature" : [ {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }, {
                                          "name" : "{urn:hl7-org:elm-types:r1}Quantity",
                                          "type" : "NamedTypeSpecifier"
                                       } ],
                                       "operand" : [ {
                                          "locator" : "293:64-293:73",
                                          "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "name" : "VisitStart",
                                          "type" : "QueryLetRef"
                                       }, {
                                          "locator" : "293:36-293:41",
                                          "resultTypeName" : "{urn:hl7-org:elm-types:r1}Quantity",
                                          "value" : 1,
                                          "unit" : "hour",
                                          "type" : "Quantity"
                                       } ]
                                    },
                                    "high" : {
                                       "locator" : "293:64-293:73",
                                       "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "name" : "VisitStart",
                                       "type" : "QueryLetRef"
                                    }
                                 } ]
                              }, {
                                 "locator" : "293:36-293:49",
                                 "type" : "Not",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                                    "type" : "NamedTypeSpecifier"
                                 } ],
                                 "operand" : {
                                    "locator" : "293:36-293:49",
                                    "type" : "IsNull",
                                    "signature" : [ {
                                       "name" : "{urn:hl7-org:elm-types:r1}Any",
                                       "type" : "NamedTypeSpecifier"
                                    } ],
                                    "operand" : {
                                       "locator" : "293:64-293:73",
                                       "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "name" : "VisitStart",
                                       "type" : "QueryLetRef"
                                    }
                                 }
                              } ]
                           } ]
                        },
                        "sort" : {
                           "locator" : "294:7-294:27",
                           "by" : [ {
                              "locator" : "294:15-294:27",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "direction" : "asc",
                              "type" : "ByExpression",
                              "expression" : {
                                 "locator" : "294:15-294:27",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "End",
                                 "signature" : [ {
                                    "type" : "IntervalTypeSpecifier",
                                    "pointType" : {
                                       "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 } ],
                                 "operand" : {
                                    "locator" : "294:22-294:27",
                                    "name" : "ToInterval",
                                    "libraryName" : "FHIRHelpers",
                                    "type" : "FunctionRef",
                                    "resultTypeSpecifier" : {
                                       "type" : "IntervalTypeSpecifier",
                                       "pointType" : {
                                          "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                          "type" : "NamedTypeSpecifier"
                                       }
                                    },
                                    "operand" : [ {
                                       "name" : "period",
                                       "type" : "IdentifierRef"
                                    } ]
                                 }
                              }
                           } ]
                        }
                     }
                  }
               } ],
               "relationship" : [ ],
               "return" : {
                  "locator" : "296:5-296:87",
                  "resultTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "expression" : {
                     "locator" : "296:12-296:87",
                     "lowClosed" : true,
                     "highClosed" : true,
                     "type" : "Interval",
                     "resultTypeSpecifier" : {
                        "type" : "IntervalTypeSpecifier",
                        "pointType" : {
                           "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "NamedTypeSpecifier"
                        }
                     },
                     "low" : {
                        "locator" : "296:21-296:65",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "Coalesce",
                        "signature" : [ {
                           "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "NamedTypeSpecifier"
                        }, {
                           "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "NamedTypeSpecifier"
                        } ],
                        "operand" : [ {
                           "locator" : "296:30-296:52",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "Start",
                           "signature" : [ {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           } ],
                           "operand" : {
                              "locator" : "296:39-296:52",
                              "name" : "ToInterval",
                              "libraryName" : "FHIRHelpers",
                              "type" : "FunctionRef",
                              "resultTypeSpecifier" : {
                                 "type" : "IntervalTypeSpecifier",
                                 "pointType" : {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "operand" : [ {
                                 "path" : "period",
                                 "type" : "Property",
                                 "source" : {
                                    "locator" : "296:39-296:45",
                                    "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                    "name" : "EDVisit",
                                    "type" : "QueryLetRef"
                                 }
                              } ]
                           }
                        }, {
                           "locator" : "296:55-296:64",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "name" : "VisitStart",
                           "type" : "QueryLetRef"
                        } ]
                     },
                     "high" : {
                        "locator" : "296:68-296:86",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "End",
                        "signature" : [ {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "operand" : {
                           "locator" : "296:75-296:86",
                           "name" : "ToInterval",
                           "libraryName" : "FHIRHelpers",
                           "type" : "FunctionRef",
                           "resultTypeSpecifier" : {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "operand" : [ {
                              "path" : "period",
                              "scope" : "Visit",
                              "type" : "Property"
                           } ]
                        }
                     }
                  }
               }
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "283:68-283:76",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "302:1-303:64",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}Integer",
            "name" : "HospitalizationWithObservationLengthofStay",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Hospitalization with Observation Length of Stay returns the length in days from the start of any immediately prior emergency department visit through the observation visit to the discharge of the given encounter"
               }, {
                  "name" : "deprecated",
                  "value" : "This function is deprecated. Use the fluent function `hospitalizationWithObservationLengthofStay()` instead."
               } ]
            } ],
            "expression" : {
               "locator" : "303:3-303:64",
               "resultTypeName" : "{urn:hl7-org:elm-types:r1}Integer",
               "name" : "LengthInDays",
               "type" : "FunctionRef",
               "signature" : [ {
                  "type" : "IntervalTypeSpecifier",
                  "pointType" : {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "operand" : [ {
                  "locator" : "303:18-303:63",
                  "name" : "HospitalizationWithObservation",
                  "type" : "FunctionRef",
                  "resultTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "signature" : [ {
                     "name" : "{http://hl7.org/fhir}Encounter",
                     "type" : "NamedTypeSpecifier"
                  } ],
                  "operand" : [ {
                     "locator" : "303:51-303:62",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "name" : "TheEncounter",
                     "type" : "OperandRef"
                  } ]
               } ]
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "302:75-302:85",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "308:1-309:71",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}Integer",
            "name" : "hospitalizationWithObservationLengthofStay",
            "context" : "Patient",
            "accessLevel" : "Public",
            "fluent" : true,
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Hospitalization with Observation Length of Stay returns the length in days from the start of any immediately prior emergency department visit through the observation visit to the discharge of the given encounter"
               } ]
            } ],
            "expression" : {
               "locator" : "309:3-309:71",
               "resultTypeName" : "{urn:hl7-org:elm-types:r1}Integer",
               "name" : "lengthInDays",
               "type" : "FunctionRef",
               "signature" : [ {
                  "type" : "IntervalTypeSpecifier",
                  "pointType" : {
                     "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "operand" : [ {
                  "locator" : "309:5-309:51",
                  "name" : "hospitalizationWithObservation",
                  "type" : "FunctionRef",
                  "resultTypeSpecifier" : {
                     "type" : "IntervalTypeSpecifier",
                     "pointType" : {
                        "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "signature" : [ {
                     "name" : "{http://hl7.org/fhir}Encounter",
                     "type" : "NamedTypeSpecifier"
                  } ],
                  "operand" : [ {
                     "locator" : "309:5-309:16",
                     "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                     "name" : "TheEncounter",
                     "type" : "OperandRef"
                  } ]
               } ]
            },
            "operand" : [ {
               "name" : "TheEncounter",
               "operandTypeSpecifier" : {
                  "locator" : "308:80-308:90",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "315:1-320:4",
            "resultTypeName" : "{http://hl7.org/fhir}Encounter.Location",
            "name" : "FirstInpatientIntensiveCareUnit",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "First Inpatient Intensive Care Unit returns the first intensive care unit for the given encounter, without considering any immediately prior emergency department visit."
               }, {
                  "name" : "deprecated",
                  "value" : "This function is deprecated. Use the fluent function `firstInpatientIntensiveCareUnit()` instead."
               } ]
            } ],
            "expression" : {
               "locator" : "316:3-320:4",
               "resultTypeName" : "{http://hl7.org/fhir}Encounter.Location",
               "type" : "First",
               "signature" : [ {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Encounter.Location",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "source" : {
                  "locator" : "316:9-319:28",
                  "type" : "Query",
                  "resultTypeSpecifier" : {
                     "type" : "ListTypeSpecifier",
                     "elementType" : {
                        "name" : "{http://hl7.org/fhir}Encounter.Location",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "source" : [ {
                     "locator" : "316:9-316:44",
                     "alias" : "HospitalLocation",
                     "resultTypeSpecifier" : {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Encounter.Location",
                           "type" : "NamedTypeSpecifier"
                        }
                     },
                     "expression" : {
                        "locator" : "316:9-316:28",
                        "path" : "location",
                        "type" : "Property",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter.Location",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "source" : {
                           "locator" : "316:10-316:18",
                           "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                           "name" : "Encounter",
                           "type" : "OperandRef"
                        }
                     }
                  } ],
                  "relationship" : [ ],
                  "where" : {
                     "locator" : "317:6-318:57",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                     "type" : "And",
                     "signature" : [ {
                        "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                        "type" : "NamedTypeSpecifier"
                     }, {
                        "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                        "type" : "NamedTypeSpecifier"
                     } ],
                     "operand" : [ {
                        "locator" : "317:12-317:79",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                        "type" : "AnyInValueSet",
                        "signature" : [ {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}Concept",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "codes" : {
                           "locator" : "317:12-317:54",
                           "type" : "Query",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}Concept",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "source" : [ {
                              "alias" : "$this",
                              "expression" : {
                                 "path" : "type",
                                 "type" : "Property",
                                 "source" : {
                                    "locator" : "317:12-317:49",
                                    "resultTypeName" : "{http://hl7.org/fhir}Location",
                                    "name" : "GetLocation",
                                    "type" : "FunctionRef",
                                    "signature" : [ {
                                       "name" : "{http://hl7.org/fhir}Reference",
                                       "type" : "NamedTypeSpecifier"
                                    } ],
                                    "operand" : [ {
                                       "locator" : "317:24-317:48",
                                       "resultTypeName" : "{http://hl7.org/fhir}Reference",
                                       "path" : "location",
                                       "scope" : "HospitalLocation",
                                       "type" : "Property"
                                    } ]
                                 }
                              }
                           } ],
                           "return" : {
                              "distinct" : false,
                              "expression" : {
                                 "name" : "ToConcept",
                                 "libraryName" : "FHIRHelpers",
                                 "type" : "FunctionRef",
                                 "operand" : [ {
                                    "name" : "$this",
                                    "type" : "AliasRef"
                                 } ]
                              }
                           }
                        },
                        "valueset" : {
                           "locator" : "317:59-317:79",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}ValueSet",
                           "name" : "Intensive Care Unit",
                           "preserve" : true
                        }
                     }, {
                        "locator" : "318:11-318:57",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                        "type" : "IncludedIn",
                        "signature" : [ {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        }, {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "operand" : [ {
                           "locator" : "318:11-318:33",
                           "name" : "ToInterval",
                           "libraryName" : "FHIRHelpers",
                           "type" : "FunctionRef",
                           "resultTypeSpecifier" : {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "operand" : [ {
                              "path" : "period",
                              "scope" : "HospitalLocation",
                              "type" : "Property"
                           } ]
                        }, {
                           "locator" : "318:42-318:57",
                           "name" : "ToInterval",
                           "libraryName" : "FHIRHelpers",
                           "type" : "FunctionRef",
                           "resultTypeSpecifier" : {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "operand" : [ {
                              "path" : "period",
                              "type" : "Property",
                              "source" : {
                                 "locator" : "318:42-318:50",
                                 "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                 "name" : "Encounter",
                                 "type" : "OperandRef"
                              }
                           } ]
                        } ]
                     } ]
                  },
                  "sort" : {
                     "locator" : "319:6-319:28",
                     "by" : [ {
                        "locator" : "319:14-319:28",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "direction" : "asc",
                        "type" : "ByExpression",
                        "expression" : {
                           "locator" : "319:14-319:28",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "Start",
                           "signature" : [ {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           } ],
                           "operand" : {
                              "locator" : "319:23-319:28",
                              "name" : "ToInterval",
                              "libraryName" : "FHIRHelpers",
                              "type" : "FunctionRef",
                              "resultTypeSpecifier" : {
                                 "type" : "IntervalTypeSpecifier",
                                 "pointType" : {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "operand" : [ {
                                 "name" : "period",
                                 "type" : "IdentifierRef"
                              } ]
                           }
                        }
                     } ]
                  }
               }
            },
            "operand" : [ {
               "name" : "Encounter",
               "operandTypeSpecifier" : {
                  "locator" : "315:61-315:69",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "325:1-330:4",
            "resultTypeName" : "{http://hl7.org/fhir}Encounter.Location",
            "name" : "firstInpatientIntensiveCareUnit",
            "context" : "Patient",
            "accessLevel" : "Public",
            "fluent" : true,
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "First Inpatient Intensive Care Unit returns the first intensive care unit for the given encounter, without considering any immediately prior emergency department visit."
               } ]
            } ],
            "expression" : {
               "locator" : "326:3-330:4",
               "resultTypeName" : "{http://hl7.org/fhir}Encounter.Location",
               "type" : "First",
               "signature" : [ {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Encounter.Location",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "source" : {
                  "locator" : "326:9-329:28",
                  "type" : "Query",
                  "resultTypeSpecifier" : {
                     "type" : "ListTypeSpecifier",
                     "elementType" : {
                        "name" : "{http://hl7.org/fhir}Encounter.Location",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "source" : [ {
                     "locator" : "326:9-326:44",
                     "alias" : "HospitalLocation",
                     "resultTypeSpecifier" : {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Encounter.Location",
                           "type" : "NamedTypeSpecifier"
                        }
                     },
                     "expression" : {
                        "locator" : "326:9-326:28",
                        "path" : "location",
                        "type" : "Property",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter.Location",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "source" : {
                           "locator" : "326:10-326:18",
                           "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                           "name" : "Encounter",
                           "type" : "OperandRef"
                        }
                     }
                  } ],
                  "relationship" : [ ],
                  "where" : {
                     "locator" : "327:6-328:57",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                     "type" : "And",
                     "signature" : [ {
                        "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                        "type" : "NamedTypeSpecifier"
                     }, {
                        "name" : "{urn:hl7-org:elm-types:r1}Boolean",
                        "type" : "NamedTypeSpecifier"
                     } ],
                     "operand" : [ {
                        "locator" : "327:12-327:79",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                        "type" : "AnyInValueSet",
                        "signature" : [ {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}Concept",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "codes" : {
                           "locator" : "327:12-327:54",
                           "type" : "Query",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}Concept",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "source" : [ {
                              "alias" : "$this",
                              "expression" : {
                                 "path" : "type",
                                 "type" : "Property",
                                 "source" : {
                                    "locator" : "327:12-327:49",
                                    "resultTypeName" : "{http://hl7.org/fhir}Location",
                                    "name" : "GetLocation",
                                    "type" : "FunctionRef",
                                    "signature" : [ {
                                       "name" : "{http://hl7.org/fhir}Reference",
                                       "type" : "NamedTypeSpecifier"
                                    } ],
                                    "operand" : [ {
                                       "locator" : "327:24-327:48",
                                       "resultTypeName" : "{http://hl7.org/fhir}Reference",
                                       "path" : "location",
                                       "scope" : "HospitalLocation",
                                       "type" : "Property"
                                    } ]
                                 }
                              }
                           } ],
                           "return" : {
                              "distinct" : false,
                              "expression" : {
                                 "name" : "ToConcept",
                                 "libraryName" : "FHIRHelpers",
                                 "type" : "FunctionRef",
                                 "operand" : [ {
                                    "name" : "$this",
                                    "type" : "AliasRef"
                                 } ]
                              }
                           }
                        },
                        "valueset" : {
                           "locator" : "327:59-327:79",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}ValueSet",
                           "name" : "Intensive Care Unit",
                           "preserve" : true
                        }
                     }, {
                        "locator" : "328:11-328:57",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                        "type" : "IncludedIn",
                        "signature" : [ {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        }, {
                           "type" : "IntervalTypeSpecifier",
                           "pointType" : {
                              "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "operand" : [ {
                           "locator" : "328:11-328:33",
                           "name" : "ToInterval",
                           "libraryName" : "FHIRHelpers",
                           "type" : "FunctionRef",
                           "resultTypeSpecifier" : {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "operand" : [ {
                              "path" : "period",
                              "scope" : "HospitalLocation",
                              "type" : "Property"
                           } ]
                        }, {
                           "locator" : "328:42-328:57",
                           "name" : "ToInterval",
                           "libraryName" : "FHIRHelpers",
                           "type" : "FunctionRef",
                           "resultTypeSpecifier" : {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "operand" : [ {
                              "path" : "period",
                              "type" : "Property",
                              "source" : {
                                 "locator" : "328:42-328:50",
                                 "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                                 "name" : "Encounter",
                                 "type" : "OperandRef"
                              }
                           } ]
                        } ]
                     } ]
                  },
                  "sort" : {
                     "locator" : "329:6-329:28",
                     "by" : [ {
                        "locator" : "329:14-329:28",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                        "direction" : "asc",
                        "type" : "ByExpression",
                        "expression" : {
                           "locator" : "329:14-329:28",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}DateTime",
                           "type" : "Start",
                           "signature" : [ {
                              "type" : "IntervalTypeSpecifier",
                              "pointType" : {
                                 "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                 "type" : "NamedTypeSpecifier"
                              }
                           } ],
                           "operand" : {
                              "locator" : "329:23-329:28",
                              "name" : "ToInterval",
                              "libraryName" : "FHIRHelpers",
                              "type" : "FunctionRef",
                              "resultTypeSpecifier" : {
                                 "type" : "IntervalTypeSpecifier",
                                 "pointType" : {
                                    "name" : "{urn:hl7-org:elm-types:r1}DateTime",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "operand" : [ {
                                 "name" : "period",
                                 "type" : "IdentifierRef"
                              } ]
                           }
                        }
                     } ]
                  }
               }
            },
            "operand" : [ {
               "name" : "Encounter",
               "operandTypeSpecifier" : {
                  "locator" : "325:66-325:74",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "336:1-338:81",
            "name" : "EncounterDiagnosis",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns the Condition resource referenced by the `diagnosis.condition` element of the Encounter"
               }, {
                  "name" : "deprecated",
                  "value" : "This function is deprecated. Use the fluent function `encounterDiagnosis()` instead."
               } ]
            } ],
            "resultTypeSpecifier" : {
               "type" : "ListTypeSpecifier",
               "elementType" : {
                  "name" : "{http://hl7.org/fhir}Condition",
                  "type" : "NamedTypeSpecifier"
               }
            },
            "expression" : {
               "locator" : "337:3-338:81",
               "type" : "Query",
               "resultTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Condition",
                     "type" : "NamedTypeSpecifier"
                  }
               },
               "source" : [ {
                  "locator" : "337:3-337:23",
                  "alias" : "D",
                  "resultTypeSpecifier" : {
                     "type" : "ListTypeSpecifier",
                     "elementType" : {
                        "name" : "{http://hl7.org/fhir}Encounter.Diagnosis",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "expression" : {
                     "locator" : "337:3-337:21",
                     "path" : "diagnosis",
                     "type" : "Property",
                     "resultTypeSpecifier" : {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Encounter.Diagnosis",
                           "type" : "NamedTypeSpecifier"
                        }
                     },
                     "source" : {
                        "name" : "Encounter",
                        "type" : "OperandRef"
                     }
                  }
               } ],
               "relationship" : [ ],
               "return" : {
                  "locator" : "338:2-338:81",
                  "resultTypeSpecifier" : {
                     "type" : "ListTypeSpecifier",
                     "elementType" : {
                        "name" : "{http://hl7.org/fhir}Condition",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "expression" : {
                     "locator" : "338:9-338:81",
                     "resultTypeName" : "{http://hl7.org/fhir}Condition",
                     "type" : "SingletonFrom",
                     "signature" : [ {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Condition",
                           "type" : "NamedTypeSpecifier"
                        }
                     } ],
                     "operand" : {
                        "locator" : "338:24-338:81",
                        "type" : "Query",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Condition",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "source" : [ {
                           "locator" : "338:25-338:37",
                           "alias" : "C",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Condition",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "expression" : {
                              "locator" : "338:25-338:35",
                              "dataType" : "{http://hl7.org/fhir}Condition",
                              "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-condition",
                              "type" : "Retrieve",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Condition",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              }
                           }
                        } ],
                        "relationship" : [ ],
                        "where" : {
                           "locator" : "338:39-338:80",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                           "type" : "Equal",
                           "signature" : [ {
                              "name" : "{urn:hl7-org:elm-types:r1}String",
                              "type" : "NamedTypeSpecifier"
                           }, {
                              "name" : "{urn:hl7-org:elm-types:r1}String",
                              "type" : "NamedTypeSpecifier"
                           } ],
                           "operand" : [ {
                              "locator" : "338:45-338:48",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                              "path" : "value",
                              "type" : "Property",
                              "source" : {
                                 "path" : "id",
                                 "scope" : "C",
                                 "type" : "Property"
                              }
                           }, {
                              "locator" : "338:52-338:80",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                              "name" : "getId",
                              "libraryName" : "QICoreCommon",
                              "type" : "FunctionRef",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : [ {
                                 "locator" : "338:52-338:72",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                                 "path" : "value",
                                 "type" : "Property",
                                 "source" : {
                                    "path" : "reference",
                                    "type" : "Property",
                                    "source" : {
                                       "locator" : "338:52-338:62",
                                       "resultTypeName" : "{http://hl7.org/fhir}Reference",
                                       "path" : "condition",
                                       "scope" : "D",
                                       "type" : "Property"
                                    }
                                 }
                              } ]
                           } ]
                        }
                     }
                  }
               }
            },
            "operand" : [ {
               "name" : "Encounter",
               "operandTypeSpecifier" : {
                  "locator" : "336:48-336:56",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "343:1-345:84",
            "name" : "encounterDiagnosis",
            "context" : "Patient",
            "accessLevel" : "Public",
            "fluent" : true,
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns the Condition resources referenced by the diagnosis element of the Encounter"
               } ]
            } ],
            "resultTypeSpecifier" : {
               "type" : "ListTypeSpecifier",
               "elementType" : {
                  "name" : "{http://hl7.org/fhir}Condition",
                  "type" : "NamedTypeSpecifier"
               }
            },
            "expression" : {
               "locator" : "344:3-345:84",
               "type" : "Query",
               "resultTypeSpecifier" : {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Condition",
                     "type" : "NamedTypeSpecifier"
                  }
               },
               "source" : [ {
                  "locator" : "344:3-344:23",
                  "alias" : "D",
                  "resultTypeSpecifier" : {
                     "type" : "ListTypeSpecifier",
                     "elementType" : {
                        "name" : "{http://hl7.org/fhir}Encounter.Diagnosis",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "expression" : {
                     "locator" : "344:3-344:21",
                     "path" : "diagnosis",
                     "type" : "Property",
                     "resultTypeSpecifier" : {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Encounter.Diagnosis",
                           "type" : "NamedTypeSpecifier"
                        }
                     },
                     "source" : {
                        "name" : "Encounter",
                        "type" : "OperandRef"
                     }
                  }
               } ],
               "relationship" : [ ],
               "return" : {
                  "locator" : "345:5-345:84",
                  "resultTypeSpecifier" : {
                     "type" : "ListTypeSpecifier",
                     "elementType" : {
                        "name" : "{http://hl7.org/fhir}Condition",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "expression" : {
                     "locator" : "345:12-345:84",
                     "resultTypeName" : "{http://hl7.org/fhir}Condition",
                     "type" : "SingletonFrom",
                     "signature" : [ {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Condition",
                           "type" : "NamedTypeSpecifier"
                        }
                     } ],
                     "operand" : {
                        "locator" : "345:27-345:84",
                        "type" : "Query",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Condition",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "source" : [ {
                           "locator" : "345:28-345:40",
                           "alias" : "C",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Condition",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "expression" : {
                              "locator" : "345:28-345:38",
                              "dataType" : "{http://hl7.org/fhir}Condition",
                              "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-condition",
                              "type" : "Retrieve",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Condition",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              }
                           }
                        } ],
                        "relationship" : [ ],
                        "where" : {
                           "locator" : "345:42-345:83",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                           "type" : "Equal",
                           "signature" : [ {
                              "name" : "{urn:hl7-org:elm-types:r1}String",
                              "type" : "NamedTypeSpecifier"
                           }, {
                              "name" : "{urn:hl7-org:elm-types:r1}String",
                              "type" : "NamedTypeSpecifier"
                           } ],
                           "operand" : [ {
                              "locator" : "345:48-345:51",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                              "path" : "value",
                              "type" : "Property",
                              "source" : {
                                 "path" : "id",
                                 "scope" : "C",
                                 "type" : "Property"
                              }
                           }, {
                              "locator" : "345:55-345:83",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                              "name" : "getId",
                              "libraryName" : "QICoreCommon",
                              "type" : "FunctionRef",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : [ {
                                 "locator" : "345:55-345:75",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                                 "path" : "value",
                                 "type" : "Property",
                                 "source" : {
                                    "path" : "reference",
                                    "type" : "Property",
                                    "source" : {
                                       "locator" : "345:55-345:65",
                                       "resultTypeName" : "{http://hl7.org/fhir}Reference",
                                       "path" : "condition",
                                       "scope" : "D",
                                       "type" : "Property"
                                    }
                                 }
                              } ]
                           } ]
                        }
                     }
                  }
               }
            },
            "operand" : [ {
               "name" : "Encounter",
               "operandTypeSpecifier" : {
                  "locator" : "343:53-343:61",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "351:1-352:73",
            "resultTypeName" : "{http://hl7.org/fhir}Condition",
            "name" : "GetCondition",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns the Condition resource for the given reference"
               }, {
                  "name" : "deprecated",
                  "value" : "This function is deprecated. Use the fluent function `getCondition()` instead"
               } ]
            } ],
            "expression" : {
               "locator" : "352:3-352:73",
               "resultTypeName" : "{http://hl7.org/fhir}Condition",
               "type" : "SingletonFrom",
               "signature" : [ {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Condition",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "operand" : {
                  "locator" : "352:18-352:73",
                  "type" : "Query",
                  "resultTypeSpecifier" : {
                     "type" : "ListTypeSpecifier",
                     "elementType" : {
                        "name" : "{http://hl7.org/fhir}Condition",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "source" : [ {
                     "locator" : "352:19-352:31",
                     "alias" : "C",
                     "resultTypeSpecifier" : {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Condition",
                           "type" : "NamedTypeSpecifier"
                        }
                     },
                     "expression" : {
                        "locator" : "352:19-352:29",
                        "dataType" : "{http://hl7.org/fhir}Condition",
                        "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-condition",
                        "type" : "Retrieve",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Condition",
                              "type" : "NamedTypeSpecifier"
                           }
                        }
                     }
                  } ],
                  "relationship" : [ ],
                  "where" : {
                     "locator" : "352:33-352:72",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                     "type" : "Equal",
                     "signature" : [ {
                        "name" : "{urn:hl7-org:elm-types:r1}String",
                        "type" : "NamedTypeSpecifier"
                     }, {
                        "name" : "{urn:hl7-org:elm-types:r1}String",
                        "type" : "NamedTypeSpecifier"
                     } ],
                     "operand" : [ {
                        "locator" : "352:39-352:42",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                        "path" : "value",
                        "type" : "Property",
                        "source" : {
                           "path" : "id",
                           "scope" : "C",
                           "type" : "Property"
                        }
                     }, {
                        "locator" : "352:46-352:72",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                        "name" : "getId",
                        "libraryName" : "QICoreCommon",
                        "type" : "FunctionRef",
                        "signature" : [ {
                           "name" : "{urn:hl7-org:elm-types:r1}String",
                           "type" : "NamedTypeSpecifier"
                        } ],
                        "operand" : [ {
                           "locator" : "352:46-352:64",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                           "path" : "value",
                           "type" : "Property",
                           "source" : {
                              "path" : "reference",
                              "type" : "Property",
                              "source" : {
                                 "locator" : "352:46-352:54",
                                 "resultTypeName" : "{http://hl7.org/fhir}Reference",
                                 "name" : "reference",
                                 "type" : "OperandRef"
                              }
                           }
                        } ]
                     } ]
                  }
               }
            },
            "operand" : [ {
               "name" : "reference",
               "operandTypeSpecifier" : {
                  "locator" : "351:42-351:50",
                  "resultTypeName" : "{http://hl7.org/fhir}Reference",
                  "name" : "{http://hl7.org/fhir}Reference",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "357:1-358:73",
            "resultTypeName" : "{http://hl7.org/fhir}Condition",
            "name" : "getCondition",
            "context" : "Patient",
            "accessLevel" : "Public",
            "fluent" : true,
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns the Condition resource for the given reference"
               } ]
            } ],
            "expression" : {
               "locator" : "358:3-358:73",
               "resultTypeName" : "{http://hl7.org/fhir}Condition",
               "type" : "SingletonFrom",
               "signature" : [ {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Condition",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "operand" : {
                  "locator" : "358:18-358:73",
                  "type" : "Query",
                  "resultTypeSpecifier" : {
                     "type" : "ListTypeSpecifier",
                     "elementType" : {
                        "name" : "{http://hl7.org/fhir}Condition",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "source" : [ {
                     "locator" : "358:19-358:31",
                     "alias" : "C",
                     "resultTypeSpecifier" : {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Condition",
                           "type" : "NamedTypeSpecifier"
                        }
                     },
                     "expression" : {
                        "locator" : "358:19-358:29",
                        "dataType" : "{http://hl7.org/fhir}Condition",
                        "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-condition",
                        "type" : "Retrieve",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Condition",
                              "type" : "NamedTypeSpecifier"
                           }
                        }
                     }
                  } ],
                  "relationship" : [ ],
                  "where" : {
                     "locator" : "358:33-358:72",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                     "type" : "Equal",
                     "signature" : [ {
                        "name" : "{urn:hl7-org:elm-types:r1}String",
                        "type" : "NamedTypeSpecifier"
                     }, {
                        "name" : "{urn:hl7-org:elm-types:r1}String",
                        "type" : "NamedTypeSpecifier"
                     } ],
                     "operand" : [ {
                        "locator" : "358:39-358:42",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                        "path" : "value",
                        "type" : "Property",
                        "source" : {
                           "path" : "id",
                           "scope" : "C",
                           "type" : "Property"
                        }
                     }, {
                        "locator" : "358:46-358:72",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                        "name" : "getId",
                        "libraryName" : "QICoreCommon",
                        "type" : "FunctionRef",
                        "signature" : [ {
                           "name" : "{urn:hl7-org:elm-types:r1}String",
                           "type" : "NamedTypeSpecifier"
                        } ],
                        "operand" : [ {
                           "locator" : "358:46-358:64",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                           "path" : "value",
                           "type" : "Property",
                           "source" : {
                              "path" : "reference",
                              "type" : "Property",
                              "source" : {
                                 "locator" : "358:46-358:54",
                                 "resultTypeName" : "{http://hl7.org/fhir}Reference",
                                 "name" : "reference",
                                 "type" : "OperandRef"
                              }
                           }
                        } ]
                     } ]
                  }
               }
            },
            "operand" : [ {
               "name" : "reference",
               "operandTypeSpecifier" : {
                  "locator" : "357:47-357:55",
                  "resultTypeName" : "{http://hl7.org/fhir}Reference",
                  "name" : "{http://hl7.org/fhir}Reference",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "364:1-367:2",
            "resultTypeName" : "{http://hl7.org/fhir}Condition",
            "name" : "PrincipalDiagnosis",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns the condition that is specified as the principal diagnosis for the encounter"
               }, {
                  "name" : "deprecated",
                  "value" : "This function is deprecated. Use the fluent function `principalDiagnosis()` instead."
               } ]
            } ],
            "expression" : {
               "locator" : "365:2-367:2",
               "resultTypeName" : "{http://hl7.org/fhir}Condition",
               "type" : "SingletonFrom",
               "signature" : [ {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Condition",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "operand" : {
                  "locator" : "365:17-367:2",
                  "type" : "Query",
                  "resultTypeSpecifier" : {
                     "type" : "ListTypeSpecifier",
                     "elementType" : {
                        "name" : "{http://hl7.org/fhir}Condition",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "source" : [ {
                     "locator" : "365:18-365:60",
                     "alias" : "PD",
                     "resultTypeSpecifier" : {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Encounter.Diagnosis",
                           "type" : "NamedTypeSpecifier"
                        }
                     },
                     "expression" : {
                        "locator" : "365:18-365:57",
                        "type" : "Query",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter.Diagnosis",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "source" : [ {
                           "locator" : "365:19-365:39",
                           "alias" : "D",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Encounter.Diagnosis",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "expression" : {
                              "locator" : "365:19-365:37",
                              "path" : "diagnosis",
                              "type" : "Property",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter.Diagnosis",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "source" : {
                                 "name" : "Encounter",
                                 "type" : "OperandRef"
                              }
                           }
                        } ],
                        "relationship" : [ ],
                        "where" : {
                           "locator" : "365:41-365:56",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                           "type" : "Equal",
                           "signature" : [ {
                              "name" : "{urn:hl7-org:elm-types:r1}Integer",
                              "type" : "NamedTypeSpecifier"
                           }, {
                              "name" : "{urn:hl7-org:elm-types:r1}Integer",
                              "type" : "NamedTypeSpecifier"
                           } ],
                           "operand" : [ {
                              "locator" : "365:47-365:52",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Integer",
                              "path" : "value",
                              "type" : "Property",
                              "source" : {
                                 "path" : "rank",
                                 "scope" : "D",
                                 "type" : "Property"
                              }
                           }, {
                              "locator" : "365:56",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Integer",
                              "valueType" : "{urn:hl7-org:elm-types:r1}Integer",
                              "value" : "1",
                              "type" : "Literal"
                           } ]
                        }
                     }
                  } ],
                  "relationship" : [ ],
                  "return" : {
                     "locator" : "366:7-366:87",
                     "resultTypeSpecifier" : {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Condition",
                           "type" : "NamedTypeSpecifier"
                        }
                     },
                     "expression" : {
                        "locator" : "366:14-366:87",
                        "resultTypeName" : "{http://hl7.org/fhir}Condition",
                        "type" : "SingletonFrom",
                        "signature" : [ {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Condition",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "operand" : {
                           "locator" : "366:29-366:87",
                           "type" : "Query",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Condition",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "source" : [ {
                              "locator" : "366:30-366:42",
                              "alias" : "C",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Condition",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "expression" : {
                                 "locator" : "366:30-366:40",
                                 "dataType" : "{http://hl7.org/fhir}Condition",
                                 "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-condition",
                                 "type" : "Retrieve",
                                 "resultTypeSpecifier" : {
                                    "type" : "ListTypeSpecifier",
                                    "elementType" : {
                                       "name" : "{http://hl7.org/fhir}Condition",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 }
                              }
                           } ],
                           "relationship" : [ ],
                           "where" : {
                              "locator" : "366:44-366:86",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "Equal",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              }, {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : [ {
                                 "locator" : "366:50-366:53",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                                 "path" : "value",
                                 "type" : "Property",
                                 "source" : {
                                    "path" : "id",
                                    "scope" : "C",
                                    "type" : "Property"
                                 }
                              }, {
                                 "locator" : "366:57-366:86",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                                 "name" : "getId",
                                 "libraryName" : "QICoreCommon",
                                 "type" : "FunctionRef",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}String",
                                    "type" : "NamedTypeSpecifier"
                                 } ],
                                 "operand" : [ {
                                    "locator" : "366:57-366:78",
                                    "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                                    "path" : "value",
                                    "type" : "Property",
                                    "source" : {
                                       "path" : "reference",
                                       "type" : "Property",
                                       "source" : {
                                          "locator" : "366:57-366:68",
                                          "resultTypeName" : "{http://hl7.org/fhir}Reference",
                                          "path" : "condition",
                                          "scope" : "PD",
                                          "type" : "Property"
                                       }
                                    }
                                 } ]
                              } ]
                           }
                        }
                     }
                  }
               }
            },
            "operand" : [ {
               "name" : "Encounter",
               "operandTypeSpecifier" : {
                  "locator" : "364:48-364:56",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "372:1-375:2",
            "resultTypeName" : "{http://hl7.org/fhir}Condition",
            "name" : "principalDiagnosis",
            "context" : "Patient",
            "accessLevel" : "Public",
            "fluent" : true,
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns the condition that is specified as the principal diagnosis for the encounter"
               } ]
            } ],
            "expression" : {
               "locator" : "373:2-375:2",
               "resultTypeName" : "{http://hl7.org/fhir}Condition",
               "type" : "SingletonFrom",
               "signature" : [ {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Condition",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "operand" : {
                  "locator" : "373:17-375:2",
                  "type" : "Query",
                  "resultTypeSpecifier" : {
                     "type" : "ListTypeSpecifier",
                     "elementType" : {
                        "name" : "{http://hl7.org/fhir}Condition",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "source" : [ {
                     "locator" : "373:18-373:60",
                     "alias" : "PD",
                     "resultTypeSpecifier" : {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Encounter.Diagnosis",
                           "type" : "NamedTypeSpecifier"
                        }
                     },
                     "expression" : {
                        "locator" : "373:18-373:57",
                        "type" : "Query",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Encounter.Diagnosis",
                              "type" : "NamedTypeSpecifier"
                           }
                        },
                        "source" : [ {
                           "locator" : "373:19-373:39",
                           "alias" : "D",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Encounter.Diagnosis",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "expression" : {
                              "locator" : "373:19-373:37",
                              "path" : "diagnosis",
                              "type" : "Property",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Encounter.Diagnosis",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "source" : {
                                 "name" : "Encounter",
                                 "type" : "OperandRef"
                              }
                           }
                        } ],
                        "relationship" : [ ],
                        "where" : {
                           "locator" : "373:41-373:56",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                           "type" : "Equal",
                           "signature" : [ {
                              "name" : "{urn:hl7-org:elm-types:r1}Integer",
                              "type" : "NamedTypeSpecifier"
                           }, {
                              "name" : "{urn:hl7-org:elm-types:r1}Integer",
                              "type" : "NamedTypeSpecifier"
                           } ],
                           "operand" : [ {
                              "locator" : "373:47-373:52",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Integer",
                              "path" : "value",
                              "type" : "Property",
                              "source" : {
                                 "path" : "rank",
                                 "scope" : "D",
                                 "type" : "Property"
                              }
                           }, {
                              "locator" : "373:56",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Integer",
                              "valueType" : "{urn:hl7-org:elm-types:r1}Integer",
                              "value" : "1",
                              "type" : "Literal"
                           } ]
                        }
                     }
                  } ],
                  "relationship" : [ ],
                  "return" : {
                     "locator" : "374:7-374:87",
                     "resultTypeSpecifier" : {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Condition",
                           "type" : "NamedTypeSpecifier"
                        }
                     },
                     "expression" : {
                        "locator" : "374:14-374:87",
                        "resultTypeName" : "{http://hl7.org/fhir}Condition",
                        "type" : "SingletonFrom",
                        "signature" : [ {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Condition",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "operand" : {
                           "locator" : "374:29-374:87",
                           "type" : "Query",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Condition",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "source" : [ {
                              "locator" : "374:30-374:42",
                              "alias" : "C",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Condition",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "expression" : {
                                 "locator" : "374:30-374:40",
                                 "dataType" : "{http://hl7.org/fhir}Condition",
                                 "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-condition",
                                 "type" : "Retrieve",
                                 "resultTypeSpecifier" : {
                                    "type" : "ListTypeSpecifier",
                                    "elementType" : {
                                       "name" : "{http://hl7.org/fhir}Condition",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 }
                              }
                           } ],
                           "relationship" : [ ],
                           "where" : {
                              "locator" : "374:44-374:86",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "Equal",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              }, {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : [ {
                                 "locator" : "374:50-374:53",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                                 "path" : "value",
                                 "type" : "Property",
                                 "source" : {
                                    "path" : "id",
                                    "scope" : "C",
                                    "type" : "Property"
                                 }
                              }, {
                                 "locator" : "374:57-374:86",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                                 "name" : "getId",
                                 "libraryName" : "QICoreCommon",
                                 "type" : "FunctionRef",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}String",
                                    "type" : "NamedTypeSpecifier"
                                 } ],
                                 "operand" : [ {
                                    "locator" : "374:57-374:78",
                                    "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                                    "path" : "value",
                                    "type" : "Property",
                                    "source" : {
                                       "path" : "reference",
                                       "type" : "Property",
                                       "source" : {
                                          "locator" : "374:57-374:68",
                                          "resultTypeName" : "{http://hl7.org/fhir}Reference",
                                          "path" : "condition",
                                          "scope" : "PD",
                                          "type" : "Property"
                                       }
                                    }
                                 } ]
                              } ]
                           }
                        }
                     }
                  }
               }
            },
            "operand" : [ {
               "name" : "Encounter",
               "operandTypeSpecifier" : {
                  "locator" : "372:53-372:61",
                  "resultTypeName" : "{http://hl7.org/fhir}Encounter",
                  "name" : "{http://hl7.org/fhir}Encounter",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "389:1-392:3",
            "resultTypeName" : "{http://hl7.org/fhir}Location",
            "name" : "getLocation",
            "context" : "Patient",
            "accessLevel" : "Public",
            "fluent" : true,
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns the Location resource specified by the given reference."
               } ]
            } ],
            "expression" : {
               "locator" : "390:3-392:3",
               "resultTypeName" : "{http://hl7.org/fhir}Location",
               "type" : "SingletonFrom",
               "signature" : [ {
                  "type" : "ListTypeSpecifier",
                  "elementType" : {
                     "name" : "{http://hl7.org/fhir}Location",
                     "type" : "NamedTypeSpecifier"
                  }
               } ],
               "operand" : {
                  "locator" : "390:18-392:3",
                  "type" : "Query",
                  "resultTypeSpecifier" : {
                     "type" : "ListTypeSpecifier",
                     "elementType" : {
                        "name" : "{http://hl7.org/fhir}Location",
                        "type" : "NamedTypeSpecifier"
                     }
                  },
                  "source" : [ {
                     "locator" : "391:5-391:16",
                     "alias" : "L",
                     "resultTypeSpecifier" : {
                        "type" : "ListTypeSpecifier",
                        "elementType" : {
                           "name" : "{http://hl7.org/fhir}Location",
                           "type" : "NamedTypeSpecifier"
                        }
                     },
                     "expression" : {
                        "locator" : "391:5-391:14",
                        "dataType" : "{http://hl7.org/fhir}Location",
                        "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-location",
                        "type" : "Retrieve",
                        "resultTypeSpecifier" : {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Location",
                              "type" : "NamedTypeSpecifier"
                           }
                        }
                     }
                  } ],
                  "relationship" : [ ],
                  "where" : {
                     "locator" : "391:18-391:57",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                     "type" : "Equal",
                     "signature" : [ {
                        "name" : "{urn:hl7-org:elm-types:r1}String",
                        "type" : "NamedTypeSpecifier"
                     }, {
                        "name" : "{urn:hl7-org:elm-types:r1}String",
                        "type" : "NamedTypeSpecifier"
                     } ],
                     "operand" : [ {
                        "locator" : "391:24-391:27",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                        "path" : "value",
                        "type" : "Property",
                        "source" : {
                           "path" : "id",
                           "scope" : "L",
                           "type" : "Property"
                        }
                     }, {
                        "locator" : "391:31-391:57",
                        "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                        "name" : "getId",
                        "libraryName" : "QICoreCommon",
                        "type" : "FunctionRef",
                        "signature" : [ {
                           "name" : "{urn:hl7-org:elm-types:r1}String",
                           "type" : "NamedTypeSpecifier"
                        } ],
                        "operand" : [ {
                           "locator" : "391:31-391:49",
                           "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                           "path" : "value",
                           "type" : "Property",
                           "source" : {
                              "path" : "reference",
                              "type" : "Property",
                              "source" : {
                                 "locator" : "391:31-391:39",
                                 "resultTypeName" : "{http://hl7.org/fhir}Reference",
                                 "name" : "reference",
                                 "type" : "OperandRef"
                              }
                           }
                        } ]
                     } ]
                  }
               }
            },
            "operand" : [ {
               "name" : "reference",
               "operandTypeSpecifier" : {
                  "locator" : "389:46-389:54",
                  "resultTypeName" : "{http://hl7.org/fhir}Reference",
                  "name" : "{http://hl7.org/fhir}Reference",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "398:1-402:108",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}Concept",
            "name" : "GetMedicationCode",
            "context" : "Patient",
            "accessLevel" : "Public",
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns the medication code for the given MedicationRequest"
               }, {
                  "name" : "deprecated",
                  "value" : "This function is deprecated. Use the fluent function `getMedicationCode()` instead."
               } ]
            } ],
            "expression" : {
               "locator" : "399:3-402:108",
               "resultTypeName" : "{urn:hl7-org:elm-types:r1}Concept",
               "type" : "If",
               "condition" : {
                  "locator" : "399:6-399:34",
                  "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                  "type" : "Is",
                  "operand" : {
                     "locator" : "399:6-399:23",
                     "name" : "ToValue",
                     "libraryName" : "FHIRHelpers",
                     "type" : "FunctionRef",
                     "resultTypeSpecifier" : {
                        "type" : "ChoiceTypeSpecifier",
                        "choice" : [ {
                           "name" : "{urn:hl7-org:elm-types:r1}Concept",
                           "type" : "NamedTypeSpecifier"
                        }, {
                           "name" : "{http://hl7.org/fhir}Reference",
                           "type" : "NamedTypeSpecifier"
                        } ]
                     },
                     "operand" : [ {
                        "path" : "medication",
                        "type" : "Property",
                        "source" : {
                           "locator" : "399:6-399:12",
                           "resultTypeName" : "{http://hl7.org/fhir}MedicationRequest",
                           "name" : "request",
                           "type" : "OperandRef"
                        }
                     } ]
                  },
                  "isTypeSpecifier" : {
                     "locator" : "399:28-399:34",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}Concept",
                     "name" : "{urn:hl7-org:elm-types:r1}Concept",
                     "type" : "NamedTypeSpecifier"
                  }
               },
               "then" : {
                  "locator" : "400:6-400:34",
                  "resultTypeName" : "{urn:hl7-org:elm-types:r1}Concept",
                  "strict" : false,
                  "type" : "As",
                  "operand" : {
                     "locator" : "400:6-400:23",
                     "name" : "ToValue",
                     "libraryName" : "FHIRHelpers",
                     "type" : "FunctionRef",
                     "resultTypeSpecifier" : {
                        "type" : "ChoiceTypeSpecifier",
                        "choice" : [ {
                           "name" : "{urn:hl7-org:elm-types:r1}Concept",
                           "type" : "NamedTypeSpecifier"
                        }, {
                           "name" : "{http://hl7.org/fhir}Reference",
                           "type" : "NamedTypeSpecifier"
                        } ]
                     },
                     "operand" : [ {
                        "path" : "medication",
                        "type" : "Property",
                        "source" : {
                           "locator" : "400:6-400:12",
                           "resultTypeName" : "{http://hl7.org/fhir}MedicationRequest",
                           "name" : "request",
                           "type" : "OperandRef"
                        }
                     } ]
                  },
                  "asTypeSpecifier" : {
                     "locator" : "400:28-400:34",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}Concept",
                     "name" : "{urn:hl7-org:elm-types:r1}Concept",
                     "type" : "NamedTypeSpecifier"
                  }
               },
               "else" : {
                  "locator" : "402:6-402:108",
                  "resultTypeName" : "{urn:hl7-org:elm-types:r1}Concept",
                  "name" : "ToConcept",
                  "libraryName" : "FHIRHelpers",
                  "type" : "FunctionRef",
                  "operand" : [ {
                     "path" : "code",
                     "type" : "Property",
                     "source" : {
                        "locator" : "402:6-402:103",
                        "resultTypeName" : "{http://hl7.org/fhir}Medication",
                        "type" : "SingletonFrom",
                        "signature" : [ {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Medication",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "operand" : {
                           "locator" : "402:22-402:102",
                           "type" : "Query",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Medication",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "source" : [ {
                              "locator" : "402:23-402:36",
                              "alias" : "M",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Medication",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "expression" : {
                                 "locator" : "402:23-402:34",
                                 "dataType" : "{http://hl7.org/fhir}Medication",
                                 "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-medication",
                                 "type" : "Retrieve",
                                 "resultTypeSpecifier" : {
                                    "type" : "ListTypeSpecifier",
                                    "elementType" : {
                                       "name" : "{http://hl7.org/fhir}Medication",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 }
                              }
                           } ],
                           "relationship" : [ ],
                           "where" : {
                              "locator" : "402:38-402:101",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "Equal",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              }, {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : [ {
                                 "locator" : "402:44-402:47",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                                 "path" : "value",
                                 "type" : "Property",
                                 "source" : {
                                    "path" : "id",
                                    "scope" : "M",
                                    "type" : "Property"
                                 }
                              }, {
                                 "locator" : "402:51-402:101",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                                 "name" : "getId",
                                 "libraryName" : "QICoreCommon",
                                 "type" : "FunctionRef",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}String",
                                    "type" : "NamedTypeSpecifier"
                                 } ],
                                 "operand" : [ {
                                    "locator" : "402:51-402:93",
                                    "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                                    "path" : "value",
                                    "type" : "Property",
                                    "source" : {
                                       "path" : "reference",
                                       "type" : "Property",
                                       "source" : {
                                          "locator" : "402:51-402:83",
                                          "resultTypeName" : "{http://hl7.org/fhir}Reference",
                                          "strict" : false,
                                          "type" : "As",
                                          "operand" : {
                                             "locator" : "402:52-402:69",
                                             "name" : "ToValue",
                                             "libraryName" : "FHIRHelpers",
                                             "type" : "FunctionRef",
                                             "resultTypeSpecifier" : {
                                                "type" : "ChoiceTypeSpecifier",
                                                "choice" : [ {
                                                   "name" : "{urn:hl7-org:elm-types:r1}Concept",
                                                   "type" : "NamedTypeSpecifier"
                                                }, {
                                                   "name" : "{http://hl7.org/fhir}Reference",
                                                   "type" : "NamedTypeSpecifier"
                                                } ]
                                             },
                                             "operand" : [ {
                                                "path" : "medication",
                                                "type" : "Property",
                                                "source" : {
                                                   "locator" : "402:52-402:58",
                                                   "resultTypeName" : "{http://hl7.org/fhir}MedicationRequest",
                                                   "name" : "request",
                                                   "type" : "OperandRef"
                                                }
                                             } ]
                                          },
                                          "asTypeSpecifier" : {
                                             "locator" : "402:74-402:82",
                                             "resultTypeName" : "{http://hl7.org/fhir}Reference",
                                             "name" : "{http://hl7.org/fhir}Reference",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       }
                                    }
                                 } ]
                              } ]
                           }
                        }
                     }
                  } ]
               }
            },
            "operand" : [ {
               "name" : "request",
               "operandTypeSpecifier" : {
                  "locator" : "398:45-398:61",
                  "resultTypeName" : "{http://hl7.org/fhir}MedicationRequest",
                  "name" : "{http://hl7.org/fhir}MedicationRequest",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         }, {
            "locator" : "407:1-411:108",
            "resultTypeName" : "{urn:hl7-org:elm-types:r1}Concept",
            "name" : "getMedicationCode",
            "context" : "Patient",
            "accessLevel" : "Public",
            "fluent" : true,
            "type" : "FunctionDef",
            "annotation" : [ {
               "type" : "Annotation",
               "t" : [ {
                  "name" : "description",
                  "value" : "Returns the medication code for the given MedicationRequest"
               } ]
            } ],
            "expression" : {
               "locator" : "408:3-411:108",
               "resultTypeName" : "{urn:hl7-org:elm-types:r1}Concept",
               "type" : "If",
               "condition" : {
                  "locator" : "408:6-408:34",
                  "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                  "type" : "Is",
                  "operand" : {
                     "locator" : "408:6-408:23",
                     "name" : "ToValue",
                     "libraryName" : "FHIRHelpers",
                     "type" : "FunctionRef",
                     "resultTypeSpecifier" : {
                        "type" : "ChoiceTypeSpecifier",
                        "choice" : [ {
                           "name" : "{urn:hl7-org:elm-types:r1}Concept",
                           "type" : "NamedTypeSpecifier"
                        }, {
                           "name" : "{http://hl7.org/fhir}Reference",
                           "type" : "NamedTypeSpecifier"
                        } ]
                     },
                     "operand" : [ {
                        "path" : "medication",
                        "type" : "Property",
                        "source" : {
                           "locator" : "408:6-408:12",
                           "resultTypeName" : "{http://hl7.org/fhir}MedicationRequest",
                           "name" : "request",
                           "type" : "OperandRef"
                        }
                     } ]
                  },
                  "isTypeSpecifier" : {
                     "locator" : "408:28-408:34",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}Concept",
                     "name" : "{urn:hl7-org:elm-types:r1}Concept",
                     "type" : "NamedTypeSpecifier"
                  }
               },
               "then" : {
                  "locator" : "409:6-409:34",
                  "resultTypeName" : "{urn:hl7-org:elm-types:r1}Concept",
                  "strict" : false,
                  "type" : "As",
                  "operand" : {
                     "locator" : "409:6-409:23",
                     "name" : "ToValue",
                     "libraryName" : "FHIRHelpers",
                     "type" : "FunctionRef",
                     "resultTypeSpecifier" : {
                        "type" : "ChoiceTypeSpecifier",
                        "choice" : [ {
                           "name" : "{urn:hl7-org:elm-types:r1}Concept",
                           "type" : "NamedTypeSpecifier"
                        }, {
                           "name" : "{http://hl7.org/fhir}Reference",
                           "type" : "NamedTypeSpecifier"
                        } ]
                     },
                     "operand" : [ {
                        "path" : "medication",
                        "type" : "Property",
                        "source" : {
                           "locator" : "409:6-409:12",
                           "resultTypeName" : "{http://hl7.org/fhir}MedicationRequest",
                           "name" : "request",
                           "type" : "OperandRef"
                        }
                     } ]
                  },
                  "asTypeSpecifier" : {
                     "locator" : "409:28-409:34",
                     "resultTypeName" : "{urn:hl7-org:elm-types:r1}Concept",
                     "name" : "{urn:hl7-org:elm-types:r1}Concept",
                     "type" : "NamedTypeSpecifier"
                  }
               },
               "else" : {
                  "locator" : "411:6-411:108",
                  "resultTypeName" : "{urn:hl7-org:elm-types:r1}Concept",
                  "name" : "ToConcept",
                  "libraryName" : "FHIRHelpers",
                  "type" : "FunctionRef",
                  "operand" : [ {
                     "path" : "code",
                     "type" : "Property",
                     "source" : {
                        "locator" : "411:6-411:103",
                        "resultTypeName" : "{http://hl7.org/fhir}Medication",
                        "type" : "SingletonFrom",
                        "signature" : [ {
                           "type" : "ListTypeSpecifier",
                           "elementType" : {
                              "name" : "{http://hl7.org/fhir}Medication",
                              "type" : "NamedTypeSpecifier"
                           }
                        } ],
                        "operand" : {
                           "locator" : "411:22-411:102",
                           "type" : "Query",
                           "resultTypeSpecifier" : {
                              "type" : "ListTypeSpecifier",
                              "elementType" : {
                                 "name" : "{http://hl7.org/fhir}Medication",
                                 "type" : "NamedTypeSpecifier"
                              }
                           },
                           "source" : [ {
                              "locator" : "411:23-411:36",
                              "alias" : "M",
                              "resultTypeSpecifier" : {
                                 "type" : "ListTypeSpecifier",
                                 "elementType" : {
                                    "name" : "{http://hl7.org/fhir}Medication",
                                    "type" : "NamedTypeSpecifier"
                                 }
                              },
                              "expression" : {
                                 "locator" : "411:23-411:34",
                                 "dataType" : "{http://hl7.org/fhir}Medication",
                                 "templateId" : "http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-medication",
                                 "type" : "Retrieve",
                                 "resultTypeSpecifier" : {
                                    "type" : "ListTypeSpecifier",
                                    "elementType" : {
                                       "name" : "{http://hl7.org/fhir}Medication",
                                       "type" : "NamedTypeSpecifier"
                                    }
                                 }
                              }
                           } ],
                           "relationship" : [ ],
                           "where" : {
                              "locator" : "411:38-411:101",
                              "resultTypeName" : "{urn:hl7-org:elm-types:r1}Boolean",
                              "type" : "Equal",
                              "signature" : [ {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              }, {
                                 "name" : "{urn:hl7-org:elm-types:r1}String",
                                 "type" : "NamedTypeSpecifier"
                              } ],
                              "operand" : [ {
                                 "locator" : "411:44-411:47",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                                 "path" : "value",
                                 "type" : "Property",
                                 "source" : {
                                    "path" : "id",
                                    "scope" : "M",
                                    "type" : "Property"
                                 }
                              }, {
                                 "locator" : "411:51-411:101",
                                 "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                                 "name" : "getId",
                                 "libraryName" : "QICoreCommon",
                                 "type" : "FunctionRef",
                                 "signature" : [ {
                                    "name" : "{urn:hl7-org:elm-types:r1}String",
                                    "type" : "NamedTypeSpecifier"
                                 } ],
                                 "operand" : [ {
                                    "locator" : "411:51-411:93",
                                    "resultTypeName" : "{urn:hl7-org:elm-types:r1}String",
                                    "path" : "value",
                                    "type" : "Property",
                                    "source" : {
                                       "path" : "reference",
                                       "type" : "Property",
                                       "source" : {
                                          "locator" : "411:51-411:83",
                                          "resultTypeName" : "{http://hl7.org/fhir}Reference",
                                          "strict" : false,
                                          "type" : "As",
                                          "operand" : {
                                             "locator" : "411:52-411:69",
                                             "name" : "ToValue",
                                             "libraryName" : "FHIRHelpers",
                                             "type" : "FunctionRef",
                                             "resultTypeSpecifier" : {
                                                "type" : "ChoiceTypeSpecifier",
                                                "choice" : [ {
                                                   "name" : "{urn:hl7-org:elm-types:r1}Concept",
                                                   "type" : "NamedTypeSpecifier"
                                                }, {
                                                   "name" : "{http://hl7.org/fhir}Reference",
                                                   "type" : "NamedTypeSpecifier"
                                                } ]
                                             },
                                             "operand" : [ {
                                                "path" : "medication",
                                                "type" : "Property",
                                                "source" : {
                                                   "locator" : "411:52-411:58",
                                                   "resultTypeName" : "{http://hl7.org/fhir}MedicationRequest",
                                                   "name" : "request",
                                                   "type" : "OperandRef"
                                                }
                                             } ]
                                          },
                                          "asTypeSpecifier" : {
                                             "locator" : "411:74-411:82",
                                             "resultTypeName" : "{http://hl7.org/fhir}Reference",
                                             "name" : "{http://hl7.org/fhir}Reference",
                                             "type" : "NamedTypeSpecifier"
                                          }
                                       }
                                    }
                                 } ]
                              } ]
                           }
                        }
                     }
                  } ]
               }
            },
            "operand" : [ {
               "name" : "request",
               "operandTypeSpecifier" : {
                  "locator" : "407:50-407:66",
                  "resultTypeName" : "{http://hl7.org/fhir}MedicationRequest",
                  "name" : "{http://hl7.org/fhir}MedicationRequest",
                  "type" : "NamedTypeSpecifier"
               }
            } ]
         } ]
      }
   }
}

"
    },
    {
      "id": "CQMCommon-2.0.000+cql",
      "contentType": "text/cql",
      "data": "/*
@update: JKR 2023-10-20 ->
Increment QICore version
*/

library CQMCommon version '2.0.000'

using QICore version '4.1.1'

include FHIRHelpers version '4.3.000' called FHIRHelpers
include QICoreCommon version '2.0.000' called QICoreCommon

valueset "Emergency Department Visit": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.292'
valueset "Encounter Inpatient": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.666.5.307'
valueset "Intensive Care Unit": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1029.206'
valueset "Observation Services": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1111.143'
valueset "Outpatient Surgery Service": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1110.38'
valueset "Present on Admission or Clinically Undetermined": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1147.197'

parameter "Measurement Period" Interval<DateTime>
  default Interval[@2025-01-01T00:00:00.0, @2026-01-01T00:00:00.0)

context Patient

define "Inpatient Encounter":
  [Encounter: "Encounter Inpatient"] EncounterInpatient
		where EncounterInpatient.status = 'finished'
		and EncounterInpatient.period ends during day of "Measurement Period"

/*
@description: Returns an interval of date values extracted from the input interval of date-time values
@comment: This function returns an interval constructed using the `date from` extractor on the start
and end values of the input date-time interval. Note that using a precision specifier such as `day of`
as part of a timing phrase is preferred to communicate intent to perform day-level comparison, as well
as for general readability.
*/
define function "ToDateInterval"(period Interval<DateTime>):
  Interval[date from start of period, date from end of period]

/*
@description: Calculates the difference in calendar days between the start and end of the given interval.
@deprecated: This function in deprecated. Use the fluent function `lengthInDays()` instead.
*/
define function "LengthInDays"(Value Interval<DateTime> ):
  difference in days between start of Value and end of Value

/*
@description: Calculates the difference in calendar days between the start and end of the given interval.
*/
define fluent function lengthInDays(Value Interval<DateTime> ):
  difference in days between start of Value and end of Value

/*
@description: Returns the most recent emergency department visit, if any, that occurs 1 hour or less prior to the given encounter.
@deprecated: This function is deprecated. Use the fluent function `edVisit()` instead.
*/
define function "ED Visit"(TheEncounter Encounter ):
  Last(
    [Encounter: "Emergency Department Visit"] EDVisit
      where EDVisit.status = 'finished'
        and EDVisit.period ends 1 hour or less on or before start of TheEncounter.period
      sort by end of period
    )

/*
@description: Returns the most recent emergency department visit, if any, that occurs 1 hour or less prior to the given encounter.
*/
define fluent function edVisit(TheEncounter Encounter ):
  Last(
    [Encounter: "Emergency Department Visit"] EDVisit
      where EDVisit.status = 'finished'
        and EDVisit.period ends 1 hour or less on or before start of TheEncounter.period
      sort by end of period
    )

/*
@description: Hospitalization returns the total interval for admission to discharge for the given encounter, or for the admission of any immediately prior emergency department visit to the discharge of the given encounter.
@deprecated: This function is deprecated. Use the fluent function `hospitalization()` instead.
*/
define function "Hospitalization"(TheEncounter Encounter ):
  ( "ED Visit"(TheEncounter) ) X
    return
        if X is null then TheEncounter.period
        else Interval[start of X.period, end of TheEncounter.period)

/*
@description: Hospitalization returns the total interval for admission to discharge for the given encounter, or for the admission of any immediately prior emergency department visit to the discharge of the given encounter.
*/
define fluent function hospitalization(TheEncounter Encounter ):
  (TheEncounter."edVisit"()) X
    return
        if X is null then TheEncounter.period
        else Interval[start of X.period, end of TheEncounter.period]

/*
@description: Returns list of all locations within an encounter, including locations for immediately prior ED visit.
@deprecated: This function is deprecated. Use the fluent function `hospitalizationLocations()` instead.
*/
define function "Hospitalization Locations"(TheEncounter Encounter ):
  ( "ED Visit"(TheEncounter) ) EDEncounter
    return
        if EDEncounter is null then TheEncounter.location
        else flatten { EDEncounter.location, TheEncounter.location }

/*
@description: Returns list of all locations within an encounter, including locations for immediately prior ED visit.
*/
define fluent function hospitalizationLocations(TheEncounter Encounter ):
  ( TheEncounter."edVisit"()) EDEncounter
    return
        if EDEncounter is null then TheEncounter.location
        else flatten { EDEncounter.location, TheEncounter.location }

/*
@description: Returns the length of stay in days (i.e. the number of days between admission and discharge) for the given encounter, or from the admission of any immediately prior emergency department visit to the discharge of the encounter
@deprecated: This function is deprecated. Use the fluent function `hospitalizationLengthOfStay()` instead.
*/
define function "Hospitalization Length of Stay"(TheEncounter Encounter ):
  LengthInDays("Hospitalization"(TheEncounter))

/*
@description: Returns the length of stay in days (i.e. the number of days between admission and discharge) for the given encounter, or from the admission of any immediately prior emergency department visit to the discharge of the encounter
*/
define fluent function hospitalizationLengthOfStay(TheEncounter Encounter ):
   TheEncounter."hospitalization"()."lengthInDays"()

/*
@description: Returns admission time for an encounter or for immediately prior emergency department visit.
@deprecated: This function is deprecated. Use the fluent function `hospitalAdmissionTime()` instead.
*/
define function "Hospital Admission Time"(TheEncounter Encounter ):
  start of "Hospitalization"(TheEncounter)

/*
@description: Returns admission time for an encounter or for immediately prior emergency department visit.
*/
define fluent function hospitalAdmissionTime(TheEncounter Encounter ):
  start of (TheEncounter."hospitalization"())

/*
@description: Hospital Discharge Time returns the discharge time for an encounter
@deprecated: This function is deprecated. Use the fluent function `hospitalDischargeTime()` instead.
*/
define function "Hospital Discharge Time"(TheEncounter Encounter ):
  end of TheEncounter.period

/*
@description: Hospital Discharge Time returns the discharge time for an encounter
*/
define fluent function hospitalDischargeTime(TheEncounter Encounter ):
  end of TheEncounter.period

/*
@description: Returns earliest arrival time for an encounter including any prior ED visit.
@deprecated: This function is deprecated. Use the fluent function `hospitalArrivalTime()` instead.
*/
define function "Hospital Arrival Time"(TheEncounter Encounter ):
  start of First(
  	    ("Hospitalization Locations"(TheEncounter) ) HospitalLocation
  			sort by start of period
  	).period

/*
@description: Returns earliest arrival time for an encounter including any prior ED visit.
*/
define fluent function hospitalArrivalTime(TheEncounter Encounter ):
  start of First(
  	    (TheEncounter."hospitalizationLocations"()) HospitalLocation
  			sort by start of period
  	).period

/*
@description: Returns the latest departure time for encounter including any prior ED visit.
@deprecated: This function is deprecated. Use the fluent function `hospitalDepartureTime()` instead.
*/
define function "Hospital Departure Time"(TheEncounter Encounter):
	end of Last(
	    ( "Hospitalization Locations"(TheEncounter) ) HospitalLocation
			sort by start of period
	).period

/*
@description: Returns the latest departure time for encounter including any prior ED visit.
*/
define fluent function hospitalDepartureTime(TheEncounter Encounter):
	end of Last(
	    (TheEncounter."hospitalizationLocations"()) HospitalLocation
			sort by start of period
	).period

/*
@description: Returns the emergency department arrival time for the encounter.
@deprecated. This function is deprecated. Use the fluent function `emergencyDepartmentArrivalTime()` instead.
*/
define function "Emergency Department Arrival Time"(TheEncounter Encounter):
	start of (
	    singleton from (
	        ( "Hospitalization Locations"(TheEncounter) ) HospitalLocation
				where GetLocation(HospitalLocation.location).type in "Emergency Department Visit"
		)
	).period

/*
@description: Returns the emergency department arrival time for the encounter.
*/
define fluent function emergencyDepartmentArrivalTime(TheEncounter Encounter):
	start of (
	    singleton from (
	        ( (TheEncounter. "hospitalizationLocations"()) ) HospitalLocation
				where GetLocation(HospitalLocation.location).type in "Emergency Department Visit"
		)
	).period

/*
@description: Hospitalization with Observation and Outpatient Surgery Service returns the total interval from the start of any immediately prior emergency department visit, outpatient surgery visit or observation visit to the discharge of the given encounter.
@deprecated: This function is deprecated. Use the fluent function `hospitalizationWithObservationAndOutpatientSurgeryService()` instead.
*/
define function "HospitalizationWithObservationAndOutpatientSurgeryService"(TheEncounter "Encounter" ):
  TheEncounter Visit
	  let ObsVisit: Last([Encounter: "Observation Services"] LastObs
		  	where LastObs.status = 'finished'
          and LastObs.period ends 1 hour or less on or before start of Visit.period
			  sort by	end of period
    	),
    	VisitStart: Coalesce(start of ObsVisit.period, start of Visit.period),
    	EDVisit: Last([Encounter: "Emergency Department Visit"] LastED
			  where LastED.status = 'finished'
          and LastED.period ends 1 hour or less on or before VisitStart
			  sort by	end of period
    	),
    	VisitStartWithED: Coalesce(start of EDVisit.period, VisitStart),
    	OutpatientSurgeryVisit: Last([Encounter: "Outpatient Surgery Service"] LastSurgeryOP
			  where LastSurgeryOP.period ends 1 hour or less on or before VisitStartWithED
			  sort by	end of period
    	)
  	return Interval[Coalesce(start of OutpatientSurgeryVisit.period, VisitStartWithED), end of Visit.period]

/*
@description: Hospitalization with Observation and Outpatient Surgery Service returns the total interval from the start of any immediately prior emergency department visit, outpatient surgery visit or observation visit to the discharge of the given encounter.
*/
define fluent function hospitalizationWithObservationAndOutpatientSurgeryService(TheEncounter "Encounter" ):
  TheEncounter Visit
	  let ObsVisit: Last([Encounter: "Observation Services"] LastObs
		  	where LastObs.status = 'finished'
          and LastObs.period ends 1 hour or less on or before start of Visit.period
			  sort by	end of period
    	),
    	VisitStart: Coalesce(start of ObsVisit.period, start of Visit.period),
    	EDVisit: Last([Encounter: "Emergency Department Visit"] LastED
			  where LastED.status = 'finished'
          and LastED.period ends 1 hour or less on or before VisitStart
			  sort by	end of period
    	),
    	VisitStartWithED: Coalesce(start of EDVisit.period, VisitStart),
    	OutpatientSurgeryVisit: Last([Encounter: "Outpatient Surgery Service"] LastSurgeryOP
			  where LastSurgeryOP.period ends 1 hour or less on or before VisitStartWithED
			  sort by	end of period
    	)
  	return Interval[Coalesce(start of OutpatientSurgeryVisit.period, VisitStartWithED), end of Visit.period]

/*
@description: Hospitalization with Observation returns the total interval from the start of any immediately prior emergency department visit through the observation visit to the discharge of the given encounter
@deprecated: This function is deprecated. Use the fluent function `hospitalizationWithObservation()` instead.
*/
define function "HospitalizationWithObservation"(TheEncounter Encounter ):
  TheEncounter Visit
  		let ObsVisit: Last([Encounter: "Observation Services"] LastObs
  				where LastObs.status = 'finished'
            and LastObs.period ends 1 hour or less on or before start of Visit.period
  				sort by end of period
  			),
  			VisitStart: Coalesce(start of ObsVisit.period, start of Visit.period),
  			EDVisit: Last([Encounter: "Emergency Department Visit"] LastED
  				where LastED.status = 'finished'
            and LastED.period ends 1 hour or less on or before VisitStart
  				sort by end of period
  			)
  		return Interval[Coalesce(start of EDVisit.period, VisitStart), end of Visit.period]

/*
@description: Hospitalization with Observation returns the total interval from the start of any immediately prior emergency department visit through the observation visit to the discharge of the given encounter
*/
define fluent function hospitalizationWithObservation(TheEncounter Encounter ):
  TheEncounter Visit
  		let ObsVisit: Last([Encounter: "Observation Services"] LastObs
  				where LastObs.status = 'finished'
            and LastObs.period ends 1 hour or less on or before start of Visit.period
  				sort by end of period
  			),
  			VisitStart: Coalesce(start of ObsVisit.period, start of Visit.period),
  			EDVisit: Last([Encounter: "Emergency Department Visit"] LastED
  				where LastED.status = 'finished'
            and LastED.period ends 1 hour or less on or before VisitStart
  				sort by end of period
  			)
  		return Interval[Coalesce(start of EDVisit.period, VisitStart), end of Visit.period]

/*
@description: Hospitalization with Observation Length of Stay returns the length in days from the start of any immediately prior emergency department visit through the observation visit to the discharge of the given encounter
@deprecated: This function is deprecated. Use the fluent function `hospitalizationWithObservationLengthofStay()` instead.
*/
define function "HospitalizationWithObservationLengthofStay"(TheEncounter "Encounter" ):
  "LengthInDays"("HospitalizationWithObservation"(TheEncounter))

/*
@description: Hospitalization with Observation Length of Stay returns the length in days from the start of any immediately prior emergency department visit through the observation visit to the discharge of the given encounter
*/
define fluent function hospitalizationWithObservationLengthofStay(TheEncounter "Encounter" ):
  ((TheEncounter."hospitalizationWithObservation"(). "lengthInDays"()))

/*
@description: First Inpatient Intensive Care Unit returns the first intensive care unit for the given encounter, without considering any immediately prior emergency department visit.
@deprecated: This function is deprecated. Use the fluent function `firstInpatientIntensiveCareUnit()` instead.
*/
define function "FirstInpatientIntensiveCareUnit"(Encounter Encounter ):
  First((Encounter.location)HospitalLocation
  			where GetLocation(HospitalLocation.location).type in "Intensive Care Unit"
  				and HospitalLocation.period during Encounter.period
  			sort by start of period
  	)

/*
@description: First Inpatient Intensive Care Unit returns the first intensive care unit for the given encounter, without considering any immediately prior emergency department visit.
*/
define fluent function firstInpatientIntensiveCareUnit(Encounter Encounter ):
  First((Encounter.location)HospitalLocation
  			where GetLocation(HospitalLocation.location).type in "Intensive Care Unit"
  				and HospitalLocation.period during Encounter.period
  			sort by start of period
  	)

/*
@description: Returns the Condition resource referenced by the `diagnosis.condition` element of the Encounter
@deprecated: This function is deprecated. Use the fluent function `encounterDiagnosis()` instead.
*/
define function "EncounterDiagnosis"(Encounter Encounter ):
  Encounter.diagnosis D
	return singleton from ([Condition] C where C.id = D.condition.reference.getId())

/*
@description: Returns the Condition resources referenced by the diagnosis element of the Encounter
*/
define fluent function encounterDiagnosis(Encounter Encounter ):
  Encounter.diagnosis D
    return singleton from ([Condition] C where C.id = D.condition.reference.getId())

/*
@description: Returns the Condition resource for the given reference
@deprecated: This function is deprecated. Use the fluent function `getCondition()` instead
*/
define function "GetCondition"(reference Reference):
  singleton from ([Condition] C where C.id = reference.reference.getId())

/*
@description: Returns the Condition resource for the given reference
*/
define fluent function getCondition(reference Reference):
  singleton from ([Condition] C where C.id = reference.reference.getId())

/*
@description: Returns the condition that is specified as the principal diagnosis for the encounter
@deprecated: This function is deprecated. Use the fluent function `principalDiagnosis()` instead.
*/
define function "PrincipalDiagnosis"(Encounter Encounter ):
	singleton from ((Encounter.diagnosis D where D.rank = 1) PD
      return singleton from ([Condition] C where C.id = PD.condition.reference.getId())
	)

/*
@description: Returns the condition that is specified as the principal diagnosis for the encounter
*/
define fluent function principalDiagnosis(Encounter Encounter ):
	singleton from ((Encounter.diagnosis D where D.rank = 1) PD
      return singleton from ([Condition] C where C.id = PD.condition.reference.getId())
	)

/*
@description: Returns the Location resource specified by the given reference
@deprecated: This function is deprecated. Use the fluent function `getLocation()` instead.
*/
define function "GetLocation"(reference Reference ):
  singleton from (
    [Location] L where L.id = reference.reference.getId()
  )

/*
@description: Returns the Location resource specified by the given reference.
*/
define fluent function getLocation(reference Reference ):
  singleton from (
    [Location] L where L.id = reference.reference.getId()
  )

/*
@description: Returns the medication code for the given MedicationRequest
@deprecated: This function is deprecated. Use the fluent function `getMedicationCode()` instead.
*/
define function "GetMedicationCode"(request MedicationRequest ):
  if request.medication is Concept then
  	  request.medication as Concept
  	else
  	  (singleton from ([Medication] M where M.id = (request.medication as Reference).reference.getId())).code

/*
@description: Returns the medication code for the given MedicationRequest
*/
define fluent function getMedicationCode(request MedicationRequest ):
  if request.medication is Concept then
  	  request.medication as Concept
  	else
  	  (singleton from ([Medication] M where M.id = (request.medication as Reference).reference.getId())).code
"
    },
    {
      "id": "CQMCommon-2.0.000+dll",
      "contentType": "application/octet-stream",
      "data": "
    },
    {
      "id": "CQMCommon-2.0.000+csharp",
      "contentType": "text/plain",
      "data": "using System;
using System.Linq;
using System.Collections.Generic;
using Hl7.Cql.Runtime;
using Hl7.Cql.Primitives;
using Hl7.Cql.Abstractions;
using Hl7.Cql.ValueSets;
using Hl7.Cql.Iso8601;
using Hl7.Fhir.Model;
using Range = Hl7.Fhir.Model.Range;
using Task = Hl7.Fhir.Model.Task;
[System.CodeDom.Compiler.GeneratedCode(".NET Code Generation", "2.0.0.0")]
[CqlLibrary("CQMCommon", "2.0.000")]
public class CQMCommon_2_0_000
{


    internal CqlContext context;

    #region Cached values

    internal Lazy<CqlValueSet> __Emergency_Department_Visit;
    internal Lazy<CqlValueSet> __Encounter_Inpatient;
    internal Lazy<CqlValueSet> __Intensive_Care_Unit;
    internal Lazy<CqlValueSet> __Observation_Services;
    internal Lazy<CqlValueSet> __Outpatient_Surgery_Service;
    internal Lazy<CqlValueSet> __Present_on_Admission_or_Clinically_Undetermined;
    internal Lazy<CqlInterval<CqlDateTime>> __Measurement_Period;
    internal Lazy<Patient> __Patient;
    internal Lazy<IEnumerable<Encounter>> __Inpatient_Encounter;

    #endregion
    public CQMCommon_2_0_000(CqlContext context)
    {
        this.context = context ?? throw new ArgumentNullException("context");

        FHIRHelpers_4_3_000 = new FHIRHelpers_4_3_000(context);
        QICoreCommon_2_0_000 = new QICoreCommon_2_0_000(context);

        __Emergency_Department_Visit = new Lazy<CqlValueSet>(this.Emergency_Department_Visit_Value);
        __Encounter_Inpatient = new Lazy<CqlValueSet>(this.Encounter_Inpatient_Value);
        __Intensive_Care_Unit = new Lazy<CqlValueSet>(this.Intensive_Care_Unit_Value);
        __Observation_Services = new Lazy<CqlValueSet>(this.Observation_Services_Value);
        __Outpatient_Surgery_Service = new Lazy<CqlValueSet>(this.Outpatient_Surgery_Service_Value);
        __Present_on_Admission_or_Clinically_Undetermined = new Lazy<CqlValueSet>(this.Present_on_Admission_or_Clinically_Undetermined_Value);
        __Measurement_Period = new Lazy<CqlInterval<CqlDateTime>>(this.Measurement_Period_Value);
        __Patient = new Lazy<Patient>(this.Patient_Value);
        __Inpatient_Encounter = new Lazy<IEnumerable<Encounter>>(this.Inpatient_Encounter_Value);
    }
    #region Dependencies

    public FHIRHelpers_4_3_000 FHIRHelpers_4_3_000 { get; }
    public QICoreCommon_2_0_000 QICoreCommon_2_0_000 { get; }

    #endregion

	private CqlValueSet Emergency_Department_Visit_Value() => 
		new CqlValueSet("http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.292", null);

    [CqlDeclaration("Emergency Department Visit")]
    [CqlValueSet("http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.292")]
	public CqlValueSet Emergency_Department_Visit() => 
		__Emergency_Department_Visit.Value;

	private CqlValueSet Encounter_Inpatient_Value() => 
		new CqlValueSet("http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.666.5.307", null);

    [CqlDeclaration("Encounter Inpatient")]
    [CqlValueSet("http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.666.5.307")]
	public CqlValueSet Encounter_Inpatient() => 
		__Encounter_Inpatient.Value;

	private CqlValueSet Intensive_Care_Unit_Value() => 
		new CqlValueSet("http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1029.206", null);

    [CqlDeclaration("Intensive Care Unit")]
    [CqlValueSet("http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1029.206")]
	public CqlValueSet Intensive_Care_Unit() => 
		__Intensive_Care_Unit.Value;

	private CqlValueSet Observation_Services_Value() => 
		new CqlValueSet("http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1111.143", null);

    [CqlDeclaration("Observation Services")]
    [CqlValueSet("http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1111.143")]
	public CqlValueSet Observation_Services() => 
		__Observation_Services.Value;

	private CqlValueSet Outpatient_Surgery_Service_Value() => 
		new CqlValueSet("http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1110.38", null);

    [CqlDeclaration("Outpatient Surgery Service")]
    [CqlValueSet("http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1110.38")]
	public CqlValueSet Outpatient_Surgery_Service() => 
		__Outpatient_Surgery_Service.Value;

	private CqlValueSet Present_on_Admission_or_Clinically_Undetermined_Value() => 
		new CqlValueSet("http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1147.197", null);

    [CqlDeclaration("Present on Admission or Clinically Undetermined")]
    [CqlValueSet("http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1147.197")]
	public CqlValueSet Present_on_Admission_or_Clinically_Undetermined() => 
		__Present_on_Admission_or_Clinically_Undetermined.Value;

	private CqlInterval<CqlDateTime> Measurement_Period_Value()
	{
		var a_ = context.Operators.ConvertIntegerToDecimal(default);
		var b_ = context.Operators.DateTime((int?)2025, (int?)1, (int?)1, (int?)0, (int?)0, (int?)0, (int?)0, a_);
		var d_ = context.Operators.DateTime((int?)2026, (int?)1, (int?)1, (int?)0, (int?)0, (int?)0, (int?)0, a_);
		var e_ = context.Operators.Interval(b_, d_, true, false);
		var f_ = context.ResolveParameter("CQMCommon-2.0.000", "Measurement Period", e_);

		return (CqlInterval<CqlDateTime>)f_;
	}

    [CqlDeclaration("Measurement Period")]
	public CqlInterval<CqlDateTime> Measurement_Period() => 
		__Measurement_Period.Value;

	private Patient Patient_Value()
	{
		var a_ = context.Operators.RetrieveByValueSet<Patient>(null, null);
		var b_ = context.Operators.SingleOrNull<Patient>(a_);

		return b_;
	}

    [CqlDeclaration("Patient")]
	public Patient Patient() => 
		__Patient.Value;

	private IEnumerable<Encounter> Inpatient_Encounter_Value()
	{
		var a_ = this.Encounter_Inpatient();
		var b_ = context.Operators.RetrieveByValueSet<Encounter>(a_, null);
		bool? c_(Encounter EncounterInpatient)
		{
			var e_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(EncounterInpatient?.StatusElement?.Value);
			var f_ = context.Operators.Equal(e_, "finished");
			var g_ = FHIRHelpers_4_3_000.ToInterval(EncounterInpatient?.Period);
			var h_ = context.Operators.End(g_);
			var i_ = this.Measurement_Period();
			var j_ = context.Operators.ElementInInterval<CqlDateTime>(h_, i_, "day");
			var k_ = context.Operators.And(f_, j_);

			return k_;
		};
		var d_ = context.Operators.WhereOrNull<Encounter>(b_, c_);

		return d_;
	}

    [CqlDeclaration("Inpatient Encounter")]
	public IEnumerable<Encounter> Inpatient_Encounter() => 
		__Inpatient_Encounter.Value;

    [CqlDeclaration("ToDateInterval")]
    [CqlTag("description", "Returns an interval of date values extracted from the input interval of date-time values")]
    [CqlTag("comment", "This function returns an interval constructed using the `date from` extractor on the start and end values of the input date-time interval. Note that using a precision specifier such as `day of` as part of a timing phrase is preferred to communicate intent to perform day-level comparison, as well as for general readability.")]
	public CqlInterval<CqlDate> ToDateInterval(CqlInterval<CqlDateTime> period)
	{
		var a_ = context.Operators.Start(period);
		var b_ = context.Operators.DateFrom(a_);
		var c_ = context.Operators.End(period);
		var d_ = context.Operators.DateFrom(c_);
		var e_ = context.Operators.Interval(b_, d_, true, true);

		return e_;
	}

    [CqlDeclaration("LengthInDays")]
    [CqlTag("description", "Calculates the difference in calendar days between the start and end of the given interval.")]
    [CqlTag("deprecated", "This function in deprecated. Use the fluent function `lengthInDays()` instead.")]
	public int? LengthInDays(CqlInterval<CqlDateTime> Value)
	{
		var a_ = context.Operators.Start(Value);
		var b_ = context.Operators.End(Value);
		var c_ = context.Operators.DifferenceBetween(a_, b_, "day");

		return c_;
	}

    [CqlDeclaration("lengthInDays")]
    [CqlTag("description", "Calculates the difference in calendar days between the start and end of the given interval.")]
	public int? lengthInDays(CqlInterval<CqlDateTime> Value)
	{
		var a_ = context.Operators.Start(Value);
		var b_ = context.Operators.End(Value);
		var c_ = context.Operators.DifferenceBetween(a_, b_, "day");

		return c_;
	}

    [CqlDeclaration("ED Visit")]
    [CqlTag("description", "Returns the most recent emergency department visit, if any, that occurs 1 hour or less prior to the given encounter.")]
    [CqlTag("deprecated", "This function is deprecated. Use the fluent function `edVisit()` instead.")]
	public Encounter ED_Visit(Encounter TheEncounter)
	{
		var a_ = this.Emergency_Department_Visit();
		var b_ = context.Operators.RetrieveByValueSet<Encounter>(a_, null);
		bool? c_(Encounter EDVisit)
		{
			var h_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(EDVisit?.StatusElement?.Value);
			var i_ = context.Operators.Equal(h_, "finished");
			var j_ = FHIRHelpers_4_3_000.ToInterval(EDVisit?.Period);
			var k_ = context.Operators.End(j_);
			var l_ = FHIRHelpers_4_3_000.ToInterval(TheEncounter?.Period);
			var m_ = context.Operators.Start(l_);
			var n_ = context.Operators.Quantity(1m, "hour");
			var o_ = context.Operators.Subtract(m_, n_);
			var q_ = context.Operators.Start(l_);
			var r_ = context.Operators.Interval(o_, q_, true, true);
			var s_ = context.Operators.ElementInInterval<CqlDateTime>(k_, r_, null);
			var u_ = context.Operators.Start(l_);
			var v_ = context.Operators.Not((bool?)(u_ is null));
			var w_ = context.Operators.And(s_, v_);
			var x_ = context.Operators.And(i_, w_);

			return x_;
		};
		var d_ = context.Operators.WhereOrNull<Encounter>(b_, c_);
		object e_(Encounter @this)
		{
			var y_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
			var z_ = context.Operators.End(y_);

			return z_;
		};
		var f_ = context.Operators.ListSortBy<Encounter>(d_, e_, System.ComponentModel.ListSortDirection.Ascending);
		var g_ = context.Operators.LastOfList<Encounter>(f_);

		return g_;
	}

    [CqlDeclaration("edVisit")]
    [CqlTag("description", "Returns the most recent emergency department visit, if any, that occurs 1 hour or less prior to the given encounter.")]
	public Encounter edVisit(Encounter TheEncounter)
	{
		var a_ = this.Emergency_Department_Visit();
		var b_ = context.Operators.RetrieveByValueSet<Encounter>(a_, null);
		bool? c_(Encounter EDVisit)
		{
			var h_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(EDVisit?.StatusElement?.Value);
			var i_ = context.Operators.Equal(h_, "finished");
			var j_ = FHIRHelpers_4_3_000.ToInterval(EDVisit?.Period);
			var k_ = context.Operators.End(j_);
			var l_ = FHIRHelpers_4_3_000.ToInterval(TheEncounter?.Period);
			var m_ = context.Operators.Start(l_);
			var n_ = context.Operators.Quantity(1m, "hour");
			var o_ = context.Operators.Subtract(m_, n_);
			var q_ = context.Operators.Start(l_);
			var r_ = context.Operators.Interval(o_, q_, true, true);
			var s_ = context.Operators.ElementInInterval<CqlDateTime>(k_, r_, null);
			var u_ = context.Operators.Start(l_);
			var v_ = context.Operators.Not((bool?)(u_ is null));
			var w_ = context.Operators.And(s_, v_);
			var x_ = context.Operators.And(i_, w_);

			return x_;
		};
		var d_ = context.Operators.WhereOrNull<Encounter>(b_, c_);
		object e_(Encounter @this)
		{
			var y_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
			var z_ = context.Operators.End(y_);

			return z_;
		};
		var f_ = context.Operators.ListSortBy<Encounter>(d_, e_, System.ComponentModel.ListSortDirection.Ascending);
		var g_ = context.Operators.LastOfList<Encounter>(f_);

		return g_;
	}

    [CqlDeclaration("Hospitalization")]
    [CqlTag("description", "Hospitalization returns the total interval for admission to discharge for the given encounter, or for the admission of any immediately prior emergency department visit to the discharge of the given encounter.")]
    [CqlTag("deprecated", "This function is deprecated. Use the fluent function `hospitalization()` instead.")]
	public CqlInterval<CqlDateTime> Hospitalization(Encounter TheEncounter)
	{
		var a_ = this.ED_Visit(TheEncounter);
		var b_ = new Encounter[]
		{
			a_,
		};
		CqlInterval<CqlDateTime> c_(Encounter X)
		{
			CqlInterval<CqlDateTime> f_()
			{
				if ((X is null))
				{
					var g_ = FHIRHelpers_4_3_000.ToInterval(TheEncounter?.Period);

					return g_;
				}
				else
				{
					var h_ = FHIRHelpers_4_3_000.ToInterval(X?.Period);
					var i_ = context.Operators.Start(h_);
					var j_ = FHIRHelpers_4_3_000.ToInterval(TheEncounter?.Period);
					var k_ = context.Operators.End(j_);
					var l_ = context.Operators.Interval(i_, k_, true, false);

					return l_;
				};
			};

			return f_();
		};
		var d_ = context.Operators.SelectOrNull<Encounter, CqlInterval<CqlDateTime>>(b_, c_);
		var e_ = context.Operators.SingleOrNull<CqlInterval<CqlDateTime>>(d_);

		return e_;
	}

    [CqlDeclaration("hospitalization")]
    [CqlTag("description", "Hospitalization returns the total interval for admission to discharge for the given encounter, or for the admission of any immediately prior emergency department visit to the discharge of the given encounter.")]
	public CqlInterval<CqlDateTime> hospitalization(Encounter TheEncounter)
	{
		var a_ = this.edVisit(TheEncounter);
		var b_ = new Encounter[]
		{
			a_,
		};
		CqlInterval<CqlDateTime> c_(Encounter X)
		{
			CqlInterval<CqlDateTime> f_()
			{
				if ((X is null))
				{
					var g_ = FHIRHelpers_4_3_000.ToInterval(TheEncounter?.Period);

					return g_;
				}
				else
				{
					var h_ = FHIRHelpers_4_3_000.ToInterval(X?.Period);
					var i_ = context.Operators.Start(h_);
					var j_ = FHIRHelpers_4_3_000.ToInterval(TheEncounter?.Period);
					var k_ = context.Operators.End(j_);
					var l_ = context.Operators.Interval(i_, k_, true, true);

					return l_;
				};
			};

			return f_();
		};
		var d_ = context.Operators.SelectOrNull<Encounter, CqlInterval<CqlDateTime>>(b_, c_);
		var e_ = context.Operators.SingleOrNull<CqlInterval<CqlDateTime>>(d_);

		return e_;
	}

    [CqlDeclaration("Hospitalization Locations")]
    [CqlTag("description", "Returns list of all locations within an encounter, including locations for immediately prior ED visit.")]
    [CqlTag("deprecated", "This function is deprecated. Use the fluent function `hospitalizationLocations()` instead.")]
	public IEnumerable<Encounter.LocationComponent> Hospitalization_Locations(Encounter TheEncounter)
	{
		var a_ = this.ED_Visit(TheEncounter);
		var b_ = new Encounter[]
		{
			a_,
		};
		IEnumerable<Encounter.LocationComponent> c_(Encounter EDEncounter)
		{
			IEnumerable<Encounter.LocationComponent> f_()
			{
				if ((EDEncounter is null))
				{
					return (TheEncounter?.Location as IEnumerable<Encounter.LocationComponent>);
				}
				else
				{
					var g_ = new IEnumerable<Encounter.LocationComponent>[]
					{
						(EDEncounter?.Location as IEnumerable<Encounter.LocationComponent>),
						(TheEncounter?.Location as IEnumerable<Encounter.LocationComponent>),
					};
					var h_ = context.Operators.FlattenList<Encounter.LocationComponent>((g_ as IEnumerable<IEnumerable<Encounter.LocationComponent>>));

					return h_;
				};
			};

			return f_();
		};
		var d_ = context.Operators.SelectOrNull<Encounter, IEnumerable<Encounter.LocationComponent>>(b_, c_);
		var e_ = context.Operators.SingleOrNull<IEnumerable<Encounter.LocationComponent>>(d_);

		return e_;
	}

    [CqlDeclaration("hospitalizationLocations")]
    [CqlTag("description", "Returns list of all locations within an encounter, including locations for immediately prior ED visit.")]
	public IEnumerable<Encounter.LocationComponent> hospitalizationLocations(Encounter TheEncounter)
	{
		var a_ = this.edVisit(TheEncounter);
		var b_ = new Encounter[]
		{
			a_,
		};
		IEnumerable<Encounter.LocationComponent> c_(Encounter EDEncounter)
		{
			IEnumerable<Encounter.LocationComponent> f_()
			{
				if ((EDEncounter is null))
				{
					return (TheEncounter?.Location as IEnumerable<Encounter.LocationComponent>);
				}
				else
				{
					var g_ = new IEnumerable<Encounter.LocationComponent>[]
					{
						(EDEncounter?.Location as IEnumerable<Encounter.LocationComponent>),
						(TheEncounter?.Location as IEnumerable<Encounter.LocationComponent>),
					};
					var h_ = context.Operators.FlattenList<Encounter.LocationComponent>((g_ as IEnumerable<IEnumerable<Encounter.LocationComponent>>));

					return h_;
				};
			};

			return f_();
		};
		var d_ = context.Operators.SelectOrNull<Encounter, IEnumerable<Encounter.LocationComponent>>(b_, c_);
		var e_ = context.Operators.SingleOrNull<IEnumerable<Encounter.LocationComponent>>(d_);

		return e_;
	}

    [CqlDeclaration("Hospitalization Length of Stay")]
    [CqlTag("description", "Returns the length of stay in days (i.e. the number of days between admission and discharge) for the given encounter, or from the admission of any immediately prior emergency department visit to the discharge of the encounter")]
    [CqlTag("deprecated", "This function is deprecated. Use the fluent function `hospitalizationLengthOfStay()` instead.")]
	public int? Hospitalization_Length_of_Stay(Encounter TheEncounter)
	{
		var a_ = this.Hospitalization(TheEncounter);
		var b_ = this.LengthInDays(a_);

		return b_;
	}

    [CqlDeclaration("hospitalizationLengthOfStay")]
    [CqlTag("description", "Returns the length of stay in days (i.e. the number of days between admission and discharge) for the given encounter, or from the admission of any immediately prior emergency department visit to the discharge of the encounter")]
	public int? hospitalizationLengthOfStay(Encounter TheEncounter)
	{
		var a_ = this.hospitalization(TheEncounter);
		var b_ = this.lengthInDays(a_);

		return b_;
	}

    [CqlDeclaration("Hospital Admission Time")]
    [CqlTag("description", "Returns admission time for an encounter or for immediately prior emergency department visit.")]
    [CqlTag("deprecated", "This function is deprecated. Use the fluent function `hospitalAdmissionTime()` instead.")]
	public CqlDateTime Hospital_Admission_Time(Encounter TheEncounter)
	{
		var a_ = this.Hospitalization(TheEncounter);
		var b_ = context.Operators.Start(a_);

		return b_;
	}

    [CqlDeclaration("hospitalAdmissionTime")]
    [CqlTag("description", "Returns admission time for an encounter or for immediately prior emergency department visit.")]
	public CqlDateTime hospitalAdmissionTime(Encounter TheEncounter)
	{
		var a_ = this.hospitalization(TheEncounter);
		var b_ = context.Operators.Start(a_);

		return b_;
	}

    [CqlDeclaration("Hospital Discharge Time")]
    [CqlTag("description", "Hospital Discharge Time returns the discharge time for an encounter")]
    [CqlTag("deprecated", "This function is deprecated. Use the fluent function `hospitalDischargeTime()` instead.")]
	public CqlDateTime Hospital_Discharge_Time(Encounter TheEncounter)
	{
		var a_ = FHIRHelpers_4_3_000.ToInterval(TheEncounter?.Period);
		var b_ = context.Operators.End(a_);

		return b_;
	}

    [CqlDeclaration("hospitalDischargeTime")]
    [CqlTag("description", "Hospital Discharge Time returns the discharge time for an encounter")]
	public CqlDateTime hospitalDischargeTime(Encounter TheEncounter)
	{
		var a_ = FHIRHelpers_4_3_000.ToInterval(TheEncounter?.Period);
		var b_ = context.Operators.End(a_);

		return b_;
	}

    [CqlDeclaration("Hospital Arrival Time")]
    [CqlTag("description", "Returns earliest arrival time for an encounter including any prior ED visit.")]
    [CqlTag("deprecated", "This function is deprecated. Use the fluent function `hospitalArrivalTime()` instead.")]
	public CqlDateTime Hospital_Arrival_Time(Encounter TheEncounter)
	{
		var a_ = this.Hospitalization_Locations(TheEncounter);
		object b_(Encounter.LocationComponent @this)
		{
			var g_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
			var h_ = context.Operators.Start(g_);

			return h_;
		};
		var c_ = context.Operators.ListSortBy<Encounter.LocationComponent>(a_, b_, System.ComponentModel.ListSortDirection.Ascending);
		var d_ = context.Operators.FirstOfList<Encounter.LocationComponent>(c_);
		var e_ = FHIRHelpers_4_3_000.ToInterval(d_?.Period);
		var f_ = context.Operators.Start(e_);

		return f_;
	}

    [CqlDeclaration("hospitalArrivalTime")]
    [CqlTag("description", "Returns earliest arrival time for an encounter including any prior ED visit.")]
	public CqlDateTime hospitalArrivalTime(Encounter TheEncounter)
	{
		var a_ = this.hospitalizationLocations(TheEncounter);
		object b_(Encounter.LocationComponent @this)
		{
			var g_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
			var h_ = context.Operators.Start(g_);

			return h_;
		};
		var c_ = context.Operators.ListSortBy<Encounter.LocationComponent>(a_, b_, System.ComponentModel.ListSortDirection.Ascending);
		var d_ = context.Operators.FirstOfList<Encounter.LocationComponent>(c_);
		var e_ = FHIRHelpers_4_3_000.ToInterval(d_?.Period);
		var f_ = context.Operators.Start(e_);

		return f_;
	}

    [CqlDeclaration("Hospital Departure Time")]
    [CqlTag("description", "Returns the latest departure time for encounter including any prior ED visit.")]
    [CqlTag("deprecated", "This function is deprecated. Use the fluent function `hospitalDepartureTime()` instead.")]
	public CqlDateTime Hospital_Departure_Time(Encounter TheEncounter)
	{
		var a_ = this.Hospitalization_Locations(TheEncounter);
		object b_(Encounter.LocationComponent @this)
		{
			var g_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
			var h_ = context.Operators.Start(g_);

			return h_;
		};
		var c_ = context.Operators.ListSortBy<Encounter.LocationComponent>(a_, b_, System.ComponentModel.ListSortDirection.Ascending);
		var d_ = context.Operators.LastOfList<Encounter.LocationComponent>(c_);
		var e_ = FHIRHelpers_4_3_000.ToInterval(d_?.Period);
		var f_ = context.Operators.End(e_);

		return f_;
	}

    [CqlDeclaration("hospitalDepartureTime")]
    [CqlTag("description", "Returns the latest departure time for encounter including any prior ED visit.")]
	public CqlDateTime hospitalDepartureTime(Encounter TheEncounter)
	{
		var a_ = this.hospitalizationLocations(TheEncounter);
		object b_(Encounter.LocationComponent @this)
		{
			var g_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
			var h_ = context.Operators.Start(g_);

			return h_;
		};
		var c_ = context.Operators.ListSortBy<Encounter.LocationComponent>(a_, b_, System.ComponentModel.ListSortDirection.Ascending);
		var d_ = context.Operators.LastOfList<Encounter.LocationComponent>(c_);
		var e_ = FHIRHelpers_4_3_000.ToInterval(d_?.Period);
		var f_ = context.Operators.End(e_);

		return f_;
	}

    [CqlDeclaration("GetLocation")]
    [CqlTag("description", "Returns the Location resource specified by the given reference")]
    [CqlTag("deprecated", "This function is deprecated. Use the fluent function `getLocation()` instead.")]
	public Location GetLocation(ResourceReference reference)
	{
		var a_ = context.Operators.RetrieveByValueSet<Location>(null, null);
		bool? b_(Location L)
		{
			var e_ = QICoreCommon_2_0_000.getId(reference?.ReferenceElement?.Value);
			var f_ = context.Operators.Equal(L?.IdElement?.Value, e_);

			return f_;
		};
		var c_ = context.Operators.WhereOrNull<Location>(a_, b_);
		var d_ = context.Operators.SingleOrNull<Location>(c_);

		return d_;
	}

    [CqlDeclaration("Emergency Department Arrival Time")]
    [CqlTag("description", "Returns the emergency department arrival time for the encounter.")]
	public CqlDateTime Emergency_Department_Arrival_Time(Encounter TheEncounter)
	{
		var a_ = this.Hospitalization_Locations(TheEncounter);
		bool? b_(Encounter.LocationComponent HospitalLocation)
		{
			var g_ = this.GetLocation(HospitalLocation?.Location);
			CqlConcept h_(CodeableConcept @this)
			{
				var l_ = FHIRHelpers_4_3_000.ToConcept(@this);

				return l_;
			};
			var i_ = context.Operators.SelectOrNull<CodeableConcept, CqlConcept>(g_?.Type, h_);
			var j_ = this.Emergency_Department_Visit();
			var k_ = context.Operators.ConceptsInValueSet(i_, j_);

			return k_;
		};
		var c_ = context.Operators.WhereOrNull<Encounter.LocationComponent>(a_, b_);
		var d_ = context.Operators.SingleOrNull<Encounter.LocationComponent>(c_);
		var e_ = FHIRHelpers_4_3_000.ToInterval(d_?.Period);
		var f_ = context.Operators.Start(e_);

		return f_;
	}

    [CqlDeclaration("emergencyDepartmentArrivalTime")]
    [CqlTag("description", "Returns the emergency department arrival time for the encounter.")]
	public CqlDateTime emergencyDepartmentArrivalTime(Encounter TheEncounter)
	{
		var a_ = this.hospitalizationLocations(TheEncounter);
		bool? b_(Encounter.LocationComponent HospitalLocation)
		{
			var g_ = this.GetLocation(HospitalLocation?.Location);
			CqlConcept h_(CodeableConcept @this)
			{
				var l_ = FHIRHelpers_4_3_000.ToConcept(@this);

				return l_;
			};
			var i_ = context.Operators.SelectOrNull<CodeableConcept, CqlConcept>(g_?.Type, h_);
			var j_ = this.Emergency_Department_Visit();
			var k_ = context.Operators.ConceptsInValueSet(i_, j_);

			return k_;
		};
		var c_ = context.Operators.WhereOrNull<Encounter.LocationComponent>(a_, b_);
		var d_ = context.Operators.SingleOrNull<Encounter.LocationComponent>(c_);
		var e_ = FHIRHelpers_4_3_000.ToInterval(d_?.Period);
		var f_ = context.Operators.Start(e_);

		return f_;
	}

    [CqlDeclaration("HospitalizationWithObservationAndOutpatientSurgeryService")]
    [CqlTag("description", "Hospitalization with Observation and Outpatient Surgery Service returns the total interval from the start of any immediately prior emergency department visit, outpatient surgery visit or observation visit to the discharge of the given encounter.")]
    [CqlTag("deprecated", "This function is deprecated. Use the fluent function `hospitalizationWithObservationAndOutpatientSurgeryService()` instead.")]
	public CqlInterval<CqlDateTime> HospitalizationWithObservationAndOutpatientSurgeryService(Encounter TheEncounter)
	{
		var a_ = new Encounter[]
		{
			TheEncounter,
		};
		CqlInterval<CqlDateTime> b_(Encounter Visit)
		{
			var e_ = this.Outpatient_Surgery_Service();
			var f_ = context.Operators.RetrieveByValueSet<Encounter>(e_, null);
			bool? g_(Encounter LastSurgeryOP)
			{
				var ak_ = FHIRHelpers_4_3_000.ToInterval(LastSurgeryOP?.Period);
				var al_ = context.Operators.End(ak_);
				var am_ = this.Emergency_Department_Visit();
				var an_ = context.Operators.RetrieveByValueSet<Encounter>(am_, null);
				bool? ao_(Encounter LastED)
				{
					var da_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastED?.StatusElement?.Value);
					var db_ = context.Operators.Equal(da_, "finished");
					var dc_ = FHIRHelpers_4_3_000.ToInterval(LastED?.Period);
					var dd_ = context.Operators.End(dc_);
					var de_ = this.Observation_Services();
					var df_ = context.Operators.RetrieveByValueSet<Encounter>(de_, null);
					bool? dg_(Encounter LastObs)
					{
						var es_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
						var et_ = context.Operators.Equal(es_, "finished");
						var eu_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
						var ev_ = context.Operators.End(eu_);
						var ew_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
						var ex_ = context.Operators.Start(ew_);
						var ey_ = context.Operators.Quantity(1m, "hour");
						var ez_ = context.Operators.Subtract(ex_, ey_);
						var fb_ = context.Operators.Start(ew_);
						var fc_ = context.Operators.Interval(ez_, fb_, true, true);
						var fd_ = context.Operators.ElementInInterval<CqlDateTime>(ev_, fc_, null);
						var ff_ = context.Operators.Start(ew_);
						var fg_ = context.Operators.Not((bool?)(ff_ is null));
						var fh_ = context.Operators.And(fd_, fg_);
						var fi_ = context.Operators.And(et_, fh_);

						return fi_;
					};
					var dh_ = context.Operators.WhereOrNull<Encounter>(df_, dg_);
					object di_(Encounter @this)
					{
						var fj_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
						var fk_ = context.Operators.End(fj_);

						return fk_;
					};
					var dj_ = context.Operators.ListSortBy<Encounter>(dh_, di_, System.ComponentModel.ListSortDirection.Ascending);
					var dk_ = context.Operators.LastOfList<Encounter>(dj_);
					var dl_ = FHIRHelpers_4_3_000.ToInterval(dk_?.Period);
					var dm_ = context.Operators.Start(dl_);
					var dn_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var do_ = context.Operators.Start(dn_);
					var dp_ = context.Operators.Quantity(1m, "hour");
					var dq_ = context.Operators.Subtract((dm_ ?? do_), dp_);
					var ds_ = context.Operators.RetrieveByValueSet<Encounter>(de_, null);
					bool? dt_(Encounter LastObs)
					{
						var fl_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
						var fm_ = context.Operators.Equal(fl_, "finished");
						var fn_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
						var fo_ = context.Operators.End(fn_);
						var fp_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
						var fq_ = context.Operators.Start(fp_);
						var fr_ = context.Operators.Quantity(1m, "hour");
						var fs_ = context.Operators.Subtract(fq_, fr_);
						var fu_ = context.Operators.Start(fp_);
						var fv_ = context.Operators.Interval(fs_, fu_, true, true);
						var fw_ = context.Operators.ElementInInterval<CqlDateTime>(fo_, fv_, null);
						var fy_ = context.Operators.Start(fp_);
						var fz_ = context.Operators.Not((bool?)(fy_ is null));
						var ga_ = context.Operators.And(fw_, fz_);
						var gb_ = context.Operators.And(fm_, ga_);

						return gb_;
					};
					var du_ = context.Operators.WhereOrNull<Encounter>(ds_, dt_);
					object dv_(Encounter @this)
					{
						var gc_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
						var gd_ = context.Operators.End(gc_);

						return gd_;
					};
					var dw_ = context.Operators.ListSortBy<Encounter>(du_, dv_, System.ComponentModel.ListSortDirection.Ascending);
					var dx_ = context.Operators.LastOfList<Encounter>(dw_);
					var dy_ = FHIRHelpers_4_3_000.ToInterval(dx_?.Period);
					var dz_ = context.Operators.Start(dy_);
					var eb_ = context.Operators.Start(dn_);
					var ec_ = context.Operators.Interval(dq_, (dz_ ?? eb_), true, true);
					var ed_ = context.Operators.ElementInInterval<CqlDateTime>(dd_, ec_, null);
					var ef_ = context.Operators.RetrieveByValueSet<Encounter>(de_, null);
					bool? eg_(Encounter LastObs)
					{
						var ge_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
						var gf_ = context.Operators.Equal(ge_, "finished");
						var gg_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
						var gh_ = context.Operators.End(gg_);
						var gi_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
						var gj_ = context.Operators.Start(gi_);
						var gk_ = context.Operators.Quantity(1m, "hour");
						var gl_ = context.Operators.Subtract(gj_, gk_);
						var gn_ = context.Operators.Start(gi_);
						var go_ = context.Operators.Interval(gl_, gn_, true, true);
						var gp_ = context.Operators.ElementInInterval<CqlDateTime>(gh_, go_, null);
						var gr_ = context.Operators.Start(gi_);
						var gs_ = context.Operators.Not((bool?)(gr_ is null));
						var gt_ = context.Operators.And(gp_, gs_);
						var gu_ = context.Operators.And(gf_, gt_);

						return gu_;
					};
					var eh_ = context.Operators.WhereOrNull<Encounter>(ef_, eg_);
					object ei_(Encounter @this)
					{
						var gv_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
						var gw_ = context.Operators.End(gv_);

						return gw_;
					};
					var ej_ = context.Operators.ListSortBy<Encounter>(eh_, ei_, System.ComponentModel.ListSortDirection.Ascending);
					var ek_ = context.Operators.LastOfList<Encounter>(ej_);
					var el_ = FHIRHelpers_4_3_000.ToInterval(ek_?.Period);
					var em_ = context.Operators.Start(el_);
					var eo_ = context.Operators.Start(dn_);
					var ep_ = context.Operators.Not((bool?)((em_ ?? eo_) is null));
					var eq_ = context.Operators.And(ed_, ep_);
					var er_ = context.Operators.And(db_, eq_);

					return er_;
				};
				var ap_ = context.Operators.WhereOrNull<Encounter>(an_, ao_);
				object aq_(Encounter @this)
				{
					var gx_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var gy_ = context.Operators.End(gx_);

					return gy_;
				};
				var ar_ = context.Operators.ListSortBy<Encounter>(ap_, aq_, System.ComponentModel.ListSortDirection.Ascending);
				var as_ = context.Operators.LastOfList<Encounter>(ar_);
				var at_ = FHIRHelpers_4_3_000.ToInterval(as_?.Period);
				var au_ = context.Operators.Start(at_);
				var av_ = this.Observation_Services();
				var aw_ = context.Operators.RetrieveByValueSet<Encounter>(av_, null);
				bool? ax_(Encounter LastObs)
				{
					var gz_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
					var ha_ = context.Operators.Equal(gz_, "finished");
					var hb_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
					var hc_ = context.Operators.End(hb_);
					var hd_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var he_ = context.Operators.Start(hd_);
					var hf_ = context.Operators.Quantity(1m, "hour");
					var hg_ = context.Operators.Subtract(he_, hf_);
					var hi_ = context.Operators.Start(hd_);
					var hj_ = context.Operators.Interval(hg_, hi_, true, true);
					var hk_ = context.Operators.ElementInInterval<CqlDateTime>(hc_, hj_, null);
					var hm_ = context.Operators.Start(hd_);
					var hn_ = context.Operators.Not((bool?)(hm_ is null));
					var ho_ = context.Operators.And(hk_, hn_);
					var hp_ = context.Operators.And(ha_, ho_);

					return hp_;
				};
				var ay_ = context.Operators.WhereOrNull<Encounter>(aw_, ax_);
				object az_(Encounter @this)
				{
					var hq_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var hr_ = context.Operators.End(hq_);

					return hr_;
				};
				var ba_ = context.Operators.ListSortBy<Encounter>(ay_, az_, System.ComponentModel.ListSortDirection.Ascending);
				var bb_ = context.Operators.LastOfList<Encounter>(ba_);
				var bc_ = FHIRHelpers_4_3_000.ToInterval(bb_?.Period);
				var bd_ = context.Operators.Start(bc_);
				var be_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
				var bf_ = context.Operators.Start(be_);
				var bg_ = context.Operators.Quantity(1m, "hour");
				var bh_ = context.Operators.Subtract((au_ ?? (bd_ ?? bf_)), bg_);
				var bj_ = context.Operators.RetrieveByValueSet<Encounter>(am_, null);
				bool? bk_(Encounter LastED)
				{
					var hs_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastED?.StatusElement?.Value);
					var ht_ = context.Operators.Equal(hs_, "finished");
					var hu_ = FHIRHelpers_4_3_000.ToInterval(LastED?.Period);
					var hv_ = context.Operators.End(hu_);
					var hw_ = this.Observation_Services();
					var hx_ = context.Operators.RetrieveByValueSet<Encounter>(hw_, null);
					bool? hy_(Encounter LastObs)
					{
						var jk_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
						var jl_ = context.Operators.Equal(jk_, "finished");
						var jm_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
						var jn_ = context.Operators.End(jm_);
						var jo_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
						var jp_ = context.Operators.Start(jo_);
						var jq_ = context.Operators.Quantity(1m, "hour");
						var jr_ = context.Operators.Subtract(jp_, jq_);
						var jt_ = context.Operators.Start(jo_);
						var ju_ = context.Operators.Interval(jr_, jt_, true, true);
						var jv_ = context.Operators.ElementInInterval<CqlDateTime>(jn_, ju_, null);
						var jx_ = context.Operators.Start(jo_);
						var jy_ = context.Operators.Not((bool?)(jx_ is null));
						var jz_ = context.Operators.And(jv_, jy_);
						var ka_ = context.Operators.And(jl_, jz_);

						return ka_;
					};
					var hz_ = context.Operators.WhereOrNull<Encounter>(hx_, hy_);
					object ia_(Encounter @this)
					{
						var kb_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
						var kc_ = context.Operators.End(kb_);

						return kc_;
					};
					var ib_ = context.Operators.ListSortBy<Encounter>(hz_, ia_, System.ComponentModel.ListSortDirection.Ascending);
					var ic_ = context.Operators.LastOfList<Encounter>(ib_);
					var id_ = FHIRHelpers_4_3_000.ToInterval(ic_?.Period);
					var ie_ = context.Operators.Start(id_);
					var if_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var ig_ = context.Operators.Start(if_);
					var ih_ = context.Operators.Quantity(1m, "hour");
					var ii_ = context.Operators.Subtract((ie_ ?? ig_), ih_);
					var ik_ = context.Operators.RetrieveByValueSet<Encounter>(hw_, null);
					bool? il_(Encounter LastObs)
					{
						var kd_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
						var ke_ = context.Operators.Equal(kd_, "finished");
						var kf_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
						var kg_ = context.Operators.End(kf_);
						var kh_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
						var ki_ = context.Operators.Start(kh_);
						var kj_ = context.Operators.Quantity(1m, "hour");
						var kk_ = context.Operators.Subtract(ki_, kj_);
						var km_ = context.Operators.Start(kh_);
						var kn_ = context.Operators.Interval(kk_, km_, true, true);
						var ko_ = context.Operators.ElementInInterval<CqlDateTime>(kg_, kn_, null);
						var kq_ = context.Operators.Start(kh_);
						var kr_ = context.Operators.Not((bool?)(kq_ is null));
						var ks_ = context.Operators.And(ko_, kr_);
						var kt_ = context.Operators.And(ke_, ks_);

						return kt_;
					};
					var im_ = context.Operators.WhereOrNull<Encounter>(ik_, il_);
					object in_(Encounter @this)
					{
						var ku_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
						var kv_ = context.Operators.End(ku_);

						return kv_;
					};
					var io_ = context.Operators.ListSortBy<Encounter>(im_, in_, System.ComponentModel.ListSortDirection.Ascending);
					var ip_ = context.Operators.LastOfList<Encounter>(io_);
					var iq_ = FHIRHelpers_4_3_000.ToInterval(ip_?.Period);
					var ir_ = context.Operators.Start(iq_);
					var it_ = context.Operators.Start(if_);
					var iu_ = context.Operators.Interval(ii_, (ir_ ?? it_), true, true);
					var iv_ = context.Operators.ElementInInterval<CqlDateTime>(hv_, iu_, null);
					var ix_ = context.Operators.RetrieveByValueSet<Encounter>(hw_, null);
					bool? iy_(Encounter LastObs)
					{
						var kw_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
						var kx_ = context.Operators.Equal(kw_, "finished");
						var ky_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
						var kz_ = context.Operators.End(ky_);
						var la_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
						var lb_ = context.Operators.Start(la_);
						var lc_ = context.Operators.Quantity(1m, "hour");
						var ld_ = context.Operators.Subtract(lb_, lc_);
						var lf_ = context.Operators.Start(la_);
						var lg_ = context.Operators.Interval(ld_, lf_, true, true);
						var lh_ = context.Operators.ElementInInterval<CqlDateTime>(kz_, lg_, null);
						var lj_ = context.Operators.Start(la_);
						var lk_ = context.Operators.Not((bool?)(lj_ is null));
						var ll_ = context.Operators.And(lh_, lk_);
						var lm_ = context.Operators.And(kx_, ll_);

						return lm_;
					};
					var iz_ = context.Operators.WhereOrNull<Encounter>(ix_, iy_);
					object ja_(Encounter @this)
					{
						var ln_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
						var lo_ = context.Operators.End(ln_);

						return lo_;
					};
					var jb_ = context.Operators.ListSortBy<Encounter>(iz_, ja_, System.ComponentModel.ListSortDirection.Ascending);
					var jc_ = context.Operators.LastOfList<Encounter>(jb_);
					var jd_ = FHIRHelpers_4_3_000.ToInterval(jc_?.Period);
					var je_ = context.Operators.Start(jd_);
					var jg_ = context.Operators.Start(if_);
					var jh_ = context.Operators.Not((bool?)((je_ ?? jg_) is null));
					var ji_ = context.Operators.And(iv_, jh_);
					var jj_ = context.Operators.And(ht_, ji_);

					return jj_;
				};
				var bl_ = context.Operators.WhereOrNull<Encounter>(bj_, bk_);
				object bm_(Encounter @this)
				{
					var lp_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var lq_ = context.Operators.End(lp_);

					return lq_;
				};
				var bn_ = context.Operators.ListSortBy<Encounter>(bl_, bm_, System.ComponentModel.ListSortDirection.Ascending);
				var bo_ = context.Operators.LastOfList<Encounter>(bn_);
				var bp_ = FHIRHelpers_4_3_000.ToInterval(bo_?.Period);
				var bq_ = context.Operators.Start(bp_);
				var bs_ = context.Operators.RetrieveByValueSet<Encounter>(av_, null);
				bool? bt_(Encounter LastObs)
				{
					var lr_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
					var ls_ = context.Operators.Equal(lr_, "finished");
					var lt_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
					var lu_ = context.Operators.End(lt_);
					var lv_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var lw_ = context.Operators.Start(lv_);
					var lx_ = context.Operators.Quantity(1m, "hour");
					var ly_ = context.Operators.Subtract(lw_, lx_);
					var ma_ = context.Operators.Start(lv_);
					var mb_ = context.Operators.Interval(ly_, ma_, true, true);
					var mc_ = context.Operators.ElementInInterval<CqlDateTime>(lu_, mb_, null);
					var me_ = context.Operators.Start(lv_);
					var mf_ = context.Operators.Not((bool?)(me_ is null));
					var mg_ = context.Operators.And(mc_, mf_);
					var mh_ = context.Operators.And(ls_, mg_);

					return mh_;
				};
				var bu_ = context.Operators.WhereOrNull<Encounter>(bs_, bt_);
				object bv_(Encounter @this)
				{
					var mi_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var mj_ = context.Operators.End(mi_);

					return mj_;
				};
				var bw_ = context.Operators.ListSortBy<Encounter>(bu_, bv_, System.ComponentModel.ListSortDirection.Ascending);
				var bx_ = context.Operators.LastOfList<Encounter>(bw_);
				var by_ = FHIRHelpers_4_3_000.ToInterval(bx_?.Period);
				var bz_ = context.Operators.Start(by_);
				var cb_ = context.Operators.Start(be_);
				var cc_ = context.Operators.Interval(bh_, (bq_ ?? (bz_ ?? cb_)), true, true);
				var cd_ = context.Operators.ElementInInterval<CqlDateTime>(al_, cc_, null);
				var cf_ = context.Operators.RetrieveByValueSet<Encounter>(am_, null);
				bool? cg_(Encounter LastED)
				{
					var mk_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastED?.StatusElement?.Value);
					var ml_ = context.Operators.Equal(mk_, "finished");
					var mm_ = FHIRHelpers_4_3_000.ToInterval(LastED?.Period);
					var mn_ = context.Operators.End(mm_);
					var mo_ = this.Observation_Services();
					var mp_ = context.Operators.RetrieveByValueSet<Encounter>(mo_, null);
					bool? mq_(Encounter LastObs)
					{
						var oc_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
						var od_ = context.Operators.Equal(oc_, "finished");
						var oe_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
						var of_ = context.Operators.End(oe_);
						var og_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
						var oh_ = context.Operators.Start(og_);
						var oi_ = context.Operators.Quantity(1m, "hour");
						var oj_ = context.Operators.Subtract(oh_, oi_);
						var ol_ = context.Operators.Start(og_);
						var om_ = context.Operators.Interval(oj_, ol_, true, true);
						var on_ = context.Operators.ElementInInterval<CqlDateTime>(of_, om_, null);
						var op_ = context.Operators.Start(og_);
						var oq_ = context.Operators.Not((bool?)(op_ is null));
						var or_ = context.Operators.And(on_, oq_);
						var os_ = context.Operators.And(od_, or_);

						return os_;
					};
					var mr_ = context.Operators.WhereOrNull<Encounter>(mp_, mq_);
					object ms_(Encounter @this)
					{
						var ot_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
						var ou_ = context.Operators.End(ot_);

						return ou_;
					};
					var mt_ = context.Operators.ListSortBy<Encounter>(mr_, ms_, System.ComponentModel.ListSortDirection.Ascending);
					var mu_ = context.Operators.LastOfList<Encounter>(mt_);
					var mv_ = FHIRHelpers_4_3_000.ToInterval(mu_?.Period);
					var mw_ = context.Operators.Start(mv_);
					var mx_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var my_ = context.Operators.Start(mx_);
					var mz_ = context.Operators.Quantity(1m, "hour");
					var na_ = context.Operators.Subtract((mw_ ?? my_), mz_);
					var nc_ = context.Operators.RetrieveByValueSet<Encounter>(mo_, null);
					bool? nd_(Encounter LastObs)
					{
						var ov_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
						var ow_ = context.Operators.Equal(ov_, "finished");
						var ox_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
						var oy_ = context.Operators.End(ox_);
						var oz_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
						var pa_ = context.Operators.Start(oz_);
						var pb_ = context.Operators.Quantity(1m, "hour");
						var pc_ = context.Operators.Subtract(pa_, pb_);
						var pe_ = context.Operators.Start(oz_);
						var pf_ = context.Operators.Interval(pc_, pe_, true, true);
						var pg_ = context.Operators.ElementInInterval<CqlDateTime>(oy_, pf_, null);
						var pi_ = context.Operators.Start(oz_);
						var pj_ = context.Operators.Not((bool?)(pi_ is null));
						var pk_ = context.Operators.And(pg_, pj_);
						var pl_ = context.Operators.And(ow_, pk_);

						return pl_;
					};
					var ne_ = context.Operators.WhereOrNull<Encounter>(nc_, nd_);
					object nf_(Encounter @this)
					{
						var pm_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
						var pn_ = context.Operators.End(pm_);

						return pn_;
					};
					var ng_ = context.Operators.ListSortBy<Encounter>(ne_, nf_, System.ComponentModel.ListSortDirection.Ascending);
					var nh_ = context.Operators.LastOfList<Encounter>(ng_);
					var ni_ = FHIRHelpers_4_3_000.ToInterval(nh_?.Period);
					var nj_ = context.Operators.Start(ni_);
					var nl_ = context.Operators.Start(mx_);
					var nm_ = context.Operators.Interval(na_, (nj_ ?? nl_), true, true);
					var nn_ = context.Operators.ElementInInterval<CqlDateTime>(mn_, nm_, null);
					var np_ = context.Operators.RetrieveByValueSet<Encounter>(mo_, null);
					bool? nq_(Encounter LastObs)
					{
						var po_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
						var pp_ = context.Operators.Equal(po_, "finished");
						var pq_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
						var pr_ = context.Operators.End(pq_);
						var ps_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
						var pt_ = context.Operators.Start(ps_);
						var pu_ = context.Operators.Quantity(1m, "hour");
						var pv_ = context.Operators.Subtract(pt_, pu_);
						var px_ = context.Operators.Start(ps_);
						var py_ = context.Operators.Interval(pv_, px_, true, true);
						var pz_ = context.Operators.ElementInInterval<CqlDateTime>(pr_, py_, null);
						var qb_ = context.Operators.Start(ps_);
						var qc_ = context.Operators.Not((bool?)(qb_ is null));
						var qd_ = context.Operators.And(pz_, qc_);
						var qe_ = context.Operators.And(pp_, qd_);

						return qe_;
					};
					var nr_ = context.Operators.WhereOrNull<Encounter>(np_, nq_);
					object ns_(Encounter @this)
					{
						var qf_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
						var qg_ = context.Operators.End(qf_);

						return qg_;
					};
					var nt_ = context.Operators.ListSortBy<Encounter>(nr_, ns_, System.ComponentModel.ListSortDirection.Ascending);
					var nu_ = context.Operators.LastOfList<Encounter>(nt_);
					var nv_ = FHIRHelpers_4_3_000.ToInterval(nu_?.Period);
					var nw_ = context.Operators.Start(nv_);
					var ny_ = context.Operators.Start(mx_);
					var nz_ = context.Operators.Not((bool?)((nw_ ?? ny_) is null));
					var oa_ = context.Operators.And(nn_, nz_);
					var ob_ = context.Operators.And(ml_, oa_);

					return ob_;
				};
				var ch_ = context.Operators.WhereOrNull<Encounter>(cf_, cg_);
				object ci_(Encounter @this)
				{
					var qh_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var qi_ = context.Operators.End(qh_);

					return qi_;
				};
				var cj_ = context.Operators.ListSortBy<Encounter>(ch_, ci_, System.ComponentModel.ListSortDirection.Ascending);
				var ck_ = context.Operators.LastOfList<Encounter>(cj_);
				var cl_ = FHIRHelpers_4_3_000.ToInterval(ck_?.Period);
				var cm_ = context.Operators.Start(cl_);
				var co_ = context.Operators.RetrieveByValueSet<Encounter>(av_, null);
				bool? cp_(Encounter LastObs)
				{
					var qj_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
					var qk_ = context.Operators.Equal(qj_, "finished");
					var ql_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
					var qm_ = context.Operators.End(ql_);
					var qn_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var qo_ = context.Operators.Start(qn_);
					var qp_ = context.Operators.Quantity(1m, "hour");
					var qq_ = context.Operators.Subtract(qo_, qp_);
					var qs_ = context.Operators.Start(qn_);
					var qt_ = context.Operators.Interval(qq_, qs_, true, true);
					var qu_ = context.Operators.ElementInInterval<CqlDateTime>(qm_, qt_, null);
					var qw_ = context.Operators.Start(qn_);
					var qx_ = context.Operators.Not((bool?)(qw_ is null));
					var qy_ = context.Operators.And(qu_, qx_);
					var qz_ = context.Operators.And(qk_, qy_);

					return qz_;
				};
				var cq_ = context.Operators.WhereOrNull<Encounter>(co_, cp_);
				object cr_(Encounter @this)
				{
					var ra_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var rb_ = context.Operators.End(ra_);

					return rb_;
				};
				var cs_ = context.Operators.ListSortBy<Encounter>(cq_, cr_, System.ComponentModel.ListSortDirection.Ascending);
				var ct_ = context.Operators.LastOfList<Encounter>(cs_);
				var cu_ = FHIRHelpers_4_3_000.ToInterval(ct_?.Period);
				var cv_ = context.Operators.Start(cu_);
				var cx_ = context.Operators.Start(be_);
				var cy_ = context.Operators.Not((bool?)((cm_ ?? (cv_ ?? cx_)) is null));
				var cz_ = context.Operators.And(cd_, cy_);

				return cz_;
			};
			var h_ = context.Operators.WhereOrNull<Encounter>(f_, g_);
			object i_(Encounter @this)
			{
				var rc_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
				var rd_ = context.Operators.End(rc_);

				return rd_;
			};
			var j_ = context.Operators.ListSortBy<Encounter>(h_, i_, System.ComponentModel.ListSortDirection.Ascending);
			var k_ = context.Operators.LastOfList<Encounter>(j_);
			var l_ = FHIRHelpers_4_3_000.ToInterval(k_?.Period);
			var m_ = context.Operators.Start(l_);
			var n_ = this.Emergency_Department_Visit();
			var o_ = context.Operators.RetrieveByValueSet<Encounter>(n_, null);
			bool? p_(Encounter LastED)
			{
				var re_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastED?.StatusElement?.Value);
				var rf_ = context.Operators.Equal(re_, "finished");
				var rg_ = FHIRHelpers_4_3_000.ToInterval(LastED?.Period);
				var rh_ = context.Operators.End(rg_);
				var ri_ = this.Observation_Services();
				var rj_ = context.Operators.RetrieveByValueSet<Encounter>(ri_, null);
				bool? rk_(Encounter LastObs)
				{
					var sw_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
					var sx_ = context.Operators.Equal(sw_, "finished");
					var sy_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
					var sz_ = context.Operators.End(sy_);
					var ta_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var tb_ = context.Operators.Start(ta_);
					var tc_ = context.Operators.Quantity(1m, "hour");
					var td_ = context.Operators.Subtract(tb_, tc_);
					var tf_ = context.Operators.Start(ta_);
					var tg_ = context.Operators.Interval(td_, tf_, true, true);
					var th_ = context.Operators.ElementInInterval<CqlDateTime>(sz_, tg_, null);
					var tj_ = context.Operators.Start(ta_);
					var tk_ = context.Operators.Not((bool?)(tj_ is null));
					var tl_ = context.Operators.And(th_, tk_);
					var tm_ = context.Operators.And(sx_, tl_);

					return tm_;
				};
				var rl_ = context.Operators.WhereOrNull<Encounter>(rj_, rk_);
				object rm_(Encounter @this)
				{
					var tn_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var to_ = context.Operators.End(tn_);

					return to_;
				};
				var rn_ = context.Operators.ListSortBy<Encounter>(rl_, rm_, System.ComponentModel.ListSortDirection.Ascending);
				var ro_ = context.Operators.LastOfList<Encounter>(rn_);
				var rp_ = FHIRHelpers_4_3_000.ToInterval(ro_?.Period);
				var rq_ = context.Operators.Start(rp_);
				var rr_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
				var rs_ = context.Operators.Start(rr_);
				var rt_ = context.Operators.Quantity(1m, "hour");
				var ru_ = context.Operators.Subtract((rq_ ?? rs_), rt_);
				var rw_ = context.Operators.RetrieveByValueSet<Encounter>(ri_, null);
				bool? rx_(Encounter LastObs)
				{
					var tp_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
					var tq_ = context.Operators.Equal(tp_, "finished");
					var tr_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
					var ts_ = context.Operators.End(tr_);
					var tt_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var tu_ = context.Operators.Start(tt_);
					var tv_ = context.Operators.Quantity(1m, "hour");
					var tw_ = context.Operators.Subtract(tu_, tv_);
					var ty_ = context.Operators.Start(tt_);
					var tz_ = context.Operators.Interval(tw_, ty_, true, true);
					var ua_ = context.Operators.ElementInInterval<CqlDateTime>(ts_, tz_, null);
					var uc_ = context.Operators.Start(tt_);
					var ud_ = context.Operators.Not((bool?)(uc_ is null));
					var ue_ = context.Operators.And(ua_, ud_);
					var uf_ = context.Operators.And(tq_, ue_);

					return uf_;
				};
				var ry_ = context.Operators.WhereOrNull<Encounter>(rw_, rx_);
				object rz_(Encounter @this)
				{
					var ug_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var uh_ = context.Operators.End(ug_);

					return uh_;
				};
				var sa_ = context.Operators.ListSortBy<Encounter>(ry_, rz_, System.ComponentModel.ListSortDirection.Ascending);
				var sb_ = context.Operators.LastOfList<Encounter>(sa_);
				var sc_ = FHIRHelpers_4_3_000.ToInterval(sb_?.Period);
				var sd_ = context.Operators.Start(sc_);
				var sf_ = context.Operators.Start(rr_);
				var sg_ = context.Operators.Interval(ru_, (sd_ ?? sf_), true, true);
				var sh_ = context.Operators.ElementInInterval<CqlDateTime>(rh_, sg_, null);
				var sj_ = context.Operators.RetrieveByValueSet<Encounter>(ri_, null);
				bool? sk_(Encounter LastObs)
				{
					var ui_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
					var uj_ = context.Operators.Equal(ui_, "finished");
					var uk_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
					var ul_ = context.Operators.End(uk_);
					var um_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var un_ = context.Operators.Start(um_);
					var uo_ = context.Operators.Quantity(1m, "hour");
					var up_ = context.Operators.Subtract(un_, uo_);
					var ur_ = context.Operators.Start(um_);
					var us_ = context.Operators.Interval(up_, ur_, true, true);
					var ut_ = context.Operators.ElementInInterval<CqlDateTime>(ul_, us_, null);
					var uv_ = context.Operators.Start(um_);
					var uw_ = context.Operators.Not((bool?)(uv_ is null));
					var ux_ = context.Operators.And(ut_, uw_);
					var uy_ = context.Operators.And(uj_, ux_);

					return uy_;
				};
				var sl_ = context.Operators.WhereOrNull<Encounter>(sj_, sk_);
				object sm_(Encounter @this)
				{
					var uz_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var va_ = context.Operators.End(uz_);

					return va_;
				};
				var sn_ = context.Operators.ListSortBy<Encounter>(sl_, sm_, System.ComponentModel.ListSortDirection.Ascending);
				var so_ = context.Operators.LastOfList<Encounter>(sn_);
				var sp_ = FHIRHelpers_4_3_000.ToInterval(so_?.Period);
				var sq_ = context.Operators.Start(sp_);
				var ss_ = context.Operators.Start(rr_);
				var st_ = context.Operators.Not((bool?)((sq_ ?? ss_) is null));
				var su_ = context.Operators.And(sh_, st_);
				var sv_ = context.Operators.And(rf_, su_);

				return sv_;
			};
			var q_ = context.Operators.WhereOrNull<Encounter>(o_, p_);
			object r_(Encounter @this)
			{
				var vb_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
				var vc_ = context.Operators.End(vb_);

				return vc_;
			};
			var s_ = context.Operators.ListSortBy<Encounter>(q_, r_, System.ComponentModel.ListSortDirection.Ascending);
			var t_ = context.Operators.LastOfList<Encounter>(s_);
			var u_ = FHIRHelpers_4_3_000.ToInterval(t_?.Period);
			var v_ = context.Operators.Start(u_);
			var w_ = this.Observation_Services();
			var x_ = context.Operators.RetrieveByValueSet<Encounter>(w_, null);
			bool? y_(Encounter LastObs)
			{
				var vd_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
				var ve_ = context.Operators.Equal(vd_, "finished");
				var vf_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
				var vg_ = context.Operators.End(vf_);
				var vh_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
				var vi_ = context.Operators.Start(vh_);
				var vj_ = context.Operators.Quantity(1m, "hour");
				var vk_ = context.Operators.Subtract(vi_, vj_);
				var vm_ = context.Operators.Start(vh_);
				var vn_ = context.Operators.Interval(vk_, vm_, true, true);
				var vo_ = context.Operators.ElementInInterval<CqlDateTime>(vg_, vn_, null);
				var vq_ = context.Operators.Start(vh_);
				var vr_ = context.Operators.Not((bool?)(vq_ is null));
				var vs_ = context.Operators.And(vo_, vr_);
				var vt_ = context.Operators.And(ve_, vs_);

				return vt_;
			};
			var z_ = context.Operators.WhereOrNull<Encounter>(x_, y_);
			object aa_(Encounter @this)
			{
				var vu_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
				var vv_ = context.Operators.End(vu_);

				return vv_;
			};
			var ab_ = context.Operators.ListSortBy<Encounter>(z_, aa_, System.ComponentModel.ListSortDirection.Ascending);
			var ac_ = context.Operators.LastOfList<Encounter>(ab_);
			var ad_ = FHIRHelpers_4_3_000.ToInterval(ac_?.Period);
			var ae_ = context.Operators.Start(ad_);
			var af_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
			var ag_ = context.Operators.Start(af_);
			var ai_ = context.Operators.End(af_);
			var aj_ = context.Operators.Interval((m_ ?? (v_ ?? (ae_ ?? ag_))), ai_, true, true);

			return aj_;
		};
		var c_ = context.Operators.SelectOrNull<Encounter, CqlInterval<CqlDateTime>>(a_, b_);
		var d_ = context.Operators.SingleOrNull<CqlInterval<CqlDateTime>>(c_);

		return d_;
	}

    [CqlDeclaration("hospitalizationWithObservationAndOutpatientSurgeryService")]
    [CqlTag("description", "Hospitalization with Observation and Outpatient Surgery Service returns the total interval from the start of any immediately prior emergency department visit, outpatient surgery visit or observation visit to the discharge of the given encounter.")]
	public CqlInterval<CqlDateTime> hospitalizationWithObservationAndOutpatientSurgeryService(Encounter TheEncounter)
	{
		var a_ = new Encounter[]
		{
			TheEncounter,
		};
		CqlInterval<CqlDateTime> b_(Encounter Visit)
		{
			var e_ = this.Outpatient_Surgery_Service();
			var f_ = context.Operators.RetrieveByValueSet<Encounter>(e_, null);
			bool? g_(Encounter LastSurgeryOP)
			{
				var ak_ = FHIRHelpers_4_3_000.ToInterval(LastSurgeryOP?.Period);
				var al_ = context.Operators.End(ak_);
				var am_ = this.Emergency_Department_Visit();
				var an_ = context.Operators.RetrieveByValueSet<Encounter>(am_, null);
				bool? ao_(Encounter LastED)
				{
					var da_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastED?.StatusElement?.Value);
					var db_ = context.Operators.Equal(da_, "finished");
					var dc_ = FHIRHelpers_4_3_000.ToInterval(LastED?.Period);
					var dd_ = context.Operators.End(dc_);
					var de_ = this.Observation_Services();
					var df_ = context.Operators.RetrieveByValueSet<Encounter>(de_, null);
					bool? dg_(Encounter LastObs)
					{
						var es_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
						var et_ = context.Operators.Equal(es_, "finished");
						var eu_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
						var ev_ = context.Operators.End(eu_);
						var ew_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
						var ex_ = context.Operators.Start(ew_);
						var ey_ = context.Operators.Quantity(1m, "hour");
						var ez_ = context.Operators.Subtract(ex_, ey_);
						var fb_ = context.Operators.Start(ew_);
						var fc_ = context.Operators.Interval(ez_, fb_, true, true);
						var fd_ = context.Operators.ElementInInterval<CqlDateTime>(ev_, fc_, null);
						var ff_ = context.Operators.Start(ew_);
						var fg_ = context.Operators.Not((bool?)(ff_ is null));
						var fh_ = context.Operators.And(fd_, fg_);
						var fi_ = context.Operators.And(et_, fh_);

						return fi_;
					};
					var dh_ = context.Operators.WhereOrNull<Encounter>(df_, dg_);
					object di_(Encounter @this)
					{
						var fj_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
						var fk_ = context.Operators.End(fj_);

						return fk_;
					};
					var dj_ = context.Operators.ListSortBy<Encounter>(dh_, di_, System.ComponentModel.ListSortDirection.Ascending);
					var dk_ = context.Operators.LastOfList<Encounter>(dj_);
					var dl_ = FHIRHelpers_4_3_000.ToInterval(dk_?.Period);
					var dm_ = context.Operators.Start(dl_);
					var dn_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var do_ = context.Operators.Start(dn_);
					var dp_ = context.Operators.Quantity(1m, "hour");
					var dq_ = context.Operators.Subtract((dm_ ?? do_), dp_);
					var ds_ = context.Operators.RetrieveByValueSet<Encounter>(de_, null);
					bool? dt_(Encounter LastObs)
					{
						var fl_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
						var fm_ = context.Operators.Equal(fl_, "finished");
						var fn_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
						var fo_ = context.Operators.End(fn_);
						var fp_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
						var fq_ = context.Operators.Start(fp_);
						var fr_ = context.Operators.Quantity(1m, "hour");
						var fs_ = context.Operators.Subtract(fq_, fr_);
						var fu_ = context.Operators.Start(fp_);
						var fv_ = context.Operators.Interval(fs_, fu_, true, true);
						var fw_ = context.Operators.ElementInInterval<CqlDateTime>(fo_, fv_, null);
						var fy_ = context.Operators.Start(fp_);
						var fz_ = context.Operators.Not((bool?)(fy_ is null));
						var ga_ = context.Operators.And(fw_, fz_);
						var gb_ = context.Operators.And(fm_, ga_);

						return gb_;
					};
					var du_ = context.Operators.WhereOrNull<Encounter>(ds_, dt_);
					object dv_(Encounter @this)
					{
						var gc_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
						var gd_ = context.Operators.End(gc_);

						return gd_;
					};
					var dw_ = context.Operators.ListSortBy<Encounter>(du_, dv_, System.ComponentModel.ListSortDirection.Ascending);
					var dx_ = context.Operators.LastOfList<Encounter>(dw_);
					var dy_ = FHIRHelpers_4_3_000.ToInterval(dx_?.Period);
					var dz_ = context.Operators.Start(dy_);
					var eb_ = context.Operators.Start(dn_);
					var ec_ = context.Operators.Interval(dq_, (dz_ ?? eb_), true, true);
					var ed_ = context.Operators.ElementInInterval<CqlDateTime>(dd_, ec_, null);
					var ef_ = context.Operators.RetrieveByValueSet<Encounter>(de_, null);
					bool? eg_(Encounter LastObs)
					{
						var ge_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
						var gf_ = context.Operators.Equal(ge_, "finished");
						var gg_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
						var gh_ = context.Operators.End(gg_);
						var gi_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
						var gj_ = context.Operators.Start(gi_);
						var gk_ = context.Operators.Quantity(1m, "hour");
						var gl_ = context.Operators.Subtract(gj_, gk_);
						var gn_ = context.Operators.Start(gi_);
						var go_ = context.Operators.Interval(gl_, gn_, true, true);
						var gp_ = context.Operators.ElementInInterval<CqlDateTime>(gh_, go_, null);
						var gr_ = context.Operators.Start(gi_);
						var gs_ = context.Operators.Not((bool?)(gr_ is null));
						var gt_ = context.Operators.And(gp_, gs_);
						var gu_ = context.Operators.And(gf_, gt_);

						return gu_;
					};
					var eh_ = context.Operators.WhereOrNull<Encounter>(ef_, eg_);
					object ei_(Encounter @this)
					{
						var gv_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
						var gw_ = context.Operators.End(gv_);

						return gw_;
					};
					var ej_ = context.Operators.ListSortBy<Encounter>(eh_, ei_, System.ComponentModel.ListSortDirection.Ascending);
					var ek_ = context.Operators.LastOfList<Encounter>(ej_);
					var el_ = FHIRHelpers_4_3_000.ToInterval(ek_?.Period);
					var em_ = context.Operators.Start(el_);
					var eo_ = context.Operators.Start(dn_);
					var ep_ = context.Operators.Not((bool?)((em_ ?? eo_) is null));
					var eq_ = context.Operators.And(ed_, ep_);
					var er_ = context.Operators.And(db_, eq_);

					return er_;
				};
				var ap_ = context.Operators.WhereOrNull<Encounter>(an_, ao_);
				object aq_(Encounter @this)
				{
					var gx_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var gy_ = context.Operators.End(gx_);

					return gy_;
				};
				var ar_ = context.Operators.ListSortBy<Encounter>(ap_, aq_, System.ComponentModel.ListSortDirection.Ascending);
				var as_ = context.Operators.LastOfList<Encounter>(ar_);
				var at_ = FHIRHelpers_4_3_000.ToInterval(as_?.Period);
				var au_ = context.Operators.Start(at_);
				var av_ = this.Observation_Services();
				var aw_ = context.Operators.RetrieveByValueSet<Encounter>(av_, null);
				bool? ax_(Encounter LastObs)
				{
					var gz_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
					var ha_ = context.Operators.Equal(gz_, "finished");
					var hb_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
					var hc_ = context.Operators.End(hb_);
					var hd_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var he_ = context.Operators.Start(hd_);
					var hf_ = context.Operators.Quantity(1m, "hour");
					var hg_ = context.Operators.Subtract(he_, hf_);
					var hi_ = context.Operators.Start(hd_);
					var hj_ = context.Operators.Interval(hg_, hi_, true, true);
					var hk_ = context.Operators.ElementInInterval<CqlDateTime>(hc_, hj_, null);
					var hm_ = context.Operators.Start(hd_);
					var hn_ = context.Operators.Not((bool?)(hm_ is null));
					var ho_ = context.Operators.And(hk_, hn_);
					var hp_ = context.Operators.And(ha_, ho_);

					return hp_;
				};
				var ay_ = context.Operators.WhereOrNull<Encounter>(aw_, ax_);
				object az_(Encounter @this)
				{
					var hq_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var hr_ = context.Operators.End(hq_);

					return hr_;
				};
				var ba_ = context.Operators.ListSortBy<Encounter>(ay_, az_, System.ComponentModel.ListSortDirection.Ascending);
				var bb_ = context.Operators.LastOfList<Encounter>(ba_);
				var bc_ = FHIRHelpers_4_3_000.ToInterval(bb_?.Period);
				var bd_ = context.Operators.Start(bc_);
				var be_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
				var bf_ = context.Operators.Start(be_);
				var bg_ = context.Operators.Quantity(1m, "hour");
				var bh_ = context.Operators.Subtract((au_ ?? (bd_ ?? bf_)), bg_);
				var bj_ = context.Operators.RetrieveByValueSet<Encounter>(am_, null);
				bool? bk_(Encounter LastED)
				{
					var hs_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastED?.StatusElement?.Value);
					var ht_ = context.Operators.Equal(hs_, "finished");
					var hu_ = FHIRHelpers_4_3_000.ToInterval(LastED?.Period);
					var hv_ = context.Operators.End(hu_);
					var hw_ = this.Observation_Services();
					var hx_ = context.Operators.RetrieveByValueSet<Encounter>(hw_, null);
					bool? hy_(Encounter LastObs)
					{
						var jk_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
						var jl_ = context.Operators.Equal(jk_, "finished");
						var jm_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
						var jn_ = context.Operators.End(jm_);
						var jo_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
						var jp_ = context.Operators.Start(jo_);
						var jq_ = context.Operators.Quantity(1m, "hour");
						var jr_ = context.Operators.Subtract(jp_, jq_);
						var jt_ = context.Operators.Start(jo_);
						var ju_ = context.Operators.Interval(jr_, jt_, true, true);
						var jv_ = context.Operators.ElementInInterval<CqlDateTime>(jn_, ju_, null);
						var jx_ = context.Operators.Start(jo_);
						var jy_ = context.Operators.Not((bool?)(jx_ is null));
						var jz_ = context.Operators.And(jv_, jy_);
						var ka_ = context.Operators.And(jl_, jz_);

						return ka_;
					};
					var hz_ = context.Operators.WhereOrNull<Encounter>(hx_, hy_);
					object ia_(Encounter @this)
					{
						var kb_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
						var kc_ = context.Operators.End(kb_);

						return kc_;
					};
					var ib_ = context.Operators.ListSortBy<Encounter>(hz_, ia_, System.ComponentModel.ListSortDirection.Ascending);
					var ic_ = context.Operators.LastOfList<Encounter>(ib_);
					var id_ = FHIRHelpers_4_3_000.ToInterval(ic_?.Period);
					var ie_ = context.Operators.Start(id_);
					var if_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var ig_ = context.Operators.Start(if_);
					var ih_ = context.Operators.Quantity(1m, "hour");
					var ii_ = context.Operators.Subtract((ie_ ?? ig_), ih_);
					var ik_ = context.Operators.RetrieveByValueSet<Encounter>(hw_, null);
					bool? il_(Encounter LastObs)
					{
						var kd_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
						var ke_ = context.Operators.Equal(kd_, "finished");
						var kf_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
						var kg_ = context.Operators.End(kf_);
						var kh_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
						var ki_ = context.Operators.Start(kh_);
						var kj_ = context.Operators.Quantity(1m, "hour");
						var kk_ = context.Operators.Subtract(ki_, kj_);
						var km_ = context.Operators.Start(kh_);
						var kn_ = context.Operators.Interval(kk_, km_, true, true);
						var ko_ = context.Operators.ElementInInterval<CqlDateTime>(kg_, kn_, null);
						var kq_ = context.Operators.Start(kh_);
						var kr_ = context.Operators.Not((bool?)(kq_ is null));
						var ks_ = context.Operators.And(ko_, kr_);
						var kt_ = context.Operators.And(ke_, ks_);

						return kt_;
					};
					var im_ = context.Operators.WhereOrNull<Encounter>(ik_, il_);
					object in_(Encounter @this)
					{
						var ku_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
						var kv_ = context.Operators.End(ku_);

						return kv_;
					};
					var io_ = context.Operators.ListSortBy<Encounter>(im_, in_, System.ComponentModel.ListSortDirection.Ascending);
					var ip_ = context.Operators.LastOfList<Encounter>(io_);
					var iq_ = FHIRHelpers_4_3_000.ToInterval(ip_?.Period);
					var ir_ = context.Operators.Start(iq_);
					var it_ = context.Operators.Start(if_);
					var iu_ = context.Operators.Interval(ii_, (ir_ ?? it_), true, true);
					var iv_ = context.Operators.ElementInInterval<CqlDateTime>(hv_, iu_, null);
					var ix_ = context.Operators.RetrieveByValueSet<Encounter>(hw_, null);
					bool? iy_(Encounter LastObs)
					{
						var kw_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
						var kx_ = context.Operators.Equal(kw_, "finished");
						var ky_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
						var kz_ = context.Operators.End(ky_);
						var la_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
						var lb_ = context.Operators.Start(la_);
						var lc_ = context.Operators.Quantity(1m, "hour");
						var ld_ = context.Operators.Subtract(lb_, lc_);
						var lf_ = context.Operators.Start(la_);
						var lg_ = context.Operators.Interval(ld_, lf_, true, true);
						var lh_ = context.Operators.ElementInInterval<CqlDateTime>(kz_, lg_, null);
						var lj_ = context.Operators.Start(la_);
						var lk_ = context.Operators.Not((bool?)(lj_ is null));
						var ll_ = context.Operators.And(lh_, lk_);
						var lm_ = context.Operators.And(kx_, ll_);

						return lm_;
					};
					var iz_ = context.Operators.WhereOrNull<Encounter>(ix_, iy_);
					object ja_(Encounter @this)
					{
						var ln_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
						var lo_ = context.Operators.End(ln_);

						return lo_;
					};
					var jb_ = context.Operators.ListSortBy<Encounter>(iz_, ja_, System.ComponentModel.ListSortDirection.Ascending);
					var jc_ = context.Operators.LastOfList<Encounter>(jb_);
					var jd_ = FHIRHelpers_4_3_000.ToInterval(jc_?.Period);
					var je_ = context.Operators.Start(jd_);
					var jg_ = context.Operators.Start(if_);
					var jh_ = context.Operators.Not((bool?)((je_ ?? jg_) is null));
					var ji_ = context.Operators.And(iv_, jh_);
					var jj_ = context.Operators.And(ht_, ji_);

					return jj_;
				};
				var bl_ = context.Operators.WhereOrNull<Encounter>(bj_, bk_);
				object bm_(Encounter @this)
				{
					var lp_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var lq_ = context.Operators.End(lp_);

					return lq_;
				};
				var bn_ = context.Operators.ListSortBy<Encounter>(bl_, bm_, System.ComponentModel.ListSortDirection.Ascending);
				var bo_ = context.Operators.LastOfList<Encounter>(bn_);
				var bp_ = FHIRHelpers_4_3_000.ToInterval(bo_?.Period);
				var bq_ = context.Operators.Start(bp_);
				var bs_ = context.Operators.RetrieveByValueSet<Encounter>(av_, null);
				bool? bt_(Encounter LastObs)
				{
					var lr_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
					var ls_ = context.Operators.Equal(lr_, "finished");
					var lt_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
					var lu_ = context.Operators.End(lt_);
					var lv_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var lw_ = context.Operators.Start(lv_);
					var lx_ = context.Operators.Quantity(1m, "hour");
					var ly_ = context.Operators.Subtract(lw_, lx_);
					var ma_ = context.Operators.Start(lv_);
					var mb_ = context.Operators.Interval(ly_, ma_, true, true);
					var mc_ = context.Operators.ElementInInterval<CqlDateTime>(lu_, mb_, null);
					var me_ = context.Operators.Start(lv_);
					var mf_ = context.Operators.Not((bool?)(me_ is null));
					var mg_ = context.Operators.And(mc_, mf_);
					var mh_ = context.Operators.And(ls_, mg_);

					return mh_;
				};
				var bu_ = context.Operators.WhereOrNull<Encounter>(bs_, bt_);
				object bv_(Encounter @this)
				{
					var mi_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var mj_ = context.Operators.End(mi_);

					return mj_;
				};
				var bw_ = context.Operators.ListSortBy<Encounter>(bu_, bv_, System.ComponentModel.ListSortDirection.Ascending);
				var bx_ = context.Operators.LastOfList<Encounter>(bw_);
				var by_ = FHIRHelpers_4_3_000.ToInterval(bx_?.Period);
				var bz_ = context.Operators.Start(by_);
				var cb_ = context.Operators.Start(be_);
				var cc_ = context.Operators.Interval(bh_, (bq_ ?? (bz_ ?? cb_)), true, true);
				var cd_ = context.Operators.ElementInInterval<CqlDateTime>(al_, cc_, null);
				var cf_ = context.Operators.RetrieveByValueSet<Encounter>(am_, null);
				bool? cg_(Encounter LastED)
				{
					var mk_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastED?.StatusElement?.Value);
					var ml_ = context.Operators.Equal(mk_, "finished");
					var mm_ = FHIRHelpers_4_3_000.ToInterval(LastED?.Period);
					var mn_ = context.Operators.End(mm_);
					var mo_ = this.Observation_Services();
					var mp_ = context.Operators.RetrieveByValueSet<Encounter>(mo_, null);
					bool? mq_(Encounter LastObs)
					{
						var oc_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
						var od_ = context.Operators.Equal(oc_, "finished");
						var oe_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
						var of_ = context.Operators.End(oe_);
						var og_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
						var oh_ = context.Operators.Start(og_);
						var oi_ = context.Operators.Quantity(1m, "hour");
						var oj_ = context.Operators.Subtract(oh_, oi_);
						var ol_ = context.Operators.Start(og_);
						var om_ = context.Operators.Interval(oj_, ol_, true, true);
						var on_ = context.Operators.ElementInInterval<CqlDateTime>(of_, om_, null);
						var op_ = context.Operators.Start(og_);
						var oq_ = context.Operators.Not((bool?)(op_ is null));
						var or_ = context.Operators.And(on_, oq_);
						var os_ = context.Operators.And(od_, or_);

						return os_;
					};
					var mr_ = context.Operators.WhereOrNull<Encounter>(mp_, mq_);
					object ms_(Encounter @this)
					{
						var ot_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
						var ou_ = context.Operators.End(ot_);

						return ou_;
					};
					var mt_ = context.Operators.ListSortBy<Encounter>(mr_, ms_, System.ComponentModel.ListSortDirection.Ascending);
					var mu_ = context.Operators.LastOfList<Encounter>(mt_);
					var mv_ = FHIRHelpers_4_3_000.ToInterval(mu_?.Period);
					var mw_ = context.Operators.Start(mv_);
					var mx_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var my_ = context.Operators.Start(mx_);
					var mz_ = context.Operators.Quantity(1m, "hour");
					var na_ = context.Operators.Subtract((mw_ ?? my_), mz_);
					var nc_ = context.Operators.RetrieveByValueSet<Encounter>(mo_, null);
					bool? nd_(Encounter LastObs)
					{
						var ov_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
						var ow_ = context.Operators.Equal(ov_, "finished");
						var ox_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
						var oy_ = context.Operators.End(ox_);
						var oz_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
						var pa_ = context.Operators.Start(oz_);
						var pb_ = context.Operators.Quantity(1m, "hour");
						var pc_ = context.Operators.Subtract(pa_, pb_);
						var pe_ = context.Operators.Start(oz_);
						var pf_ = context.Operators.Interval(pc_, pe_, true, true);
						var pg_ = context.Operators.ElementInInterval<CqlDateTime>(oy_, pf_, null);
						var pi_ = context.Operators.Start(oz_);
						var pj_ = context.Operators.Not((bool?)(pi_ is null));
						var pk_ = context.Operators.And(pg_, pj_);
						var pl_ = context.Operators.And(ow_, pk_);

						return pl_;
					};
					var ne_ = context.Operators.WhereOrNull<Encounter>(nc_, nd_);
					object nf_(Encounter @this)
					{
						var pm_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
						var pn_ = context.Operators.End(pm_);

						return pn_;
					};
					var ng_ = context.Operators.ListSortBy<Encounter>(ne_, nf_, System.ComponentModel.ListSortDirection.Ascending);
					var nh_ = context.Operators.LastOfList<Encounter>(ng_);
					var ni_ = FHIRHelpers_4_3_000.ToInterval(nh_?.Period);
					var nj_ = context.Operators.Start(ni_);
					var nl_ = context.Operators.Start(mx_);
					var nm_ = context.Operators.Interval(na_, (nj_ ?? nl_), true, true);
					var nn_ = context.Operators.ElementInInterval<CqlDateTime>(mn_, nm_, null);
					var np_ = context.Operators.RetrieveByValueSet<Encounter>(mo_, null);
					bool? nq_(Encounter LastObs)
					{
						var po_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
						var pp_ = context.Operators.Equal(po_, "finished");
						var pq_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
						var pr_ = context.Operators.End(pq_);
						var ps_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
						var pt_ = context.Operators.Start(ps_);
						var pu_ = context.Operators.Quantity(1m, "hour");
						var pv_ = context.Operators.Subtract(pt_, pu_);
						var px_ = context.Operators.Start(ps_);
						var py_ = context.Operators.Interval(pv_, px_, true, true);
						var pz_ = context.Operators.ElementInInterval<CqlDateTime>(pr_, py_, null);
						var qb_ = context.Operators.Start(ps_);
						var qc_ = context.Operators.Not((bool?)(qb_ is null));
						var qd_ = context.Operators.And(pz_, qc_);
						var qe_ = context.Operators.And(pp_, qd_);

						return qe_;
					};
					var nr_ = context.Operators.WhereOrNull<Encounter>(np_, nq_);
					object ns_(Encounter @this)
					{
						var qf_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
						var qg_ = context.Operators.End(qf_);

						return qg_;
					};
					var nt_ = context.Operators.ListSortBy<Encounter>(nr_, ns_, System.ComponentModel.ListSortDirection.Ascending);
					var nu_ = context.Operators.LastOfList<Encounter>(nt_);
					var nv_ = FHIRHelpers_4_3_000.ToInterval(nu_?.Period);
					var nw_ = context.Operators.Start(nv_);
					var ny_ = context.Operators.Start(mx_);
					var nz_ = context.Operators.Not((bool?)((nw_ ?? ny_) is null));
					var oa_ = context.Operators.And(nn_, nz_);
					var ob_ = context.Operators.And(ml_, oa_);

					return ob_;
				};
				var ch_ = context.Operators.WhereOrNull<Encounter>(cf_, cg_);
				object ci_(Encounter @this)
				{
					var qh_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var qi_ = context.Operators.End(qh_);

					return qi_;
				};
				var cj_ = context.Operators.ListSortBy<Encounter>(ch_, ci_, System.ComponentModel.ListSortDirection.Ascending);
				var ck_ = context.Operators.LastOfList<Encounter>(cj_);
				var cl_ = FHIRHelpers_4_3_000.ToInterval(ck_?.Period);
				var cm_ = context.Operators.Start(cl_);
				var co_ = context.Operators.RetrieveByValueSet<Encounter>(av_, null);
				bool? cp_(Encounter LastObs)
				{
					var qj_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
					var qk_ = context.Operators.Equal(qj_, "finished");
					var ql_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
					var qm_ = context.Operators.End(ql_);
					var qn_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var qo_ = context.Operators.Start(qn_);
					var qp_ = context.Operators.Quantity(1m, "hour");
					var qq_ = context.Operators.Subtract(qo_, qp_);
					var qs_ = context.Operators.Start(qn_);
					var qt_ = context.Operators.Interval(qq_, qs_, true, true);
					var qu_ = context.Operators.ElementInInterval<CqlDateTime>(qm_, qt_, null);
					var qw_ = context.Operators.Start(qn_);
					var qx_ = context.Operators.Not((bool?)(qw_ is null));
					var qy_ = context.Operators.And(qu_, qx_);
					var qz_ = context.Operators.And(qk_, qy_);

					return qz_;
				};
				var cq_ = context.Operators.WhereOrNull<Encounter>(co_, cp_);
				object cr_(Encounter @this)
				{
					var ra_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var rb_ = context.Operators.End(ra_);

					return rb_;
				};
				var cs_ = context.Operators.ListSortBy<Encounter>(cq_, cr_, System.ComponentModel.ListSortDirection.Ascending);
				var ct_ = context.Operators.LastOfList<Encounter>(cs_);
				var cu_ = FHIRHelpers_4_3_000.ToInterval(ct_?.Period);
				var cv_ = context.Operators.Start(cu_);
				var cx_ = context.Operators.Start(be_);
				var cy_ = context.Operators.Not((bool?)((cm_ ?? (cv_ ?? cx_)) is null));
				var cz_ = context.Operators.And(cd_, cy_);

				return cz_;
			};
			var h_ = context.Operators.WhereOrNull<Encounter>(f_, g_);
			object i_(Encounter @this)
			{
				var rc_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
				var rd_ = context.Operators.End(rc_);

				return rd_;
			};
			var j_ = context.Operators.ListSortBy<Encounter>(h_, i_, System.ComponentModel.ListSortDirection.Ascending);
			var k_ = context.Operators.LastOfList<Encounter>(j_);
			var l_ = FHIRHelpers_4_3_000.ToInterval(k_?.Period);
			var m_ = context.Operators.Start(l_);
			var n_ = this.Emergency_Department_Visit();
			var o_ = context.Operators.RetrieveByValueSet<Encounter>(n_, null);
			bool? p_(Encounter LastED)
			{
				var re_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastED?.StatusElement?.Value);
				var rf_ = context.Operators.Equal(re_, "finished");
				var rg_ = FHIRHelpers_4_3_000.ToInterval(LastED?.Period);
				var rh_ = context.Operators.End(rg_);
				var ri_ = this.Observation_Services();
				var rj_ = context.Operators.RetrieveByValueSet<Encounter>(ri_, null);
				bool? rk_(Encounter LastObs)
				{
					var sw_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
					var sx_ = context.Operators.Equal(sw_, "finished");
					var sy_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
					var sz_ = context.Operators.End(sy_);
					var ta_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var tb_ = context.Operators.Start(ta_);
					var tc_ = context.Operators.Quantity(1m, "hour");
					var td_ = context.Operators.Subtract(tb_, tc_);
					var tf_ = context.Operators.Start(ta_);
					var tg_ = context.Operators.Interval(td_, tf_, true, true);
					var th_ = context.Operators.ElementInInterval<CqlDateTime>(sz_, tg_, null);
					var tj_ = context.Operators.Start(ta_);
					var tk_ = context.Operators.Not((bool?)(tj_ is null));
					var tl_ = context.Operators.And(th_, tk_);
					var tm_ = context.Operators.And(sx_, tl_);

					return tm_;
				};
				var rl_ = context.Operators.WhereOrNull<Encounter>(rj_, rk_);
				object rm_(Encounter @this)
				{
					var tn_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var to_ = context.Operators.End(tn_);

					return to_;
				};
				var rn_ = context.Operators.ListSortBy<Encounter>(rl_, rm_, System.ComponentModel.ListSortDirection.Ascending);
				var ro_ = context.Operators.LastOfList<Encounter>(rn_);
				var rp_ = FHIRHelpers_4_3_000.ToInterval(ro_?.Period);
				var rq_ = context.Operators.Start(rp_);
				var rr_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
				var rs_ = context.Operators.Start(rr_);
				var rt_ = context.Operators.Quantity(1m, "hour");
				var ru_ = context.Operators.Subtract((rq_ ?? rs_), rt_);
				var rw_ = context.Operators.RetrieveByValueSet<Encounter>(ri_, null);
				bool? rx_(Encounter LastObs)
				{
					var tp_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
					var tq_ = context.Operators.Equal(tp_, "finished");
					var tr_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
					var ts_ = context.Operators.End(tr_);
					var tt_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var tu_ = context.Operators.Start(tt_);
					var tv_ = context.Operators.Quantity(1m, "hour");
					var tw_ = context.Operators.Subtract(tu_, tv_);
					var ty_ = context.Operators.Start(tt_);
					var tz_ = context.Operators.Interval(tw_, ty_, true, true);
					var ua_ = context.Operators.ElementInInterval<CqlDateTime>(ts_, tz_, null);
					var uc_ = context.Operators.Start(tt_);
					var ud_ = context.Operators.Not((bool?)(uc_ is null));
					var ue_ = context.Operators.And(ua_, ud_);
					var uf_ = context.Operators.And(tq_, ue_);

					return uf_;
				};
				var ry_ = context.Operators.WhereOrNull<Encounter>(rw_, rx_);
				object rz_(Encounter @this)
				{
					var ug_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var uh_ = context.Operators.End(ug_);

					return uh_;
				};
				var sa_ = context.Operators.ListSortBy<Encounter>(ry_, rz_, System.ComponentModel.ListSortDirection.Ascending);
				var sb_ = context.Operators.LastOfList<Encounter>(sa_);
				var sc_ = FHIRHelpers_4_3_000.ToInterval(sb_?.Period);
				var sd_ = context.Operators.Start(sc_);
				var sf_ = context.Operators.Start(rr_);
				var sg_ = context.Operators.Interval(ru_, (sd_ ?? sf_), true, true);
				var sh_ = context.Operators.ElementInInterval<CqlDateTime>(rh_, sg_, null);
				var sj_ = context.Operators.RetrieveByValueSet<Encounter>(ri_, null);
				bool? sk_(Encounter LastObs)
				{
					var ui_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
					var uj_ = context.Operators.Equal(ui_, "finished");
					var uk_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
					var ul_ = context.Operators.End(uk_);
					var um_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var un_ = context.Operators.Start(um_);
					var uo_ = context.Operators.Quantity(1m, "hour");
					var up_ = context.Operators.Subtract(un_, uo_);
					var ur_ = context.Operators.Start(um_);
					var us_ = context.Operators.Interval(up_, ur_, true, true);
					var ut_ = context.Operators.ElementInInterval<CqlDateTime>(ul_, us_, null);
					var uv_ = context.Operators.Start(um_);
					var uw_ = context.Operators.Not((bool?)(uv_ is null));
					var ux_ = context.Operators.And(ut_, uw_);
					var uy_ = context.Operators.And(uj_, ux_);

					return uy_;
				};
				var sl_ = context.Operators.WhereOrNull<Encounter>(sj_, sk_);
				object sm_(Encounter @this)
				{
					var uz_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var va_ = context.Operators.End(uz_);

					return va_;
				};
				var sn_ = context.Operators.ListSortBy<Encounter>(sl_, sm_, System.ComponentModel.ListSortDirection.Ascending);
				var so_ = context.Operators.LastOfList<Encounter>(sn_);
				var sp_ = FHIRHelpers_4_3_000.ToInterval(so_?.Period);
				var sq_ = context.Operators.Start(sp_);
				var ss_ = context.Operators.Start(rr_);
				var st_ = context.Operators.Not((bool?)((sq_ ?? ss_) is null));
				var su_ = context.Operators.And(sh_, st_);
				var sv_ = context.Operators.And(rf_, su_);

				return sv_;
			};
			var q_ = context.Operators.WhereOrNull<Encounter>(o_, p_);
			object r_(Encounter @this)
			{
				var vb_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
				var vc_ = context.Operators.End(vb_);

				return vc_;
			};
			var s_ = context.Operators.ListSortBy<Encounter>(q_, r_, System.ComponentModel.ListSortDirection.Ascending);
			var t_ = context.Operators.LastOfList<Encounter>(s_);
			var u_ = FHIRHelpers_4_3_000.ToInterval(t_?.Period);
			var v_ = context.Operators.Start(u_);
			var w_ = this.Observation_Services();
			var x_ = context.Operators.RetrieveByValueSet<Encounter>(w_, null);
			bool? y_(Encounter LastObs)
			{
				var vd_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
				var ve_ = context.Operators.Equal(vd_, "finished");
				var vf_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
				var vg_ = context.Operators.End(vf_);
				var vh_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
				var vi_ = context.Operators.Start(vh_);
				var vj_ = context.Operators.Quantity(1m, "hour");
				var vk_ = context.Operators.Subtract(vi_, vj_);
				var vm_ = context.Operators.Start(vh_);
				var vn_ = context.Operators.Interval(vk_, vm_, true, true);
				var vo_ = context.Operators.ElementInInterval<CqlDateTime>(vg_, vn_, null);
				var vq_ = context.Operators.Start(vh_);
				var vr_ = context.Operators.Not((bool?)(vq_ is null));
				var vs_ = context.Operators.And(vo_, vr_);
				var vt_ = context.Operators.And(ve_, vs_);

				return vt_;
			};
			var z_ = context.Operators.WhereOrNull<Encounter>(x_, y_);
			object aa_(Encounter @this)
			{
				var vu_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
				var vv_ = context.Operators.End(vu_);

				return vv_;
			};
			var ab_ = context.Operators.ListSortBy<Encounter>(z_, aa_, System.ComponentModel.ListSortDirection.Ascending);
			var ac_ = context.Operators.LastOfList<Encounter>(ab_);
			var ad_ = FHIRHelpers_4_3_000.ToInterval(ac_?.Period);
			var ae_ = context.Operators.Start(ad_);
			var af_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
			var ag_ = context.Operators.Start(af_);
			var ai_ = context.Operators.End(af_);
			var aj_ = context.Operators.Interval((m_ ?? (v_ ?? (ae_ ?? ag_))), ai_, true, true);

			return aj_;
		};
		var c_ = context.Operators.SelectOrNull<Encounter, CqlInterval<CqlDateTime>>(a_, b_);
		var d_ = context.Operators.SingleOrNull<CqlInterval<CqlDateTime>>(c_);

		return d_;
	}

    [CqlDeclaration("HospitalizationWithObservation")]
    [CqlTag("description", "Hospitalization with Observation returns the total interval from the start of any immediately prior emergency department visit through the observation visit to the discharge of the given encounter")]
    [CqlTag("deprecated", "This function is deprecated. Use the fluent function `hospitalizationWithObservation()` instead.")]
	public CqlInterval<CqlDateTime> HospitalizationWithObservation(Encounter TheEncounter)
	{
		var a_ = new Encounter[]
		{
			TheEncounter,
		};
		CqlInterval<CqlDateTime> b_(Encounter Visit)
		{
			var e_ = this.Emergency_Department_Visit();
			var f_ = context.Operators.RetrieveByValueSet<Encounter>(e_, null);
			bool? g_(Encounter LastED)
			{
				var ab_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastED?.StatusElement?.Value);
				var ac_ = context.Operators.Equal(ab_, "finished");
				var ad_ = FHIRHelpers_4_3_000.ToInterval(LastED?.Period);
				var ae_ = context.Operators.End(ad_);
				var af_ = this.Observation_Services();
				var ag_ = context.Operators.RetrieveByValueSet<Encounter>(af_, null);
				bool? ah_(Encounter LastObs)
				{
					var bt_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
					var bu_ = context.Operators.Equal(bt_, "finished");
					var bv_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
					var bw_ = context.Operators.End(bv_);
					var bx_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var by_ = context.Operators.Start(bx_);
					var bz_ = context.Operators.Quantity(1m, "hour");
					var ca_ = context.Operators.Subtract(by_, bz_);
					var cc_ = context.Operators.Start(bx_);
					var cd_ = context.Operators.Interval(ca_, cc_, true, true);
					var ce_ = context.Operators.ElementInInterval<CqlDateTime>(bw_, cd_, null);
					var cg_ = context.Operators.Start(bx_);
					var ch_ = context.Operators.Not((bool?)(cg_ is null));
					var ci_ = context.Operators.And(ce_, ch_);
					var cj_ = context.Operators.And(bu_, ci_);

					return cj_;
				};
				var ai_ = context.Operators.WhereOrNull<Encounter>(ag_, ah_);
				object aj_(Encounter @this)
				{
					var ck_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var cl_ = context.Operators.End(ck_);

					return cl_;
				};
				var ak_ = context.Operators.ListSortBy<Encounter>(ai_, aj_, System.ComponentModel.ListSortDirection.Ascending);
				var al_ = context.Operators.LastOfList<Encounter>(ak_);
				var am_ = FHIRHelpers_4_3_000.ToInterval(al_?.Period);
				var an_ = context.Operators.Start(am_);
				var ao_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
				var ap_ = context.Operators.Start(ao_);
				var aq_ = context.Operators.Quantity(1m, "hour");
				var ar_ = context.Operators.Subtract((an_ ?? ap_), aq_);
				var at_ = context.Operators.RetrieveByValueSet<Encounter>(af_, null);
				bool? au_(Encounter LastObs)
				{
					var cm_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
					var cn_ = context.Operators.Equal(cm_, "finished");
					var co_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
					var cp_ = context.Operators.End(co_);
					var cq_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var cr_ = context.Operators.Start(cq_);
					var cs_ = context.Operators.Quantity(1m, "hour");
					var ct_ = context.Operators.Subtract(cr_, cs_);
					var cv_ = context.Operators.Start(cq_);
					var cw_ = context.Operators.Interval(ct_, cv_, true, true);
					var cx_ = context.Operators.ElementInInterval<CqlDateTime>(cp_, cw_, null);
					var cz_ = context.Operators.Start(cq_);
					var da_ = context.Operators.Not((bool?)(cz_ is null));
					var db_ = context.Operators.And(cx_, da_);
					var dc_ = context.Operators.And(cn_, db_);

					return dc_;
				};
				var av_ = context.Operators.WhereOrNull<Encounter>(at_, au_);
				object aw_(Encounter @this)
				{
					var dd_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var de_ = context.Operators.End(dd_);

					return de_;
				};
				var ax_ = context.Operators.ListSortBy<Encounter>(av_, aw_, System.ComponentModel.ListSortDirection.Ascending);
				var ay_ = context.Operators.LastOfList<Encounter>(ax_);
				var az_ = FHIRHelpers_4_3_000.ToInterval(ay_?.Period);
				var ba_ = context.Operators.Start(az_);
				var bc_ = context.Operators.Start(ao_);
				var bd_ = context.Operators.Interval(ar_, (ba_ ?? bc_), true, true);
				var be_ = context.Operators.ElementInInterval<CqlDateTime>(ae_, bd_, null);
				var bg_ = context.Operators.RetrieveByValueSet<Encounter>(af_, null);
				bool? bh_(Encounter LastObs)
				{
					var df_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
					var dg_ = context.Operators.Equal(df_, "finished");
					var dh_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
					var di_ = context.Operators.End(dh_);
					var dj_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var dk_ = context.Operators.Start(dj_);
					var dl_ = context.Operators.Quantity(1m, "hour");
					var dm_ = context.Operators.Subtract(dk_, dl_);
					var do_ = context.Operators.Start(dj_);
					var dp_ = context.Operators.Interval(dm_, do_, true, true);
					var dq_ = context.Operators.ElementInInterval<CqlDateTime>(di_, dp_, null);
					var ds_ = context.Operators.Start(dj_);
					var dt_ = context.Operators.Not((bool?)(ds_ is null));
					var du_ = context.Operators.And(dq_, dt_);
					var dv_ = context.Operators.And(dg_, du_);

					return dv_;
				};
				var bi_ = context.Operators.WhereOrNull<Encounter>(bg_, bh_);
				object bj_(Encounter @this)
				{
					var dw_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var dx_ = context.Operators.End(dw_);

					return dx_;
				};
				var bk_ = context.Operators.ListSortBy<Encounter>(bi_, bj_, System.ComponentModel.ListSortDirection.Ascending);
				var bl_ = context.Operators.LastOfList<Encounter>(bk_);
				var bm_ = FHIRHelpers_4_3_000.ToInterval(bl_?.Period);
				var bn_ = context.Operators.Start(bm_);
				var bp_ = context.Operators.Start(ao_);
				var bq_ = context.Operators.Not((bool?)((bn_ ?? bp_) is null));
				var br_ = context.Operators.And(be_, bq_);
				var bs_ = context.Operators.And(ac_, br_);

				return bs_;
			};
			var h_ = context.Operators.WhereOrNull<Encounter>(f_, g_);
			object i_(Encounter @this)
			{
				var dy_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
				var dz_ = context.Operators.End(dy_);

				return dz_;
			};
			var j_ = context.Operators.ListSortBy<Encounter>(h_, i_, System.ComponentModel.ListSortDirection.Ascending);
			var k_ = context.Operators.LastOfList<Encounter>(j_);
			var l_ = FHIRHelpers_4_3_000.ToInterval(k_?.Period);
			var m_ = context.Operators.Start(l_);
			var n_ = this.Observation_Services();
			var o_ = context.Operators.RetrieveByValueSet<Encounter>(n_, null);
			bool? p_(Encounter LastObs)
			{
				var ea_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
				var eb_ = context.Operators.Equal(ea_, "finished");
				var ec_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
				var ed_ = context.Operators.End(ec_);
				var ee_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
				var ef_ = context.Operators.Start(ee_);
				var eg_ = context.Operators.Quantity(1m, "hour");
				var eh_ = context.Operators.Subtract(ef_, eg_);
				var ej_ = context.Operators.Start(ee_);
				var ek_ = context.Operators.Interval(eh_, ej_, true, true);
				var el_ = context.Operators.ElementInInterval<CqlDateTime>(ed_, ek_, null);
				var en_ = context.Operators.Start(ee_);
				var eo_ = context.Operators.Not((bool?)(en_ is null));
				var ep_ = context.Operators.And(el_, eo_);
				var eq_ = context.Operators.And(eb_, ep_);

				return eq_;
			};
			var q_ = context.Operators.WhereOrNull<Encounter>(o_, p_);
			object r_(Encounter @this)
			{
				var er_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
				var es_ = context.Operators.End(er_);

				return es_;
			};
			var s_ = context.Operators.ListSortBy<Encounter>(q_, r_, System.ComponentModel.ListSortDirection.Ascending);
			var t_ = context.Operators.LastOfList<Encounter>(s_);
			var u_ = FHIRHelpers_4_3_000.ToInterval(t_?.Period);
			var v_ = context.Operators.Start(u_);
			var w_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
			var x_ = context.Operators.Start(w_);
			var z_ = context.Operators.End(w_);
			var aa_ = context.Operators.Interval((m_ ?? (v_ ?? x_)), z_, true, true);

			return aa_;
		};
		var c_ = context.Operators.SelectOrNull<Encounter, CqlInterval<CqlDateTime>>(a_, b_);
		var d_ = context.Operators.SingleOrNull<CqlInterval<CqlDateTime>>(c_);

		return d_;
	}

    [CqlDeclaration("hospitalizationWithObservation")]
    [CqlTag("description", "Hospitalization with Observation returns the total interval from the start of any immediately prior emergency department visit through the observation visit to the discharge of the given encounter")]
	public CqlInterval<CqlDateTime> hospitalizationWithObservation(Encounter TheEncounter)
	{
		var a_ = new Encounter[]
		{
			TheEncounter,
		};
		CqlInterval<CqlDateTime> b_(Encounter Visit)
		{
			var e_ = this.Emergency_Department_Visit();
			var f_ = context.Operators.RetrieveByValueSet<Encounter>(e_, null);
			bool? g_(Encounter LastED)
			{
				var ab_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastED?.StatusElement?.Value);
				var ac_ = context.Operators.Equal(ab_, "finished");
				var ad_ = FHIRHelpers_4_3_000.ToInterval(LastED?.Period);
				var ae_ = context.Operators.End(ad_);
				var af_ = this.Observation_Services();
				var ag_ = context.Operators.RetrieveByValueSet<Encounter>(af_, null);
				bool? ah_(Encounter LastObs)
				{
					var bt_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
					var bu_ = context.Operators.Equal(bt_, "finished");
					var bv_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
					var bw_ = context.Operators.End(bv_);
					var bx_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var by_ = context.Operators.Start(bx_);
					var bz_ = context.Operators.Quantity(1m, "hour");
					var ca_ = context.Operators.Subtract(by_, bz_);
					var cc_ = context.Operators.Start(bx_);
					var cd_ = context.Operators.Interval(ca_, cc_, true, true);
					var ce_ = context.Operators.ElementInInterval<CqlDateTime>(bw_, cd_, null);
					var cg_ = context.Operators.Start(bx_);
					var ch_ = context.Operators.Not((bool?)(cg_ is null));
					var ci_ = context.Operators.And(ce_, ch_);
					var cj_ = context.Operators.And(bu_, ci_);

					return cj_;
				};
				var ai_ = context.Operators.WhereOrNull<Encounter>(ag_, ah_);
				object aj_(Encounter @this)
				{
					var ck_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var cl_ = context.Operators.End(ck_);

					return cl_;
				};
				var ak_ = context.Operators.ListSortBy<Encounter>(ai_, aj_, System.ComponentModel.ListSortDirection.Ascending);
				var al_ = context.Operators.LastOfList<Encounter>(ak_);
				var am_ = FHIRHelpers_4_3_000.ToInterval(al_?.Period);
				var an_ = context.Operators.Start(am_);
				var ao_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
				var ap_ = context.Operators.Start(ao_);
				var aq_ = context.Operators.Quantity(1m, "hour");
				var ar_ = context.Operators.Subtract((an_ ?? ap_), aq_);
				var at_ = context.Operators.RetrieveByValueSet<Encounter>(af_, null);
				bool? au_(Encounter LastObs)
				{
					var cm_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
					var cn_ = context.Operators.Equal(cm_, "finished");
					var co_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
					var cp_ = context.Operators.End(co_);
					var cq_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var cr_ = context.Operators.Start(cq_);
					var cs_ = context.Operators.Quantity(1m, "hour");
					var ct_ = context.Operators.Subtract(cr_, cs_);
					var cv_ = context.Operators.Start(cq_);
					var cw_ = context.Operators.Interval(ct_, cv_, true, true);
					var cx_ = context.Operators.ElementInInterval<CqlDateTime>(cp_, cw_, null);
					var cz_ = context.Operators.Start(cq_);
					var da_ = context.Operators.Not((bool?)(cz_ is null));
					var db_ = context.Operators.And(cx_, da_);
					var dc_ = context.Operators.And(cn_, db_);

					return dc_;
				};
				var av_ = context.Operators.WhereOrNull<Encounter>(at_, au_);
				object aw_(Encounter @this)
				{
					var dd_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var de_ = context.Operators.End(dd_);

					return de_;
				};
				var ax_ = context.Operators.ListSortBy<Encounter>(av_, aw_, System.ComponentModel.ListSortDirection.Ascending);
				var ay_ = context.Operators.LastOfList<Encounter>(ax_);
				var az_ = FHIRHelpers_4_3_000.ToInterval(ay_?.Period);
				var ba_ = context.Operators.Start(az_);
				var bc_ = context.Operators.Start(ao_);
				var bd_ = context.Operators.Interval(ar_, (ba_ ?? bc_), true, true);
				var be_ = context.Operators.ElementInInterval<CqlDateTime>(ae_, bd_, null);
				var bg_ = context.Operators.RetrieveByValueSet<Encounter>(af_, null);
				bool? bh_(Encounter LastObs)
				{
					var df_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
					var dg_ = context.Operators.Equal(df_, "finished");
					var dh_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
					var di_ = context.Operators.End(dh_);
					var dj_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
					var dk_ = context.Operators.Start(dj_);
					var dl_ = context.Operators.Quantity(1m, "hour");
					var dm_ = context.Operators.Subtract(dk_, dl_);
					var do_ = context.Operators.Start(dj_);
					var dp_ = context.Operators.Interval(dm_, do_, true, true);
					var dq_ = context.Operators.ElementInInterval<CqlDateTime>(di_, dp_, null);
					var ds_ = context.Operators.Start(dj_);
					var dt_ = context.Operators.Not((bool?)(ds_ is null));
					var du_ = context.Operators.And(dq_, dt_);
					var dv_ = context.Operators.And(dg_, du_);

					return dv_;
				};
				var bi_ = context.Operators.WhereOrNull<Encounter>(bg_, bh_);
				object bj_(Encounter @this)
				{
					var dw_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
					var dx_ = context.Operators.End(dw_);

					return dx_;
				};
				var bk_ = context.Operators.ListSortBy<Encounter>(bi_, bj_, System.ComponentModel.ListSortDirection.Ascending);
				var bl_ = context.Operators.LastOfList<Encounter>(bk_);
				var bm_ = FHIRHelpers_4_3_000.ToInterval(bl_?.Period);
				var bn_ = context.Operators.Start(bm_);
				var bp_ = context.Operators.Start(ao_);
				var bq_ = context.Operators.Not((bool?)((bn_ ?? bp_) is null));
				var br_ = context.Operators.And(be_, bq_);
				var bs_ = context.Operators.And(ac_, br_);

				return bs_;
			};
			var h_ = context.Operators.WhereOrNull<Encounter>(f_, g_);
			object i_(Encounter @this)
			{
				var dy_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
				var dz_ = context.Operators.End(dy_);

				return dz_;
			};
			var j_ = context.Operators.ListSortBy<Encounter>(h_, i_, System.ComponentModel.ListSortDirection.Ascending);
			var k_ = context.Operators.LastOfList<Encounter>(j_);
			var l_ = FHIRHelpers_4_3_000.ToInterval(k_?.Period);
			var m_ = context.Operators.Start(l_);
			var n_ = this.Observation_Services();
			var o_ = context.Operators.RetrieveByValueSet<Encounter>(n_, null);
			bool? p_(Encounter LastObs)
			{
				var ea_ = context.Operators.Convert<Code<Encounter.EncounterStatus>>(LastObs?.StatusElement?.Value);
				var eb_ = context.Operators.Equal(ea_, "finished");
				var ec_ = FHIRHelpers_4_3_000.ToInterval(LastObs?.Period);
				var ed_ = context.Operators.End(ec_);
				var ee_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
				var ef_ = context.Operators.Start(ee_);
				var eg_ = context.Operators.Quantity(1m, "hour");
				var eh_ = context.Operators.Subtract(ef_, eg_);
				var ej_ = context.Operators.Start(ee_);
				var ek_ = context.Operators.Interval(eh_, ej_, true, true);
				var el_ = context.Operators.ElementInInterval<CqlDateTime>(ed_, ek_, null);
				var en_ = context.Operators.Start(ee_);
				var eo_ = context.Operators.Not((bool?)(en_ is null));
				var ep_ = context.Operators.And(el_, eo_);
				var eq_ = context.Operators.And(eb_, ep_);

				return eq_;
			};
			var q_ = context.Operators.WhereOrNull<Encounter>(o_, p_);
			object r_(Encounter @this)
			{
				var er_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
				var es_ = context.Operators.End(er_);

				return es_;
			};
			var s_ = context.Operators.ListSortBy<Encounter>(q_, r_, System.ComponentModel.ListSortDirection.Ascending);
			var t_ = context.Operators.LastOfList<Encounter>(s_);
			var u_ = FHIRHelpers_4_3_000.ToInterval(t_?.Period);
			var v_ = context.Operators.Start(u_);
			var w_ = FHIRHelpers_4_3_000.ToInterval(Visit?.Period);
			var x_ = context.Operators.Start(w_);
			var z_ = context.Operators.End(w_);
			var aa_ = context.Operators.Interval((m_ ?? (v_ ?? x_)), z_, true, true);

			return aa_;
		};
		var c_ = context.Operators.SelectOrNull<Encounter, CqlInterval<CqlDateTime>>(a_, b_);
		var d_ = context.Operators.SingleOrNull<CqlInterval<CqlDateTime>>(c_);

		return d_;
	}

    [CqlDeclaration("HospitalizationWithObservationLengthofStay")]
    [CqlTag("description", "Hospitalization with Observation Length of Stay returns the length in days from the start of any immediately prior emergency department visit through the observation visit to the discharge of the given encounter")]
    [CqlTag("deprecated", "This function is deprecated. Use the fluent function `hospitalizationWithObservationLengthofStay()` instead.")]
	public int? HospitalizationWithObservationLengthofStay(Encounter TheEncounter)
	{
		var a_ = this.HospitalizationWithObservation(TheEncounter);
		var b_ = this.LengthInDays(a_);

		return b_;
	}

    [CqlDeclaration("hospitalizationWithObservationLengthofStay")]
    [CqlTag("description", "Hospitalization with Observation Length of Stay returns the length in days from the start of any immediately prior emergency department visit through the observation visit to the discharge of the given encounter")]
	public int? hospitalizationWithObservationLengthofStay(Encounter TheEncounter)
	{
		var a_ = this.hospitalizationWithObservation(TheEncounter);
		var b_ = this.lengthInDays(a_);

		return b_;
	}

    [CqlDeclaration("FirstInpatientIntensiveCareUnit")]
    [CqlTag("description", "First Inpatient Intensive Care Unit returns the first intensive care unit for the given encounter, without considering any immediately prior emergency department visit.")]
    [CqlTag("deprecated", "This function is deprecated. Use the fluent function `firstInpatientIntensiveCareUnit()` instead.")]
	public Encounter.LocationComponent FirstInpatientIntensiveCareUnit(Encounter Encounter)
	{
		bool? a_(Encounter.LocationComponent HospitalLocation)
		{
			var f_ = this.GetLocation(HospitalLocation?.Location);
			CqlConcept g_(CodeableConcept @this)
			{
				var o_ = FHIRHelpers_4_3_000.ToConcept(@this);

				return o_;
			};
			var h_ = context.Operators.SelectOrNull<CodeableConcept, CqlConcept>(f_?.Type, g_);
			var i_ = this.Intensive_Care_Unit();
			var j_ = context.Operators.ConceptsInValueSet(h_, i_);
			var k_ = FHIRHelpers_4_3_000.ToInterval(Encounter?.Period);
			var l_ = FHIRHelpers_4_3_000.ToInterval(HospitalLocation?.Period);
			var m_ = context.Operators.IntervalIncludesInterval<CqlDateTime>(k_, l_, null);
			var n_ = context.Operators.And(j_, m_);

			return n_;
		};
		var b_ = context.Operators.WhereOrNull<Encounter.LocationComponent>((Encounter?.Location as IEnumerable<Encounter.LocationComponent>), a_);
		object c_(Encounter.LocationComponent @this)
		{
			var p_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
			var q_ = context.Operators.Start(p_);

			return q_;
		};
		var d_ = context.Operators.ListSortBy<Encounter.LocationComponent>(b_, c_, System.ComponentModel.ListSortDirection.Ascending);
		var e_ = context.Operators.FirstOfList<Encounter.LocationComponent>(d_);

		return e_;
	}

    [CqlDeclaration("firstInpatientIntensiveCareUnit")]
    [CqlTag("description", "First Inpatient Intensive Care Unit returns the first intensive care unit for the given encounter, without considering any immediately prior emergency department visit.")]
	public Encounter.LocationComponent firstInpatientIntensiveCareUnit(Encounter Encounter)
	{
		bool? a_(Encounter.LocationComponent HospitalLocation)
		{
			var f_ = this.GetLocation(HospitalLocation?.Location);
			CqlConcept g_(CodeableConcept @this)
			{
				var o_ = FHIRHelpers_4_3_000.ToConcept(@this);

				return o_;
			};
			var h_ = context.Operators.SelectOrNull<CodeableConcept, CqlConcept>(f_?.Type, g_);
			var i_ = this.Intensive_Care_Unit();
			var j_ = context.Operators.ConceptsInValueSet(h_, i_);
			var k_ = FHIRHelpers_4_3_000.ToInterval(Encounter?.Period);
			var l_ = FHIRHelpers_4_3_000.ToInterval(HospitalLocation?.Period);
			var m_ = context.Operators.IntervalIncludesInterval<CqlDateTime>(k_, l_, null);
			var n_ = context.Operators.And(j_, m_);

			return n_;
		};
		var b_ = context.Operators.WhereOrNull<Encounter.LocationComponent>((Encounter?.Location as IEnumerable<Encounter.LocationComponent>), a_);
		object c_(Encounter.LocationComponent @this)
		{
			var p_ = FHIRHelpers_4_3_000.ToInterval(@this?.Period);
			var q_ = context.Operators.Start(p_);

			return q_;
		};
		var d_ = context.Operators.ListSortBy<Encounter.LocationComponent>(b_, c_, System.ComponentModel.ListSortDirection.Ascending);
		var e_ = context.Operators.FirstOfList<Encounter.LocationComponent>(d_);

		return e_;
	}

    [CqlDeclaration("EncounterDiagnosis")]
    [CqlTag("description", "Returns the Condition resource referenced by the `diagnosis.condition` element of the Encounter")]
    [CqlTag("deprecated", "This function is deprecated. Use the fluent function `encounterDiagnosis()` instead.")]
	public IEnumerable<Condition> EncounterDiagnosis(Encounter Encounter)
	{
		Condition a_(Encounter.DiagnosisComponent D)
		{
			var c_ = context.Operators.RetrieveByValueSet<Condition>(null, null);
			bool? d_(Condition C)
			{
				var g_ = QICoreCommon_2_0_000.getId(D?.Condition?.ReferenceElement?.Value);
				var h_ = context.Operators.Equal(C?.IdElement?.Value, g_);

				return h_;
			};
			var e_ = context.Operators.WhereOrNull<Condition>(c_, d_);
			var f_ = context.Operators.SingleOrNull<Condition>(e_);

			return f_;
		};
		var b_ = context.Operators.SelectOrNull<Encounter.DiagnosisComponent, Condition>((Encounter?.Diagnosis as IEnumerable<Encounter.DiagnosisComponent>), a_);

		return b_;
	}

    [CqlDeclaration("encounterDiagnosis")]
    [CqlTag("description", "Returns the Condition resources referenced by the diagnosis element of the Encounter")]
	public IEnumerable<Condition> encounterDiagnosis(Encounter Encounter)
	{
		Condition a_(Encounter.DiagnosisComponent D)
		{
			var c_ = context.Operators.RetrieveByValueSet<Condition>(null, null);
			bool? d_(Condition C)
			{
				var g_ = QICoreCommon_2_0_000.getId(D?.Condition?.ReferenceElement?.Value);
				var h_ = context.Operators.Equal(C?.IdElement?.Value, g_);

				return h_;
			};
			var e_ = context.Operators.WhereOrNull<Condition>(c_, d_);
			var f_ = context.Operators.SingleOrNull<Condition>(e_);

			return f_;
		};
		var b_ = context.Operators.SelectOrNull<Encounter.DiagnosisComponent, Condition>((Encounter?.Diagnosis as IEnumerable<Encounter.DiagnosisComponent>), a_);

		return b_;
	}

    [CqlDeclaration("GetCondition")]
    [CqlTag("description", "Returns the Condition resource for the given reference")]
    [CqlTag("deprecated", "This function is deprecated. Use the fluent function `getCondition()` instead")]
	public Condition GetCondition(ResourceReference reference)
	{
		var a_ = context.Operators.RetrieveByValueSet<Condition>(null, null);
		bool? b_(Condition C)
		{
			var e_ = QICoreCommon_2_0_000.getId(reference?.ReferenceElement?.Value);
			var f_ = context.Operators.Equal(C?.IdElement?.Value, e_);

			return f_;
		};
		var c_ = context.Operators.WhereOrNull<Condition>(a_, b_);
		var d_ = context.Operators.SingleOrNull<Condition>(c_);

		return d_;
	}

    [CqlDeclaration("getCondition")]
    [CqlTag("description", "Returns the Condition resource for the given reference")]
	public Condition getCondition(ResourceReference reference)
	{
		var a_ = context.Operators.RetrieveByValueSet<Condition>(null, null);
		bool? b_(Condition C)
		{
			var e_ = QICoreCommon_2_0_000.getId(reference?.ReferenceElement?.Value);
			var f_ = context.Operators.Equal(C?.IdElement?.Value, e_);

			return f_;
		};
		var c_ = context.Operators.WhereOrNull<Condition>(a_, b_);
		var d_ = context.Operators.SingleOrNull<Condition>(c_);

		return d_;
	}

    [CqlDeclaration("PrincipalDiagnosis")]
    [CqlTag("description", "Returns the condition that is specified as the principal diagnosis for the encounter")]
    [CqlTag("deprecated", "This function is deprecated. Use the fluent function `principalDiagnosis()` instead.")]
	public Condition PrincipalDiagnosis(Encounter Encounter)
	{
		bool? a_(Encounter.DiagnosisComponent D)
		{
			var f_ = context.Operators.Equal(D?.RankElement?.Value, (int?)1);

			return f_;
		};
		var b_ = context.Operators.WhereOrNull<Encounter.DiagnosisComponent>((Encounter?.Diagnosis as IEnumerable<Encounter.DiagnosisComponent>), a_);
		Condition c_(Encounter.DiagnosisComponent PD)
		{
			var g_ = context.Operators.RetrieveByValueSet<Condition>(null, null);
			bool? h_(Condition C)
			{
				var k_ = QICoreCommon_2_0_000.getId(PD?.Condition?.ReferenceElement?.Value);
				var l_ = context.Operators.Equal(C?.IdElement?.Value, k_);

				return l_;
			};
			var i_ = context.Operators.WhereOrNull<Condition>(g_, h_);
			var j_ = context.Operators.SingleOrNull<Condition>(i_);

			return j_;
		};
		var d_ = context.Operators.SelectOrNull<Encounter.DiagnosisComponent, Condition>(b_, c_);
		var e_ = context.Operators.SingleOrNull<Condition>(d_);

		return e_;
	}

    [CqlDeclaration("principalDiagnosis")]
    [CqlTag("description", "Returns the condition that is specified as the principal diagnosis for the encounter")]
	public Condition principalDiagnosis(Encounter Encounter)
	{
		bool? a_(Encounter.DiagnosisComponent D)
		{
			var f_ = context.Operators.Equal(D?.RankElement?.Value, (int?)1);

			return f_;
		};
		var b_ = context.Operators.WhereOrNull<Encounter.DiagnosisComponent>((Encounter?.Diagnosis as IEnumerable<Encounter.DiagnosisComponent>), a_);
		Condition c_(Encounter.DiagnosisComponent PD)
		{
			var g_ = context.Operators.RetrieveByValueSet<Condition>(null, null);
			bool? h_(Condition C)
			{
				var k_ = QICoreCommon_2_0_000.getId(PD?.Condition?.ReferenceElement?.Value);
				var l_ = context.Operators.Equal(C?.IdElement?.Value, k_);

				return l_;
			};
			var i_ = context.Operators.WhereOrNull<Condition>(g_, h_);
			var j_ = context.Operators.SingleOrNull<Condition>(i_);

			return j_;
		};
		var d_ = context.Operators.SelectOrNull<Encounter.DiagnosisComponent, Condition>(b_, c_);
		var e_ = context.Operators.SingleOrNull<Condition>(d_);

		return e_;
	}

    [CqlDeclaration("getLocation")]
    [CqlTag("description", "Returns the Location resource specified by the given reference.")]
	public Location getLocation(ResourceReference reference)
	{
		var a_ = context.Operators.RetrieveByValueSet<Location>(null, null);
		bool? b_(Location L)
		{
			var e_ = QICoreCommon_2_0_000.getId(reference?.ReferenceElement?.Value);
			var f_ = context.Operators.Equal(L?.IdElement?.Value, e_);

			return f_;
		};
		var c_ = context.Operators.WhereOrNull<Location>(a_, b_);
		var d_ = context.Operators.SingleOrNull<Location>(c_);

		return d_;
	}

    [CqlDeclaration("GetMedicationCode")]
    [CqlTag("description", "Returns the medication code for the given MedicationRequest")]
    [CqlTag("deprecated", "This function is deprecated. Use the fluent function `getMedicationCode()` instead.")]
	public CqlConcept GetMedicationCode(MedicationRequest request)
	{
		CqlConcept a_()
		{
			bool b_()
			{
				var c_ = FHIRHelpers_4_3_000.ToValue(request?.Medication);
				var d_ = c_ is CqlConcept;

				return d_;
			};
			if (b_())
			{
				var e_ = FHIRHelpers_4_3_000.ToValue(request?.Medication);

				return (e_ as CqlConcept);
			}
			else
			{
				var f_ = context.Operators.RetrieveByValueSet<Medication>(null, null);
				bool? g_(Medication M)
				{
					var k_ = FHIRHelpers_4_3_000.ToValue(request?.Medication);
					var l_ = QICoreCommon_2_0_000.getId(((k_ as ResourceReference)?.ReferenceElement)?.Value);
					var m_ = context.Operators.Equal(M?.IdElement?.Value, l_);

					return m_;
				};
				var h_ = context.Operators.WhereOrNull<Medication>(f_, g_);
				var i_ = context.Operators.SingleOrNull<Medication>(h_);
				var j_ = FHIRHelpers_4_3_000.ToConcept(i_?.Code);

				return j_;
			};
		};

		return a_();
	}

    [CqlDeclaration("getMedicationCode")]
    [CqlTag("description", "Returns the medication code for the given MedicationRequest")]
	public CqlConcept getMedicationCode(MedicationRequest request)
	{
		CqlConcept a_()
		{
			bool b_()
			{
				var c_ = FHIRHelpers_4_3_000.ToValue(request?.Medication);
				var d_ = c_ is CqlConcept;

				return d_;
			};
			if (b_())
			{
				var e_ = FHIRHelpers_4_3_000.ToValue(request?.Medication);

				return (e_ as CqlConcept);
			}
			else
			{
				var f_ = context.Operators.RetrieveByValueSet<Medication>(null, null);
				bool? g_(Medication M)
				{
					var k_ = FHIRHelpers_4_3_000.ToValue(request?.Medication);
					var l_ = QICoreCommon_2_0_000.getId(((k_ as ResourceReference)?.ReferenceElement)?.Value);
					var m_ = context.Operators.Equal(M?.IdElement?.Value, l_);

					return m_;
				};
				var h_ = context.Operators.WhereOrNull<Medication>(f_, g_);
				var i_ = context.Operators.SingleOrNull<Medication>(h_);
				var j_ = FHIRHelpers_4_3_000.ToConcept(i_?.Code);

				return j_;
			};
		};

		return a_();
	}

}"
    }
  ]
}