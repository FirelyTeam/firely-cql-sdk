{
  "resourceType": "Library",
  "id": "DocumentationofCurrentMedicationsFHIR-0.2.000",
  "url": "https://fire.ly/fhir/Library/DocumentationofCurrentMedicationsFHIR-0.2.000",
  "version": "0.2.000",
  "name": "DocumentationofCurrentMedicationsFHIR",
  "status": "active",
  "type": {
    "coding": [
      {
        "system": "http://terminology.hl7.org/CodeSystem/library-type",
        "code": "logic-library"
      }
    ]
  },
  "date": "2024-06-05T00:38:00.496Z",
  "relatedArtifact": [
    {
      "type": "depends-on",
      "resource": "FHIRHelpers-4.3.000"
    },
    {
      "type": "depends-on",
      "resource": "QICoreCommon-2.0.000"
    },
    {
      "type": "depends-on",
      "resource": "SupplementalDataElements-3.4.000"
    }
  ],
  "parameter": [
    {
      "name": "Measurement Period",
      "use": "in",
      "min": 0,
      "max": "1",
      "type": "Period"
    },
    {
      "name": "SDE Ethnicity",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "Basic"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Basic"
        }
      ],
      "name": "SDE Payer",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "name": "SDE Race",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "Basic"
    },
    {
      "name": "SDE Sex",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "Coding"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Encounter"
        }
      ],
      "name": "Qualifying Encounter during day of Measurement Period",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Encounter"
        }
      ],
      "name": "Initial Population",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Encounter"
        }
      ],
      "name": "Denominator",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Encounter"
        }
      ],
      "name": "Numerator",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "extension": [
        {
          "url": "https://ncqa.org/fhir/StructureDefinition/ext-parameter.list-element-type",
          "valueCode": "Encounter"
        }
      ],
      "name": "Denominator Exceptions",
      "use": "out",
      "min": 0,
      "max": "1",
      "type": "List"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.600.1.1834",
      "use": "in",
      "type": "ValueSet"
    },
    {
      "name": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.1007",
      "use": "in",
      "type": "ValueSet"
    }
  ],
  "content": [
    {
      "id": "DocumentationofCurrentMedicationsFHIR-0.2.000+elm",
      "contentType": "application/elm+json",
      "data": ""
    },
    {
      "id": "DocumentationofCurrentMedicationsFHIR-0.2.000+cql",
      "contentType": "text/cql",
      "data": "bGlicmFyeSBEb2N1bWVudGF0aW9ub2ZDdXJyZW50TWVkaWNhdGlvbnNGSElSIHZlcnNpb24gJzAuMi4wMDAnDQoNCnVzaW5nIFFJQ29yZSB2ZXJzaW9uICc0LjEuMScNCg0KaW5jbHVkZSBGSElSSGVscGVycyB2ZXJzaW9uICc0LjMuMDAwJyBjYWxsZWQgRkhJUkhlbHBlcnMNCmluY2x1ZGUgUUlDb3JlQ29tbW9uIHZlcnNpb24gJzIuMC4wMDAnIGNhbGxlZCBRSUNvcmVDb21tb24NCmluY2x1ZGUgU3VwcGxlbWVudGFsRGF0YUVsZW1lbnRzIHZlcnNpb24gJzMuNC4wMDAnIGNhbGxlZCBTREUNCg0KY29kZXN5c3RlbSAiU05PTUVEQ1QiOiAnaHR0cDovL3Nub21lZC5pbmZvL3NjdCcNCg0KdmFsdWVzZXQgIkVuY291bnRlciB0byBEb2N1bWVudCBNZWRpY2F0aW9ucyI6ICdodHRwOi8vY3RzLm5sbS5uaWguZ292L2ZoaXIvVmFsdWVTZXQvMi4xNi44NDAuMS4xMTM4ODMuMy42MDAuMS4xODM0Jw0KdmFsdWVzZXQgIk1lZGljYWwgUmVhc29uIjogJ2h0dHA6Ly9jdHMubmxtLm5paC5nb3YvZmhpci9WYWx1ZVNldC8yLjE2Ljg0MC4xLjExMzg4My4zLjUyNi4zLjEwMDcnDQoNCmNvZGUgIkRvY3VtZW50YXRpb24gb2YgY3VycmVudCBtZWRpY2F0aW9ucyAocHJvY2VkdXJlKSI6ICc0MjgxOTEwMDAxMjQxMDEnIGZyb20gIlNOT01FRENUIiBkaXNwbGF5ICdEb2N1bWVudGF0aW9uIG9mIGN1cnJlbnQgbWVkaWNhdGlvbnMgKHByb2NlZHVyZSknDQoNCnBhcmFtZXRlciAiTWVhc3VyZW1lbnQgUGVyaW9kIiBJbnRlcnZhbDxEYXRlVGltZT4NCiAgZGVmYXVsdCBJbnRlcnZhbFtAMjAyNS0wMS0wMVQwMDowMDowMC4wLCBAMjAyNi0wMS0wMVQwMDowMDowMC4wKQ0KY29udGV4dCBQYXRpZW50DQoNCmRlZmluZSAiU0RFIEV0aG5pY2l0eSI6DQogIFNERS4iU0RFIEV0aG5pY2l0eSINCg0KZGVmaW5lICJTREUgUGF5ZXIiOg0KICBTREUuIlNERSBQYXllciINCg0KZGVmaW5lICJTREUgUmFjZSI6DQogIFNERS4iU0RFIFJhY2UiDQoNCmRlZmluZSAiU0RFIFNleCI6DQogIFNERS4iU0RFIFNleCINCg0KZGVmaW5lICJEZW5vbWluYXRvciI6DQogICJJbml0aWFsIFBvcHVsYXRpb24iDQoNCmRlZmluZSAiUXVhbGlmeWluZyBFbmNvdW50ZXIgZHVyaW5nIGRheSBvZiBNZWFzdXJlbWVudCBQZXJpb2QiOg0KICBbIkVuY291bnRlciI6ICJFbmNvdW50ZXIgdG8gRG9jdW1lbnQgTWVkaWNhdGlvbnMiXSBWYWxpZEVuY291bnRlcg0KICAgIHdoZXJlIFZhbGlkRW5jb3VudGVyLnN0YXR1cyA9ICdmaW5pc2hlZCcNCiAgICAgIGFuZCBWYWxpZEVuY291bnRlci5wZXJpb2QgZHVyaW5nIGRheSBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIg0KDQpkZWZpbmUgIkluaXRpYWwgUG9wdWxhdGlvbiI6DQogICJRdWFsaWZ5aW5nIEVuY291bnRlciBkdXJpbmcgZGF5IG9mIE1lYXN1cmVtZW50IFBlcmlvZCIgUXVhbGlmeWluZ0VuY291bnRlcg0KDQpkZWZpbmUgIk51bWVyYXRvciI6DQogICJRdWFsaWZ5aW5nIEVuY291bnRlciBkdXJpbmcgZGF5IG9mIE1lYXN1cmVtZW50IFBlcmlvZCIgUXVhbGlmeWluZ0VuY291bnRlcg0KICAgIHdpdGggW1Byb2NlZHVyZTogIkRvY3VtZW50YXRpb24gb2YgY3VycmVudCBtZWRpY2F0aW9ucyAocHJvY2VkdXJlKSJdIE1lZGljYXRpb25zRG9jdW1lbnRlZA0KICAgICAgc3VjaCB0aGF0IE1lZGljYXRpb25zRG9jdW1lbnRlZC5wZXJmb3JtZWQudG9JbnRlcnZhbCAoICkgZW5kcyBkdXJpbmcgUXVhbGlmeWluZ0VuY291bnRlci5wZXJpb2QNCiAgICAgICAgYW5kIE1lZGljYXRpb25zRG9jdW1lbnRlZC5zdGF0dXMgPSAnY29tcGxldGVkJw0KDQpkZWZpbmUgIkRlbm9taW5hdG9yIEV4Y2VwdGlvbnMiOg0KICAiUXVhbGlmeWluZyBFbmNvdW50ZXIgZHVyaW5nIGRheSBvZiBNZWFzdXJlbWVudCBQZXJpb2QiIFF1YWxpZnlpbmdFbmNvdW50ZXINCiAgICB3aXRoIFtQcm9jZWR1cmVOb3REb25lOiBjb2RlIH4gIkRvY3VtZW50YXRpb24gb2YgY3VycmVudCBtZWRpY2F0aW9ucyAocHJvY2VkdXJlKSJdIE1lZGljYXRpb25zTm90RG9jdW1lbnRlZA0KICAgICAgc3VjaCB0aGF0IE1lZGljYXRpb25zTm90RG9jdW1lbnRlZC5yZWNvcmRlZCBkdXJpbmcgUXVhbGlmeWluZ0VuY291bnRlci5wZXJpb2QNCiAgICAgICAgYW5kIE1lZGljYXRpb25zTm90RG9jdW1lbnRlZC5zdGF0dXMgPSAnbm90LWRvbmUnDQogICAgICAgIGFuZCBNZWRpY2F0aW9uc05vdERvY3VtZW50ZWQucmVhc29uQ29kZSBpbiAiTWVkaWNhbCBSZWFzb24i"
    },
    {
      "id": "DocumentationofCurrentMedicationsFHIR-0.2.000+dll",
      "contentType": "application/octet-stream",
      "data": "
    },
    {
      "id": "DocumentationofCurrentMedicationsFHIR-0.2.000+csharp",
      "contentType": "text/plain",
      "data": ""
    }
  ]
}